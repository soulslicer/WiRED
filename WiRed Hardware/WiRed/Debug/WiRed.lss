
WiRed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e2  00800100  00005f60  00005ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005f60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000025d  008003e2  008003e2  000062d6  2**0
                  ALLOC
  3 .stab         00003108  00000000  00000000  000062d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e62  00000000  00000000  000093e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000b90  00000000  00000000  0000a248  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000bc7  00000000  00000000  0000add8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000117a9  00000000  00000000  0000b99f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002dc3  00000000  00000000  0001d148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000053d6  00000000  00000000  0001ff0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001d78  00000000  00000000  000252e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002f00  00000000  00000000  0002705c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000091dc  00000000  00000000  00029f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009e8  00000000  00000000  00033138  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ac 00 	jmp	0x158	; 0x158 <__dtors_end>
       4:	0c 94 17 21 	jmp	0x422e	; 0x422e <__vector_1>
       8:	0c 94 44 21 	jmp	0x4288	; 0x4288 <__vector_2>
       c:	0c 94 75 12 	jmp	0x24ea	; 0x24ea <__vector_3>
      10:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__vector_4>
      14:	0c 94 bd 12 	jmp	0x257a	; 0x257a <__vector_5>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__vector_7>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 df 14 	jmp	0x29be	; 0x29be <__vector_13>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 71 21 	jmp	0x42e2	; 0x42e2 <__vector_16>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__vector_18>
      4c:	0c 94 93 23 	jmp	0x4726	; 0x4726 <__vector_19>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>

00000068 <_ZL5table>:
      68:	00 c2 01 00 01 00 11 00 11 00 0c 00 00 e1 00 00     ................
      78:	0a 00 25 00 25 00 21 00 00 96 00 00 19 00 39 00     ..%.%.!.......9.
      88:	39 00 36 00 12 7a 00 00 1f 00 46 00 46 00 44 00     9.6..z....F.F.D.
      98:	80 70 00 00 22 00 4d 00 4d 00 4a 00 00 4b 00 00     .p..".M.M.J..K..
      a8:	36 00 75 00 75 00 72 00 40 38 00 00 4a 00 9c 00     6.u.u.r.@8..J...
      b8:	9c 00 99 00 80 25 00 00 72 00 ec 00 ec 00 e9 00     .....%..r.......
      c8:	c0 12 00 00 e9 00 da 01 da 01 d7 01 60 09 00 00     ............`...
      d8:	d7 01 b6 03 b6 03 b3 03 b0 04 00 00 b3 03 6e 07     ..............n.
      e8:	6e 07 6b 07 2c 01 00 00 dc 0e c1 1d c1 1d be 1d     n.k.,...........

000000f8 <port_to_mode_PGM>:
      f8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000102 <port_to_output_PGM>:
     102:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000010c <port_to_input_PGM>:
     10c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000116 <digital_pin_to_port_PGM>:
     116:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     126:	03 03 03 03                                         ....

0000012a <digital_pin_to_bit_mask_PGM>:
     12a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     13a:	04 08 10 20                                         ... 

0000013e <digital_pin_to_timer_PGM>:
     13e:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
     14e:	00 00 00 00                                         ....

00000152 <__ctors_start>:
     152:	d3 1e       	adc	r13, r19
     154:	f9 24       	eor	r15, r9

00000156 <__ctors_end>:
     156:	d8 1e       	adc	r13, r24

00000158 <__dtors_end>:
     158:	11 24       	eor	r1, r1
     15a:	1f be       	out	0x3f, r1	; 63
     15c:	cf ef       	ldi	r28, 0xFF	; 255
     15e:	d8 e0       	ldi	r29, 0x08	; 8
     160:	de bf       	out	0x3e, r29	; 62
     162:	cd bf       	out	0x3d, r28	; 61

00000164 <__do_copy_data>:
     164:	13 e0       	ldi	r17, 0x03	; 3
     166:	a0 e0       	ldi	r26, 0x00	; 0
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	e0 e6       	ldi	r30, 0x60	; 96
     16c:	ff e5       	ldi	r31, 0x5F	; 95
     16e:	02 c0       	rjmp	.+4      	; 0x174 <__do_copy_data+0x10>
     170:	05 90       	lpm	r0, Z+
     172:	0d 92       	st	X+, r0
     174:	a2 3e       	cpi	r26, 0xE2	; 226
     176:	b1 07       	cpc	r27, r17
     178:	d9 f7       	brne	.-10     	; 0x170 <__do_copy_data+0xc>

0000017a <__do_clear_bss>:
     17a:	16 e0       	ldi	r17, 0x06	; 6
     17c:	a2 ee       	ldi	r26, 0xE2	; 226
     17e:	b3 e0       	ldi	r27, 0x03	; 3
     180:	01 c0       	rjmp	.+2      	; 0x184 <.do_clear_bss_start>

00000182 <.do_clear_bss_loop>:
     182:	1d 92       	st	X+, r1

00000184 <.do_clear_bss_start>:
     184:	af 33       	cpi	r26, 0x3F	; 63
     186:	b1 07       	cpc	r27, r17
     188:	e1 f7       	brne	.-8      	; 0x182 <.do_clear_bss_loop>

0000018a <__do_global_ctors>:
     18a:	11 e0       	ldi	r17, 0x01	; 1
     18c:	c6 e5       	ldi	r28, 0x56	; 86
     18e:	d1 e0       	ldi	r29, 0x01	; 1
     190:	04 c0       	rjmp	.+8      	; 0x19a <__do_global_ctors+0x10>
     192:	22 97       	sbiw	r28, 0x02	; 2
     194:	fe 01       	movw	r30, r28
     196:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__tablejump__>
     19a:	c2 35       	cpi	r28, 0x52	; 82
     19c:	d1 07       	cpc	r29, r17
     19e:	c9 f7       	brne	.-14     	; 0x192 <__do_global_ctors+0x8>
     1a0:	0e 94 49 25 	call	0x4a92	; 0x4a92 <main>
     1a4:	0c 94 a3 2f 	jmp	0x5f46	; 0x5f46 <__do_global_dtors>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <__lshrdi3>:
     1ac:	cf 92       	push	r12
     1ae:	df 92       	push	r13
     1b0:	ef 92       	push	r14
     1b2:	ff 92       	push	r15
     1b4:	0f 93       	push	r16
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	cd b7       	in	r28, 0x3d	; 61
     1bc:	de b7       	in	r29, 0x3e	; 62
     1be:	60 97       	sbiw	r28, 0x10	; 16
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	de bf       	out	0x3e, r29	; 62
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	cd bf       	out	0x3d, r28	; 61
     1ca:	00 23       	and	r16, r16
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <__lshrdi3+0x24>
     1ce:	5a c0       	rjmp	.+180    	; 0x284 <__lshrdi3+0xd8>
     1d0:	29 87       	std	Y+9, r18	; 0x09
     1d2:	3a 87       	std	Y+10, r19	; 0x0a
     1d4:	4b 87       	std	Y+11, r20	; 0x0b
     1d6:	5c 87       	std	Y+12, r21	; 0x0c
     1d8:	6d 87       	std	Y+13, r22	; 0x0d
     1da:	7e 87       	std	Y+14, r23	; 0x0e
     1dc:	8f 87       	std	Y+15, r24	; 0x0f
     1de:	98 8b       	std	Y+16, r25	; 0x10
     1e0:	80 e2       	ldi	r24, 0x20	; 32
     1e2:	80 1b       	sub	r24, r16
     1e4:	4d 85       	ldd	r20, Y+13	; 0x0d
     1e6:	5e 85       	ldd	r21, Y+14	; 0x0e
     1e8:	6f 85       	ldd	r22, Y+15	; 0x0f
     1ea:	78 89       	ldd	r23, Y+16	; 0x10
     1ec:	18 16       	cp	r1, r24
     1ee:	b4 f0       	brlt	.+44     	; 0x21c <__lshrdi3+0x70>
     1f0:	1d 82       	std	Y+5, r1	; 0x05
     1f2:	1e 82       	std	Y+6, r1	; 0x06
     1f4:	1f 82       	std	Y+7, r1	; 0x07
     1f6:	18 86       	std	Y+8, r1	; 0x08
     1f8:	99 27       	eor	r25, r25
     1fa:	87 fd       	sbrc	r24, 7
     1fc:	90 95       	com	r25
     1fe:	90 95       	com	r25
     200:	81 95       	neg	r24
     202:	9f 4f       	sbci	r25, 0xFF	; 255
     204:	04 c0       	rjmp	.+8      	; 0x20e <__lshrdi3+0x62>
     206:	76 95       	lsr	r23
     208:	67 95       	ror	r22
     20a:	57 95       	ror	r21
     20c:	47 95       	ror	r20
     20e:	8a 95       	dec	r24
     210:	d2 f7       	brpl	.-12     	; 0x206 <__lshrdi3+0x5a>
     212:	49 83       	std	Y+1, r20	; 0x01
     214:	5a 83       	std	Y+2, r21	; 0x02
     216:	6b 83       	std	Y+3, r22	; 0x03
     218:	7c 83       	std	Y+4, r23	; 0x04
     21a:	2c c0       	rjmp	.+88     	; 0x274 <__lshrdi3+0xc8>
     21c:	6a 01       	movw	r12, r20
     21e:	7b 01       	movw	r14, r22
     220:	00 2e       	mov	r0, r16
     222:	04 c0       	rjmp	.+8      	; 0x22c <__lshrdi3+0x80>
     224:	f6 94       	lsr	r15
     226:	e7 94       	ror	r14
     228:	d7 94       	ror	r13
     22a:	c7 94       	ror	r12
     22c:	0a 94       	dec	r0
     22e:	d2 f7       	brpl	.-12     	; 0x224 <__lshrdi3+0x78>
     230:	cd 82       	std	Y+5, r12	; 0x05
     232:	de 82       	std	Y+6, r13	; 0x06
     234:	ef 82       	std	Y+7, r14	; 0x07
     236:	f8 86       	std	Y+8, r15	; 0x08
     238:	6a 01       	movw	r12, r20
     23a:	7b 01       	movw	r14, r22
     23c:	04 c0       	rjmp	.+8      	; 0x246 <__lshrdi3+0x9a>
     23e:	cc 0c       	add	r12, r12
     240:	dd 1c       	adc	r13, r13
     242:	ee 1c       	adc	r14, r14
     244:	ff 1c       	adc	r15, r15
     246:	8a 95       	dec	r24
     248:	d2 f7       	brpl	.-12     	; 0x23e <__lshrdi3+0x92>
     24a:	d7 01       	movw	r26, r14
     24c:	c6 01       	movw	r24, r12
     24e:	49 85       	ldd	r20, Y+9	; 0x09
     250:	5a 85       	ldd	r21, Y+10	; 0x0a
     252:	6b 85       	ldd	r22, Y+11	; 0x0b
     254:	7c 85       	ldd	r23, Y+12	; 0x0c
     256:	04 c0       	rjmp	.+8      	; 0x260 <__lshrdi3+0xb4>
     258:	76 95       	lsr	r23
     25a:	67 95       	ror	r22
     25c:	57 95       	ror	r21
     25e:	47 95       	ror	r20
     260:	0a 95       	dec	r16
     262:	d2 f7       	brpl	.-12     	; 0x258 <__lshrdi3+0xac>
     264:	84 2b       	or	r24, r20
     266:	95 2b       	or	r25, r21
     268:	a6 2b       	or	r26, r22
     26a:	b7 2b       	or	r27, r23
     26c:	89 83       	std	Y+1, r24	; 0x01
     26e:	9a 83       	std	Y+2, r25	; 0x02
     270:	ab 83       	std	Y+3, r26	; 0x03
     272:	bc 83       	std	Y+4, r27	; 0x04
     274:	29 81       	ldd	r18, Y+1	; 0x01
     276:	3a 81       	ldd	r19, Y+2	; 0x02
     278:	4b 81       	ldd	r20, Y+3	; 0x03
     27a:	5c 81       	ldd	r21, Y+4	; 0x04
     27c:	6d 81       	ldd	r22, Y+5	; 0x05
     27e:	7e 81       	ldd	r23, Y+6	; 0x06
     280:	8f 81       	ldd	r24, Y+7	; 0x07
     282:	98 85       	ldd	r25, Y+8	; 0x08
     284:	60 96       	adiw	r28, 0x10	; 16
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	f8 94       	cli
     28a:	de bf       	out	0x3e, r29	; 62
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	cd bf       	out	0x3d, r28	; 61
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	0f 91       	pop	r16
     296:	ff 90       	pop	r15
     298:	ef 90       	pop	r14
     29a:	df 90       	pop	r13
     29c:	cf 90       	pop	r12
     29e:	08 95       	ret

000002a0 <__ashldi3>:
     2a0:	cf 92       	push	r12
     2a2:	df 92       	push	r13
     2a4:	ef 92       	push	r14
     2a6:	ff 92       	push	r15
     2a8:	0f 93       	push	r16
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	60 97       	sbiw	r28, 0x10	; 16
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	00 23       	and	r16, r16
     2c0:	09 f4       	brne	.+2      	; 0x2c4 <__ashldi3+0x24>
     2c2:	5a c0       	rjmp	.+180    	; 0x378 <__ashldi3+0xd8>
     2c4:	29 87       	std	Y+9, r18	; 0x09
     2c6:	3a 87       	std	Y+10, r19	; 0x0a
     2c8:	4b 87       	std	Y+11, r20	; 0x0b
     2ca:	5c 87       	std	Y+12, r21	; 0x0c
     2cc:	6d 87       	std	Y+13, r22	; 0x0d
     2ce:	7e 87       	std	Y+14, r23	; 0x0e
     2d0:	8f 87       	std	Y+15, r24	; 0x0f
     2d2:	98 8b       	std	Y+16, r25	; 0x10
     2d4:	80 e2       	ldi	r24, 0x20	; 32
     2d6:	80 1b       	sub	r24, r16
     2d8:	49 85       	ldd	r20, Y+9	; 0x09
     2da:	5a 85       	ldd	r21, Y+10	; 0x0a
     2dc:	6b 85       	ldd	r22, Y+11	; 0x0b
     2de:	7c 85       	ldd	r23, Y+12	; 0x0c
     2e0:	18 16       	cp	r1, r24
     2e2:	b4 f0       	brlt	.+44     	; 0x310 <__ashldi3+0x70>
     2e4:	19 82       	std	Y+1, r1	; 0x01
     2e6:	1a 82       	std	Y+2, r1	; 0x02
     2e8:	1b 82       	std	Y+3, r1	; 0x03
     2ea:	1c 82       	std	Y+4, r1	; 0x04
     2ec:	99 27       	eor	r25, r25
     2ee:	87 fd       	sbrc	r24, 7
     2f0:	90 95       	com	r25
     2f2:	90 95       	com	r25
     2f4:	81 95       	neg	r24
     2f6:	9f 4f       	sbci	r25, 0xFF	; 255
     2f8:	04 c0       	rjmp	.+8      	; 0x302 <__ashldi3+0x62>
     2fa:	44 0f       	add	r20, r20
     2fc:	55 1f       	adc	r21, r21
     2fe:	66 1f       	adc	r22, r22
     300:	77 1f       	adc	r23, r23
     302:	8a 95       	dec	r24
     304:	d2 f7       	brpl	.-12     	; 0x2fa <__ashldi3+0x5a>
     306:	4d 83       	std	Y+5, r20	; 0x05
     308:	5e 83       	std	Y+6, r21	; 0x06
     30a:	6f 83       	std	Y+7, r22	; 0x07
     30c:	78 87       	std	Y+8, r23	; 0x08
     30e:	2c c0       	rjmp	.+88     	; 0x368 <__ashldi3+0xc8>
     310:	6a 01       	movw	r12, r20
     312:	7b 01       	movw	r14, r22
     314:	00 2e       	mov	r0, r16
     316:	04 c0       	rjmp	.+8      	; 0x320 <__ashldi3+0x80>
     318:	cc 0c       	add	r12, r12
     31a:	dd 1c       	adc	r13, r13
     31c:	ee 1c       	adc	r14, r14
     31e:	ff 1c       	adc	r15, r15
     320:	0a 94       	dec	r0
     322:	d2 f7       	brpl	.-12     	; 0x318 <__ashldi3+0x78>
     324:	c9 82       	std	Y+1, r12	; 0x01
     326:	da 82       	std	Y+2, r13	; 0x02
     328:	eb 82       	std	Y+3, r14	; 0x03
     32a:	fc 82       	std	Y+4, r15	; 0x04
     32c:	6a 01       	movw	r12, r20
     32e:	7b 01       	movw	r14, r22
     330:	04 c0       	rjmp	.+8      	; 0x33a <__ashldi3+0x9a>
     332:	f6 94       	lsr	r15
     334:	e7 94       	ror	r14
     336:	d7 94       	ror	r13
     338:	c7 94       	ror	r12
     33a:	8a 95       	dec	r24
     33c:	d2 f7       	brpl	.-12     	; 0x332 <__ashldi3+0x92>
     33e:	d7 01       	movw	r26, r14
     340:	c6 01       	movw	r24, r12
     342:	4d 85       	ldd	r20, Y+13	; 0x0d
     344:	5e 85       	ldd	r21, Y+14	; 0x0e
     346:	6f 85       	ldd	r22, Y+15	; 0x0f
     348:	78 89       	ldd	r23, Y+16	; 0x10
     34a:	04 c0       	rjmp	.+8      	; 0x354 <__ashldi3+0xb4>
     34c:	44 0f       	add	r20, r20
     34e:	55 1f       	adc	r21, r21
     350:	66 1f       	adc	r22, r22
     352:	77 1f       	adc	r23, r23
     354:	0a 95       	dec	r16
     356:	d2 f7       	brpl	.-12     	; 0x34c <__ashldi3+0xac>
     358:	84 2b       	or	r24, r20
     35a:	95 2b       	or	r25, r21
     35c:	a6 2b       	or	r26, r22
     35e:	b7 2b       	or	r27, r23
     360:	8d 83       	std	Y+5, r24	; 0x05
     362:	9e 83       	std	Y+6, r25	; 0x06
     364:	af 83       	std	Y+7, r26	; 0x07
     366:	b8 87       	std	Y+8, r27	; 0x08
     368:	29 81       	ldd	r18, Y+1	; 0x01
     36a:	3a 81       	ldd	r19, Y+2	; 0x02
     36c:	4b 81       	ldd	r20, Y+3	; 0x03
     36e:	5c 81       	ldd	r21, Y+4	; 0x04
     370:	6d 81       	ldd	r22, Y+5	; 0x05
     372:	7e 81       	ldd	r23, Y+6	; 0x06
     374:	8f 81       	ldd	r24, Y+7	; 0x07
     376:	98 85       	ldd	r25, Y+8	; 0x08
     378:	60 96       	adiw	r28, 0x10	; 16
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	0f 91       	pop	r16
     38a:	ff 90       	pop	r15
     38c:	ef 90       	pop	r14
     38e:	df 90       	pop	r13
     390:	cf 90       	pop	r12
     392:	08 95       	ret

00000394 <_Z5MATCHii>:

#define TICKS_LOW(us) (int) (((us)*LTOL/USECPERTICK))
#define TICKS_HIGH(us) (int) (((us)*UTOL/USECPERTICK + 1))

#ifndef DEBUG
int MATCH(int measured, int desired) {return measured >= TICKS_LOW(desired) && measured <= TICKS_HIGH(desired);}
     394:	cf 92       	push	r12
     396:	df 92       	push	r13
     398:	ef 92       	push	r14
     39a:	ff 92       	push	r15
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	ec 01       	movw	r28, r24
     3a2:	88 27       	eor	r24, r24
     3a4:	77 fd       	sbrc	r23, 7
     3a6:	80 95       	com	r24
     3a8:	98 2f       	mov	r25, r24
     3aa:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__floatsisf>
     3ae:	6b 01       	movw	r12, r22
     3b0:	7c 01       	movw	r14, r24
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	40 e4       	ldi	r20, 0x40	; 64
     3b8:	5f e3       	ldi	r21, 0x3F	; 63
     3ba:	0e 94 91 20 	call	0x4122	; 0x4122 <__mulsf3>
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	48 e4       	ldi	r20, 0x48	; 72
     3c4:	52 e4       	ldi	r21, 0x42	; 66
     3c6:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__divsf3>
     3ca:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__fixsfsi>
     3ce:	dc 01       	movw	r26, r24
     3d0:	cb 01       	movw	r24, r22
     3d2:	c8 17       	cp	r28, r24
     3d4:	d9 07       	cpc	r29, r25
     3d6:	e4 f0       	brlt	.+56     	; 0x410 <_Z5MATCHii+0x7c>
     3d8:	c7 01       	movw	r24, r14
     3da:	b6 01       	movw	r22, r12
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	40 ea       	ldi	r20, 0xA0	; 160
     3e2:	5f e3       	ldi	r21, 0x3F	; 63
     3e4:	0e 94 91 20 	call	0x4122	; 0x4122 <__mulsf3>
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	48 e4       	ldi	r20, 0x48	; 72
     3ee:	52 e4       	ldi	r21, 0x42	; 66
     3f0:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <__divsf3>
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	40 e8       	ldi	r20, 0x80	; 128
     3fa:	5f e3       	ldi	r21, 0x3F	; 63
     3fc:	0e 94 de 1e 	call	0x3dbc	; 0x3dbc <__addsf3>
     400:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <__fixsfsi>
     404:	ab 01       	movw	r20, r22
     406:	bc 01       	movw	r22, r24
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	4c 17       	cp	r20, r28
     40c:	5d 07       	cpc	r21, r29
     40e:	0c f4       	brge	.+2      	; 0x412 <_Z5MATCHii+0x7e>
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	ff 90       	pop	r15
     41a:	ef 90       	pop	r14
     41c:	df 90       	pop	r13
     41e:	cf 90       	pop	r12
     420:	08 95       	ret

00000422 <_Z10MATCH_MARKii>:
int MATCH_MARK(int measured_ticks, int desired_us) {return MATCH(measured_ticks, (desired_us + MARK_EXCESS));}
     422:	6c 59       	subi	r22, 0x9C	; 156
     424:	7f 4f       	sbci	r23, 0xFF	; 255
     426:	0e 94 ca 01 	call	0x394	; 0x394 <_Z5MATCHii>
     42a:	08 95       	ret

0000042c <_Z11MATCH_SPACEii>:
int MATCH_SPACE(int measured_ticks, int desired_us) {return MATCH(measured_ticks, (desired_us - MARK_EXCESS));}
     42c:	64 56       	subi	r22, 0x64	; 100
     42e:	70 40       	sbci	r23, 0x00	; 0
     430:	0e 94 ca 01 	call	0x394	; 0x394 <_Z5MATCHii>
     434:	08 95       	ret

00000436 <_ZN6IRsend4markEi>:
        data <<= 1;
    }
    mark(JVC_BIT_MARK);
    space(0);
}
void IRsend::mark(int time) {
     436:	cb 01       	movw	r24, r22
  // Sends an IR mark for the specified number of microseconds.
  // The mark output is modulated at the PWM frequency.
  TIMER_ENABLE_PWM; // Enable pin 3 PWM output
     438:	e0 eb       	ldi	r30, 0xB0	; 176
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	20 81       	ld	r18, Z
     43e:	20 62       	ori	r18, 0x20	; 32
     440:	20 83       	st	Z, r18
  delayMicroseconds(time);
     442:	0e 94 20 22 	call	0x4440	; 0x4440 <delayMicroseconds>
}
     446:	08 95       	ret

00000448 <_ZN6IRsend5spaceEi>:

/* Leave pin off for time (given in microseconds) */
void IRsend::space(int time) {
     448:	cb 01       	movw	r24, r22
  // Sends an IR space for the specified number of microseconds.
  // A space is no output, so the PWM output is disabled.
  TIMER_DISABLE_PWM; // Disable pin 3 PWM output
     44a:	e0 eb       	ldi	r30, 0xB0	; 176
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	20 81       	ld	r18, Z
     450:	2f 7d       	andi	r18, 0xDF	; 223
     452:	20 83       	st	Z, r18
  delayMicroseconds(time);
     454:	0e 94 20 22 	call	0x4440	; 0x4440 <delayMicroseconds>
}
     458:	08 95       	ret

0000045a <_ZN6IRsend11enableIROutEi>:

void IRsend::enableIROut(int khz) {
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	eb 01       	movw	r28, r22
  // A few hours staring at the ATmega documentation and this will all make sense.
  // See my Secrets of Arduino PWM at http://arcfn.com/2009/07/secrets-of-arduino-pwm.html for details.

  
  // Disable the Timer2 Interrupt (which is used for receiving IR)
  TIMER_DISABLE_INTR; //Timer2 Overflow Interrupt
     460:	10 92 70 00 	sts	0x0070, r1
  
  pinMode(TIMER_PWM_PIN, OUTPUT);
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	0e 94 65 22 	call	0x44ca	; 0x44ca <pinMode>
  digitalWrite(TIMER_PWM_PIN, LOW); // When not sending PWM, we want it low
     46c:	83 e0       	ldi	r24, 0x03	; 3
     46e:	60 e0       	ldi	r22, 0x00	; 0
     470:	0e 94 a4 22 	call	0x4548	; 0x4548 <digitalWrite>
  // COM2A = 00: disconnect OC2A
  // COM2B = 00: disconnect OC2B; to send signal set to 10: OC2B non-inverted
  // WGM2 = 101: phase-correct PWM with OCRA as top
  // CS2 = 000: no prescaling
  // The top value for the timer.  The modulation frequency will be SYSCLOCK / 2 / OCR2A.
  TIMER_CONFIG_KHZ(khz);
     474:	9e 01       	movw	r18, r28
     476:	44 27       	eor	r20, r20
     478:	37 fd       	sbrc	r19, 7
     47a:	40 95       	com	r20
     47c:	54 2f       	mov	r21, r20
     47e:	60 e4       	ldi	r22, 0x40	; 64
     480:	7f e1       	ldi	r23, 0x1F	; 31
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	0e 94 45 2c 	call	0x588a	; 0x588a <__divmodsi4>
     48a:	82 2f       	mov	r24, r18
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	90 93 b0 00 	sts	0x00B0, r25
     492:	99 e0       	ldi	r25, 0x09	; 9
     494:	90 93 b1 00 	sts	0x00B1, r25
     498:	20 93 b3 00 	sts	0x00B3, r18
     49c:	63 e0       	ldi	r22, 0x03	; 3
     49e:	0e 94 04 2c 	call	0x5808	; 0x5808 <__udivmodqi4>
     4a2:	80 93 b4 00 	sts	0x00B4, r24
}
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <_ZN6IRsend13sendPanasonicEjm>:

    data <<= 1;
  }
  space(0); // Turn off at end
}
void IRsend::sendPanasonic(unsigned int address, unsigned long data) {
     4ac:	af 92       	push	r10
     4ae:	bf 92       	push	r11
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	ec 01       	movw	r28, r24
     4c2:	5b 01       	movw	r10, r22
     4c4:	69 01       	movw	r12, r18
     4c6:	7a 01       	movw	r14, r20
    enableIROut(35);
     4c8:	63 e2       	ldi	r22, 0x23	; 35
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN6IRsend11enableIROutEi>
    mark(PANASONIC_HDR_MARK);
     4d0:	ce 01       	movw	r24, r28
     4d2:	6e ea       	ldi	r22, 0xAE	; 174
     4d4:	7d e0       	ldi	r23, 0x0D	; 13
     4d6:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
    space(PANASONIC_HDR_SPACE);
     4da:	ce 01       	movw	r24, r28
     4dc:	66 ed       	ldi	r22, 0xD6	; 214
     4de:	76 e0       	ldi	r23, 0x06	; 6
     4e0:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
     4e4:	00 e1       	ldi	r16, 0x10	; 16
     4e6:	10 e0       	ldi	r17, 0x00	; 0
    
    for(int i=0;i<16;i++)
    {
        mark(PANASONIC_BIT_MARK);
     4e8:	ce 01       	movw	r24, r28
     4ea:	66 ef       	ldi	r22, 0xF6	; 246
     4ec:	71 e0       	ldi	r23, 0x01	; 1
     4ee:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
        if (address & 0x8000) {
            space(PANASONIC_ONE_SPACE);
     4f2:	ce 01       	movw	r24, r28
    space(PANASONIC_HDR_SPACE);
    
    for(int i=0;i<16;i++)
    {
        mark(PANASONIC_BIT_MARK);
        if (address & 0x8000) {
     4f4:	b7 fe       	sbrs	r11, 7
     4f6:	03 c0       	rjmp	.+6      	; 0x4fe <_ZN6IRsend13sendPanasonicEjm+0x52>
            space(PANASONIC_ONE_SPACE);
     4f8:	6c ed       	ldi	r22, 0xDC	; 220
     4fa:	74 e0       	ldi	r23, 0x04	; 4
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <_ZN6IRsend13sendPanasonicEjm+0x56>
        } else {
            space(PANASONIC_ZERO_SPACE);
     4fe:	60 e9       	ldi	r22, 0x90	; 144
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
        }
        address <<= 1;        
     506:	aa 0c       	add	r10, r10
     508:	bb 1c       	adc	r11, r11
     50a:	01 50       	subi	r16, 0x01	; 1
     50c:	10 40       	sbci	r17, 0x00	; 0
void IRsend::sendPanasonic(unsigned int address, unsigned long data) {
    enableIROut(35);
    mark(PANASONIC_HDR_MARK);
    space(PANASONIC_HDR_SPACE);
    
    for(int i=0;i<16;i++)
     50e:	61 f7       	brne	.-40     	; 0x4e8 <_ZN6IRsend13sendPanasonicEjm+0x3c>
     510:	00 e2       	ldi	r16, 0x20	; 32
     512:	10 e0       	ldi	r17, 0x00	; 0
            space(PANASONIC_ZERO_SPACE);
        }
        address <<= 1;        
    }    
    for (int i=0; i < 32; i++) {
        mark(PANASONIC_BIT_MARK);
     514:	ce 01       	movw	r24, r28
     516:	66 ef       	ldi	r22, 0xF6	; 246
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
        if (data & TOPBIT) {
            space(PANASONIC_ONE_SPACE);
     51e:	ce 01       	movw	r24, r28
        }
        address <<= 1;        
    }    
    for (int i=0; i < 32; i++) {
        mark(PANASONIC_BIT_MARK);
        if (data & TOPBIT) {
     520:	f7 fe       	sbrs	r15, 7
     522:	03 c0       	rjmp	.+6      	; 0x52a <_ZN6IRsend13sendPanasonicEjm+0x7e>
            space(PANASONIC_ONE_SPACE);
     524:	6c ed       	ldi	r22, 0xDC	; 220
     526:	74 e0       	ldi	r23, 0x04	; 4
     528:	02 c0       	rjmp	.+4      	; 0x52e <_ZN6IRsend13sendPanasonicEjm+0x82>
        } else {
            space(PANASONIC_ZERO_SPACE);
     52a:	60 e9       	ldi	r22, 0x90	; 144
     52c:	71 e0       	ldi	r23, 0x01	; 1
     52e:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
        }
        data <<= 1;
     532:	cc 0c       	add	r12, r12
     534:	dd 1c       	adc	r13, r13
     536:	ee 1c       	adc	r14, r14
     538:	ff 1c       	adc	r15, r15
     53a:	01 50       	subi	r16, 0x01	; 1
     53c:	10 40       	sbci	r17, 0x00	; 0
        } else {
            space(PANASONIC_ZERO_SPACE);
        }
        address <<= 1;        
    }    
    for (int i=0; i < 32; i++) {
     53e:	51 f7       	brne	.-44     	; 0x514 <_ZN6IRsend13sendPanasonicEjm+0x68>
        } else {
            space(PANASONIC_ZERO_SPACE);
        }
        data <<= 1;
    }
    mark(PANASONIC_BIT_MARK);
     540:	ce 01       	movw	r24, r28
     542:	66 ef       	ldi	r22, 0xF6	; 246
     544:	71 e0       	ldi	r23, 0x01	; 1
     546:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
    space(0);
     54a:	ce 01       	movw	r24, r28
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	1f 91       	pop	r17
     55a:	0f 91       	pop	r16
     55c:	ff 90       	pop	r15
     55e:	ef 90       	pop	r14
     560:	df 90       	pop	r13
     562:	cf 90       	pop	r12
     564:	bf 90       	pop	r11
     566:	af 90       	pop	r10
     568:	08 95       	ret

0000056a <_ZN6IRsend7sendRC6Emi>:
  space(0); // Turn off at end
}

// Caller needs to take care of flipping the toggle bit
void IRsend::sendRC6(unsigned long data, int nbits)
{
     56a:	8f 92       	push	r8
     56c:	9f 92       	push	r9
     56e:	af 92       	push	r10
     570:	bf 92       	push	r11
     572:	cf 92       	push	r12
     574:	df 92       	push	r13
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	ec 01       	movw	r28, r24
     584:	6a 01       	movw	r12, r20
     586:	7b 01       	movw	r14, r22
     588:	49 01       	movw	r8, r18
  enableIROut(36);
     58a:	64 e2       	ldi	r22, 0x24	; 36
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN6IRsend11enableIROutEi>
  data = data << (32 - nbits);
     592:	80 e2       	ldi	r24, 0x20	; 32
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	88 19       	sub	r24, r8
     598:	99 09       	sbc	r25, r9
     59a:	04 c0       	rjmp	.+8      	; 0x5a4 <_ZN6IRsend7sendRC6Emi+0x3a>
     59c:	cc 0c       	add	r12, r12
     59e:	dd 1c       	adc	r13, r13
     5a0:	ee 1c       	adc	r14, r14
     5a2:	ff 1c       	adc	r15, r15
     5a4:	8a 95       	dec	r24
     5a6:	d2 f7       	brpl	.-12     	; 0x59c <_ZN6IRsend7sendRC6Emi+0x32>
  mark(RC6_HDR_MARK);
     5a8:	ce 01       	movw	r24, r28
     5aa:	6a e6       	ldi	r22, 0x6A	; 106
     5ac:	7a e0       	ldi	r23, 0x0A	; 10
     5ae:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
  space(RC6_HDR_SPACE);
     5b2:	ce 01       	movw	r24, r28
     5b4:	69 e7       	ldi	r22, 0x79	; 121
     5b6:	73 e0       	ldi	r23, 0x03	; 3
     5b8:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
  mark(RC6_T1); // start bit
     5bc:	ce 01       	movw	r24, r28
     5be:	6c eb       	ldi	r22, 0xBC	; 188
     5c0:	71 e0       	ldi	r23, 0x01	; 1
     5c2:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
  space(RC6_T1);
     5c6:	ce 01       	movw	r24, r28
     5c8:	6c eb       	ldi	r22, 0xBC	; 188
     5ca:	71 e0       	ldi	r23, 0x01	; 1
     5cc:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
  int t;
  for (int i = 0; i < nbits; i++) {
     5d0:	aa 24       	eor	r10, r10
     5d2:	bb 24       	eor	r11, r11
     5d4:	21 c0       	rjmp	.+66     	; 0x618 <_ZN6IRsend7sendRC6Emi+0xae>
    if (i == 3) {
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	a8 16       	cp	r10, r24
     5da:	b1 04       	cpc	r11, r1
     5dc:	19 f4       	brne	.+6      	; 0x5e4 <_ZN6IRsend7sendRC6Emi+0x7a>
      // double-wide trailer bit
      t = 2 * RC6_T1;
     5de:	08 e7       	ldi	r16, 0x78	; 120
     5e0:	13 e0       	ldi	r17, 0x03	; 3
     5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <_ZN6IRsend7sendRC6Emi+0x7e>
    } 
    else {
      t = RC6_T1;
     5e4:	0c eb       	ldi	r16, 0xBC	; 188
     5e6:	11 e0       	ldi	r17, 0x01	; 1
    }
    if (data & TOPBIT) {
      mark(t);
     5e8:	ce 01       	movw	r24, r28
     5ea:	b8 01       	movw	r22, r16
      t = 2 * RC6_T1;
    } 
    else {
      t = RC6_T1;
    }
    if (data & TOPBIT) {
     5ec:	f7 fe       	sbrs	r15, 7
     5ee:	07 c0       	rjmp	.+14     	; 0x5fe <_ZN6IRsend7sendRC6Emi+0x94>
      mark(t);
     5f0:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
      space(t);
     5f4:	ce 01       	movw	r24, r28
     5f6:	b8 01       	movw	r22, r16
     5f8:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
     5fc:	06 c0       	rjmp	.+12     	; 0x60a <_ZN6IRsend7sendRC6Emi+0xa0>
    } 
    else {
      space(t);
     5fe:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
      mark(t);
     602:	ce 01       	movw	r24, r28
     604:	b8 01       	movw	r22, r16
     606:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
    }

    data <<= 1;
     60a:	cc 0c       	add	r12, r12
     60c:	dd 1c       	adc	r13, r13
     60e:	ee 1c       	adc	r14, r14
     610:	ff 1c       	adc	r15, r15
  mark(RC6_HDR_MARK);
  space(RC6_HDR_SPACE);
  mark(RC6_T1); // start bit
  space(RC6_T1);
  int t;
  for (int i = 0; i < nbits; i++) {
     612:	08 94       	sec
     614:	a1 1c       	adc	r10, r1
     616:	b1 1c       	adc	r11, r1
     618:	a8 14       	cp	r10, r8
     61a:	b9 04       	cpc	r11, r9
     61c:	e4 f2       	brlt	.-72     	; 0x5d6 <_ZN6IRsend7sendRC6Emi+0x6c>
      mark(t);
    }

    data <<= 1;
  }
  space(0); // Turn off at end
     61e:	ce 01       	movw	r24, r28
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
}
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
     638:	bf 90       	pop	r11
     63a:	af 90       	pop	r10
     63c:	9f 90       	pop	r9
     63e:	8f 90       	pop	r8
     640:	08 95       	ret

00000642 <_ZN6IRsend7sendRC5Emi>:
  space(0); // Just to be sure
}

// Note: first bit must be a one (start bit)
void IRsend::sendRC5(unsigned long data, int nbits)
{
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec 01       	movw	r28, r24
     658:	6a 01       	movw	r12, r20
     65a:	7b 01       	movw	r14, r22
     65c:	59 01       	movw	r10, r18
  enableIROut(36);
     65e:	64 e2       	ldi	r22, 0x24	; 36
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN6IRsend11enableIROutEi>
  data = data << (32 - nbits);
     666:	80 e2       	ldi	r24, 0x20	; 32
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	8a 19       	sub	r24, r10
     66c:	9b 09       	sbc	r25, r11
     66e:	04 c0       	rjmp	.+8      	; 0x678 <_ZN6IRsend7sendRC5Emi+0x36>
     670:	cc 0c       	add	r12, r12
     672:	dd 1c       	adc	r13, r13
     674:	ee 1c       	adc	r14, r14
     676:	ff 1c       	adc	r15, r15
     678:	8a 95       	dec	r24
     67a:	d2 f7       	brpl	.-12     	; 0x670 <_ZN6IRsend7sendRC5Emi+0x2e>
  mark(RC5_T1); // First start bit
     67c:	ce 01       	movw	r24, r28
     67e:	69 e7       	ldi	r22, 0x79	; 121
     680:	73 e0       	ldi	r23, 0x03	; 3
     682:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
  space(RC5_T1); // Second start bit
     686:	ce 01       	movw	r24, r28
     688:	69 e7       	ldi	r22, 0x79	; 121
     68a:	73 e0       	ldi	r23, 0x03	; 3
     68c:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
  mark(RC5_T1); // Second start bit
     690:	ce 01       	movw	r24, r28
     692:	69 e7       	ldi	r22, 0x79	; 121
     694:	73 e0       	ldi	r23, 0x03	; 3
     696:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
  for (int i = 0; i < nbits; i++) {
     69a:	00 e0       	ldi	r16, 0x00	; 0
     69c:	10 e0       	ldi	r17, 0x00	; 0
     69e:	19 c0       	rjmp	.+50     	; 0x6d2 <_ZN6IRsend7sendRC5Emi+0x90>
    if (data & TOPBIT) {
      space(RC5_T1); // 1 is space, then mark
     6a0:	69 e7       	ldi	r22, 0x79	; 121
     6a2:	73 e0       	ldi	r23, 0x03	; 3
  data = data << (32 - nbits);
  mark(RC5_T1); // First start bit
  space(RC5_T1); // Second start bit
  mark(RC5_T1); // Second start bit
  for (int i = 0; i < nbits; i++) {
    if (data & TOPBIT) {
     6a4:	f7 fe       	sbrs	r15, 7
     6a6:	08 c0       	rjmp	.+16     	; 0x6b8 <_ZN6IRsend7sendRC5Emi+0x76>
      space(RC5_T1); // 1 is space, then mark
     6a8:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
      mark(RC5_T1);
     6ac:	ce 01       	movw	r24, r28
     6ae:	69 e7       	ldi	r22, 0x79	; 121
     6b0:	73 e0       	ldi	r23, 0x03	; 3
     6b2:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
     6b6:	07 c0       	rjmp	.+14     	; 0x6c6 <_ZN6IRsend7sendRC5Emi+0x84>
    } 
    else {
      mark(RC5_T1);
     6b8:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
      space(RC5_T1);
     6bc:	ce 01       	movw	r24, r28
     6be:	69 e7       	ldi	r22, 0x79	; 121
     6c0:	73 e0       	ldi	r23, 0x03	; 3
     6c2:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
    }
    data <<= 1;
     6c6:	cc 0c       	add	r12, r12
     6c8:	dd 1c       	adc	r13, r13
     6ca:	ee 1c       	adc	r14, r14
     6cc:	ff 1c       	adc	r15, r15
  enableIROut(36);
  data = data << (32 - nbits);
  mark(RC5_T1); // First start bit
  space(RC5_T1); // Second start bit
  mark(RC5_T1); // Second start bit
  for (int i = 0; i < nbits; i++) {
     6ce:	0f 5f       	subi	r16, 0xFF	; 255
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255
    if (data & TOPBIT) {
      space(RC5_T1); // 1 is space, then mark
     6d2:	ce 01       	movw	r24, r28
  enableIROut(36);
  data = data << (32 - nbits);
  mark(RC5_T1); // First start bit
  space(RC5_T1); // Second start bit
  mark(RC5_T1); // Second start bit
  for (int i = 0; i < nbits; i++) {
     6d4:	0a 15       	cp	r16, r10
     6d6:	1b 05       	cpc	r17, r11
     6d8:	1c f3       	brlt	.-58     	; 0x6a0 <_ZN6IRsend7sendRC5Emi+0x5e>
      mark(RC5_T1);
      space(RC5_T1);
    }
    data <<= 1;
  }
  space(0); // Turn off at end
     6da:	60 e0       	ldi	r22, 0x00	; 0
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
}
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	ff 90       	pop	r15
     6ec:	ef 90       	pop	r14
     6ee:	df 90       	pop	r13
     6f0:	cf 90       	pop	r12
     6f2:	bf 90       	pop	r11
     6f4:	af 90       	pop	r10
     6f6:	08 95       	ret

000006f8 <_ZN6IRsend7sendRawEPjii>:
    data <<= 1;
  }
}

void IRsend::sendRaw(unsigned int buf[], int len, int hz)
{
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	7c 01       	movw	r14, r24
     70a:	8b 01       	movw	r16, r22
     70c:	6a 01       	movw	r12, r20
     70e:	b9 01       	movw	r22, r18
  enableIROut(hz);
     710:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN6IRsend11enableIROutEi>
     714:	e8 01       	movw	r28, r16
  for (int i = 0; i < len; i++) {
     716:	00 e0       	ldi	r16, 0x00	; 0
     718:	10 e0       	ldi	r17, 0x00	; 0
     71a:	0d c0       	rjmp	.+26     	; 0x736 <_ZN6IRsend7sendRawEPjii+0x3e>
    if (i & 1) {
      space(buf[i]);
     71c:	68 81       	ld	r22, Y
     71e:	79 81       	ldd	r23, Y+1	; 0x01
     720:	c7 01       	movw	r24, r14

void IRsend::sendRaw(unsigned int buf[], int len, int hz)
{
  enableIROut(hz);
  for (int i = 0; i < len; i++) {
    if (i & 1) {
     722:	00 ff       	sbrs	r16, 0
     724:	03 c0       	rjmp	.+6      	; 0x72c <_ZN6IRsend7sendRawEPjii+0x34>
      space(buf[i]);
     726:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
     72a:	02 c0       	rjmp	.+4      	; 0x730 <_ZN6IRsend7sendRawEPjii+0x38>
    } 
    else {
      mark(buf[i]);
     72c:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
}

void IRsend::sendRaw(unsigned int buf[], int len, int hz)
{
  enableIROut(hz);
  for (int i = 0; i < len; i++) {
     730:	0f 5f       	subi	r16, 0xFF	; 255
     732:	1f 4f       	sbci	r17, 0xFF	; 255
     734:	22 96       	adiw	r28, 0x02	; 2
     736:	0c 15       	cp	r16, r12
     738:	1d 05       	cpc	r17, r13
     73a:	84 f3       	brlt	.-32     	; 0x71c <_ZN6IRsend7sendRawEPjii+0x24>
    } 
    else {
      mark(buf[i]);
    }
  }
  space(0); // Just to be sure
     73c:	c7 01       	movw	r24, r14
     73e:	60 e0       	ldi	r22, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
}
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	df 90       	pop	r13
     754:	cf 90       	pop	r12
     756:	08 95       	ret

00000758 <_ZN6IRsend8sendSonyEmi>:
  }
  mark(NEC_BIT_MARK);
  space(0);
}

void IRsend::sendSony(unsigned long data, int nbits) {
     758:	af 92       	push	r10
     75a:	bf 92       	push	r11
     75c:	cf 92       	push	r12
     75e:	df 92       	push	r13
     760:	ef 92       	push	r14
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ec 01       	movw	r28, r24
     76e:	6a 01       	movw	r12, r20
     770:	7b 01       	movw	r14, r22
     772:	59 01       	movw	r10, r18
  enableIROut(40);
     774:	68 e2       	ldi	r22, 0x28	; 40
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN6IRsend11enableIROutEi>
  mark(SONY_HDR_MARK);
     77c:	ce 01       	movw	r24, r28
     77e:	60 e6       	ldi	r22, 0x60	; 96
     780:	79 e0       	ldi	r23, 0x09	; 9
     782:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
  space(SONY_HDR_SPACE);
     786:	ce 01       	movw	r24, r28
     788:	68 e5       	ldi	r22, 0x58	; 88
     78a:	72 e0       	ldi	r23, 0x02	; 2
     78c:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
  data = data << (32 - nbits);
     790:	80 e2       	ldi	r24, 0x20	; 32
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	8a 19       	sub	r24, r10
     796:	9b 09       	sbc	r25, r11
     798:	04 c0       	rjmp	.+8      	; 0x7a2 <_ZN6IRsend8sendSonyEmi+0x4a>
     79a:	cc 0c       	add	r12, r12
     79c:	dd 1c       	adc	r13, r13
     79e:	ee 1c       	adc	r14, r14
     7a0:	ff 1c       	adc	r15, r15
     7a2:	8a 95       	dec	r24
     7a4:	d2 f7       	brpl	.-12     	; 0x79a <_ZN6IRsend8sendSonyEmi+0x42>
  for (int i = 0; i < nbits; i++) {
     7a6:	00 e0       	ldi	r16, 0x00	; 0
     7a8:	10 e0       	ldi	r17, 0x00	; 0
     7aa:	15 c0       	rjmp	.+42     	; 0x7d6 <_ZN6IRsend8sendSonyEmi+0x7e>
    if (data & TOPBIT) {
      mark(SONY_ONE_MARK);
     7ac:	ce 01       	movw	r24, r28
  enableIROut(40);
  mark(SONY_HDR_MARK);
  space(SONY_HDR_SPACE);
  data = data << (32 - nbits);
  for (int i = 0; i < nbits; i++) {
    if (data & TOPBIT) {
     7ae:	f7 fe       	sbrs	r15, 7
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <_ZN6IRsend8sendSonyEmi+0x60>
      mark(SONY_ONE_MARK);
     7b2:	60 eb       	ldi	r22, 0xB0	; 176
     7b4:	74 e0       	ldi	r23, 0x04	; 4
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <_ZN6IRsend8sendSonyEmi+0x64>
      space(SONY_HDR_SPACE);
    } 
    else {
      mark(SONY_ZERO_MARK);
     7b8:	68 e5       	ldi	r22, 0x58	; 88
     7ba:	72 e0       	ldi	r23, 0x02	; 2
     7bc:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
      space(SONY_HDR_SPACE);
     7c0:	ce 01       	movw	r24, r28
     7c2:	68 e5       	ldi	r22, 0x58	; 88
     7c4:	72 e0       	ldi	r23, 0x02	; 2
     7c6:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
    }
    data <<= 1;
     7ca:	cc 0c       	add	r12, r12
     7cc:	dd 1c       	adc	r13, r13
     7ce:	ee 1c       	adc	r14, r14
     7d0:	ff 1c       	adc	r15, r15
void IRsend::sendSony(unsigned long data, int nbits) {
  enableIROut(40);
  mark(SONY_HDR_MARK);
  space(SONY_HDR_SPACE);
  data = data << (32 - nbits);
  for (int i = 0; i < nbits; i++) {
     7d2:	0f 5f       	subi	r16, 0xFF	; 255
     7d4:	1f 4f       	sbci	r17, 0xFF	; 255
     7d6:	0a 15       	cp	r16, r10
     7d8:	1b 05       	cpc	r17, r11
     7da:	44 f3       	brlt	.-48     	; 0x7ac <_ZN6IRsend8sendSonyEmi+0x54>
      mark(SONY_ZERO_MARK);
      space(SONY_HDR_SPACE);
    }
    data <<= 1;
  }
}
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	df 90       	pop	r13
     7ea:	cf 90       	pop	r12
     7ec:	bf 90       	pop	r11
     7ee:	af 90       	pop	r10
     7f0:	08 95       	ret

000007f2 <_ZN6IRsend7sendNECEmi>:
  return measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS) && measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS);
}
#endif

void IRsend::sendNEC(unsigned long data, int nbits)
{
     7f2:	af 92       	push	r10
     7f4:	bf 92       	push	r11
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ef 92       	push	r14
     7fc:	ff 92       	push	r15
     7fe:	0f 93       	push	r16
     800:	1f 93       	push	r17
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ec 01       	movw	r28, r24
     808:	6a 01       	movw	r12, r20
     80a:	7b 01       	movw	r14, r22
     80c:	59 01       	movw	r10, r18
  enableIROut(38);
     80e:	66 e2       	ldi	r22, 0x26	; 38
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	0e 94 2d 02 	call	0x45a	; 0x45a <_ZN6IRsend11enableIROutEi>
  mark(NEC_HDR_MARK);
     816:	ce 01       	movw	r24, r28
     818:	68 e2       	ldi	r22, 0x28	; 40
     81a:	73 e2       	ldi	r23, 0x23	; 35
     81c:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
  space(NEC_HDR_SPACE);
     820:	ce 01       	movw	r24, r28
     822:	64 e9       	ldi	r22, 0x94	; 148
     824:	71 e1       	ldi	r23, 0x11	; 17
     826:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
  for (int i = 0; i < nbits; i++) {
     82a:	00 e0       	ldi	r16, 0x00	; 0
     82c:	10 e0       	ldi	r17, 0x00	; 0
     82e:	15 c0       	rjmp	.+42     	; 0x85a <_ZN6IRsend7sendNECEmi+0x68>
    if (data & TOPBIT) {
     830:	f7 fe       	sbrs	r15, 7
     832:	06 c0       	rjmp	.+12     	; 0x840 <_ZN6IRsend7sendNECEmi+0x4e>
      mark(NEC_BIT_MARK);
     834:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
      space(NEC_ONE_SPACE);
     838:	ce 01       	movw	r24, r28
     83a:	60 e4       	ldi	r22, 0x40	; 64
     83c:	76 e0       	ldi	r23, 0x06	; 6
     83e:	05 c0       	rjmp	.+10     	; 0x84a <_ZN6IRsend7sendNECEmi+0x58>
    } 
    else {
      mark(NEC_BIT_MARK);
     840:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
      space(NEC_ZERO_SPACE);
     844:	ce 01       	movw	r24, r28
     846:	60 e3       	ldi	r22, 0x30	; 48
     848:	72 e0       	ldi	r23, 0x02	; 2
     84a:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
    }
    data <<= 1;
     84e:	cc 0c       	add	r12, r12
     850:	dd 1c       	adc	r13, r13
     852:	ee 1c       	adc	r14, r14
     854:	ff 1c       	adc	r15, r15
void IRsend::sendNEC(unsigned long data, int nbits)
{
  enableIROut(38);
  mark(NEC_HDR_MARK);
  space(NEC_HDR_SPACE);
  for (int i = 0; i < nbits; i++) {
     856:	0f 5f       	subi	r16, 0xFF	; 255
     858:	1f 4f       	sbci	r17, 0xFF	; 255
    if (data & TOPBIT) {
      mark(NEC_BIT_MARK);
     85a:	ce 01       	movw	r24, r28
     85c:	60 e3       	ldi	r22, 0x30	; 48
     85e:	72 e0       	ldi	r23, 0x02	; 2
void IRsend::sendNEC(unsigned long data, int nbits)
{
  enableIROut(38);
  mark(NEC_HDR_MARK);
  space(NEC_HDR_SPACE);
  for (int i = 0; i < nbits; i++) {
     860:	0a 15       	cp	r16, r10
     862:	1b 05       	cpc	r17, r11
     864:	2c f3       	brlt	.-54     	; 0x830 <_ZN6IRsend7sendNECEmi+0x3e>
      mark(NEC_BIT_MARK);
      space(NEC_ZERO_SPACE);
    }
    data <<= 1;
  }
  mark(NEC_BIT_MARK);
     866:	0e 94 1b 02 	call	0x436	; 0x436 <_ZN6IRsend4markEi>
  space(0);
     86a:	ce 01       	movw	r24, r28
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	0e 94 24 02 	call	0x448	; 0x448 <_ZN6IRsend5spaceEi>
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	0f 91       	pop	r16
     87c:	ff 90       	pop	r15
     87e:	ef 90       	pop	r14
     880:	df 90       	pop	r13
     882:	cf 90       	pop	r12
     884:	bf 90       	pop	r11
     886:	af 90       	pop	r10
     888:	08 95       	ret

0000088a <_ZN6IRrecvC1Ei>:
  TIMER_CONFIG_KHZ(khz);
}

IRrecv::IRrecv(int recvpin)
{
  irparams.recvpin = recvpin;
     88a:	60 93 e2 03 	sts	0x03E2, r22
  irparams.blinkflag = 0;
     88e:	10 92 e4 03 	sts	0x03E4, r1
}
     892:	08 95       	ret

00000894 <_ZN6IRrecv10enableIRInEv>:


// initialization
void IRrecv::enableIRIn() {
  cli();
     894:	f8 94       	cli
  // setup pulse clock timer interrupt
  //Prescale /8 (16M/8 = 0.5 microseconds per tick)
  // Therefore, the timer interval can range from 0.5 to 128 microseconds
  // depending on the reset value (255 to 0)
  TIMER_CONFIG_NORMAL();
     896:	82 e0       	ldi	r24, 0x02	; 2
     898:	80 93 b0 00 	sts	0x00B0, r24
     89c:	80 93 b1 00 	sts	0x00B1, r24
     8a0:	94 e6       	ldi	r25, 0x64	; 100
     8a2:	90 93 b3 00 	sts	0x00B3, r25
     8a6:	10 92 b2 00 	sts	0x00B2, r1

  //Timer2 Overflow Interrupt Enable
  TIMER_ENABLE_INTR;
     8aa:	80 93 70 00 	sts	0x0070, r24

  TIMER_RESET;

  sei();  // enable interrupts
     8ae:	78 94       	sei

  // initialize state machine variables
  irparams.rcvstate = STATE_IDLE;
     8b0:	80 93 e3 03 	sts	0x03E3, r24
  irparams.rawlen = 0;
     8b4:	10 92 ef 04 	sts	0x04EF, r1

  // set pin modes
  pinMode(irparams.recvpin, INPUT);
     8b8:	80 91 e2 03 	lds	r24, 0x03E2
     8bc:	60 e0       	ldi	r22, 0x00	; 0
     8be:	0e 94 65 22 	call	0x44ca	; 0x44ca <pinMode>
}
     8c2:	08 95       	ret

000008c4 <__vector_7>:
// rawlen counts the number of entries recorded so far.
// First entry is the SPACE between transmissions.
// As soon as a SPACE gets long, ready is set, state switches to IDLE, timing of SPACE continues.
// As soon as first MARK arrives, gap width is recorded, ready is cleared, and new logging starts
ISR(TIMER_INTR_NAME)
{
     8c4:	1f 92       	push	r1
     8c6:	0f 92       	push	r0
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	0f 92       	push	r0
     8cc:	11 24       	eor	r1, r1
     8ce:	2f 93       	push	r18
     8d0:	3f 93       	push	r19
     8d2:	4f 93       	push	r20
     8d4:	5f 93       	push	r21
     8d6:	6f 93       	push	r22
     8d8:	7f 93       	push	r23
     8da:	8f 93       	push	r24
     8dc:	9f 93       	push	r25
     8de:	af 93       	push	r26
     8e0:	bf 93       	push	r27
     8e2:	ef 93       	push	r30
     8e4:	ff 93       	push	r31
  TIMER_RESET;

  uint8_t irdata = (uint8_t)digitalRead(irparams.recvpin);
     8e6:	80 91 e2 03 	lds	r24, 0x03E2
     8ea:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <digitalRead>

  irparams.timer++; // One more 50us tick
     8ee:	20 91 e5 03 	lds	r18, 0x03E5
     8f2:	30 91 e6 03 	lds	r19, 0x03E6
     8f6:	2f 5f       	subi	r18, 0xFF	; 255
     8f8:	3f 4f       	sbci	r19, 0xFF	; 255
     8fa:	30 93 e6 03 	sts	0x03E6, r19
     8fe:	20 93 e5 03 	sts	0x03E5, r18
  if (irparams.rawlen >= RAWBUF) {
     902:	90 91 ef 04 	lds	r25, 0x04EF
     906:	94 38       	cpi	r25, 0x84	; 132
     908:	18 f0       	brcs	.+6      	; 0x910 <__stack+0x11>
    // Buffer overflow
    irparams.rcvstate = STATE_STOP;
     90a:	95 e0       	ldi	r25, 0x05	; 5
     90c:	90 93 e3 03 	sts	0x03E3, r25
  }
  switch(irparams.rcvstate) {
     910:	90 91 e3 03 	lds	r25, 0x03E3
     914:	93 30       	cpi	r25, 0x03	; 3
     916:	d1 f0       	breq	.+52     	; 0x94c <__stack+0x4d>
     918:	94 30       	cpi	r25, 0x04	; 4
     91a:	20 f4       	brcc	.+8      	; 0x924 <__stack+0x25>
     91c:	92 30       	cpi	r25, 0x02	; 2
     91e:	09 f0       	breq	.+2      	; 0x922 <__stack+0x23>
     920:	59 c0       	rjmp	.+178    	; 0x9d4 <__stack+0xd5>
     922:	06 c0       	rjmp	.+12     	; 0x930 <__stack+0x31>
     924:	94 30       	cpi	r25, 0x04	; 4
     926:	61 f1       	breq	.+88     	; 0x980 <__stack+0x81>
     928:	95 30       	cpi	r25, 0x05	; 5
     92a:	09 f0       	breq	.+2      	; 0x92e <__stack+0x2f>
     92c:	53 c0       	rjmp	.+166    	; 0x9d4 <__stack+0xd5>
     92e:	4c c0       	rjmp	.+152    	; 0x9c8 <__stack+0xc9>
  case STATE_IDLE: // In the middle of a gap
    if (irdata == MARK) {
     930:	88 23       	and	r24, r24
     932:	09 f0       	breq	.+2      	; 0x936 <__stack+0x37>
     934:	4f c0       	rjmp	.+158    	; 0x9d4 <__stack+0xd5>
      if (irparams.timer < GAP_TICKS) {
     936:	20 91 e5 03 	lds	r18, 0x03E5
     93a:	30 91 e6 03 	lds	r19, 0x03E6
     93e:	24 36       	cpi	r18, 0x64	; 100
     940:	31 05       	cpc	r19, r1
     942:	08 f4       	brcc	.+2      	; 0x946 <__stack+0x47>
     944:	43 c0       	rjmp	.+134    	; 0x9cc <__stack+0xcd>
        // Not big enough to be a gap.
        irparams.timer = 0;
      } 
      else {
        // gap just ended, record duration and start recording transmission
        irparams.rawlen = 0;
     946:	10 92 ef 04 	sts	0x04EF, r1
     94a:	1c c0       	rjmp	.+56     	; 0x984 <__stack+0x85>
        irparams.rcvstate = STATE_MARK;
      }
    }
    break;
  case STATE_MARK: // timing MARK
    if (irdata == SPACE) {   // MARK ended, record time
     94c:	81 30       	cpi	r24, 0x01	; 1
     94e:	09 f0       	breq	.+2      	; 0x952 <__stack+0x53>
     950:	41 c0       	rjmp	.+130    	; 0x9d4 <__stack+0xd5>
      irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     952:	90 91 ef 04 	lds	r25, 0x04EF
     956:	e9 2f       	mov	r30, r25
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	20 91 e5 03 	lds	r18, 0x03E5
     95e:	30 91 e6 03 	lds	r19, 0x03E6
     962:	ee 0f       	add	r30, r30
     964:	ff 1f       	adc	r31, r31
     966:	ee 51       	subi	r30, 0x1E	; 30
     968:	fc 4f       	sbci	r31, 0xFC	; 252
     96a:	36 83       	std	Z+6, r19	; 0x06
     96c:	25 83       	std	Z+5, r18	; 0x05
     96e:	9f 5f       	subi	r25, 0xFF	; 255
     970:	90 93 ef 04 	sts	0x04EF, r25
      irparams.timer = 0;
     974:	10 92 e6 03 	sts	0x03E6, r1
     978:	10 92 e5 03 	sts	0x03E5, r1
      irparams.rcvstate = STATE_SPACE;
     97c:	94 e0       	ldi	r25, 0x04	; 4
     97e:	21 c0       	rjmp	.+66     	; 0x9c2 <__stack+0xc3>
    }
    break;
  case STATE_SPACE: // timing SPACE
    if (irdata == MARK) { // SPACE just ended, record it
     980:	88 23       	and	r24, r24
     982:	b9 f4       	brne	.+46     	; 0x9b2 <__stack+0xb3>
      irparams.rawbuf[irparams.rawlen++] = irparams.timer;
     984:	90 91 ef 04 	lds	r25, 0x04EF
     988:	e9 2f       	mov	r30, r25
     98a:	f0 e0       	ldi	r31, 0x00	; 0
     98c:	20 91 e5 03 	lds	r18, 0x03E5
     990:	30 91 e6 03 	lds	r19, 0x03E6
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	ee 51       	subi	r30, 0x1E	; 30
     99a:	fc 4f       	sbci	r31, 0xFC	; 252
     99c:	36 83       	std	Z+6, r19	; 0x06
     99e:	25 83       	std	Z+5, r18	; 0x05
     9a0:	9f 5f       	subi	r25, 0xFF	; 255
     9a2:	90 93 ef 04 	sts	0x04EF, r25
      irparams.timer = 0;
     9a6:	10 92 e6 03 	sts	0x03E6, r1
     9aa:	10 92 e5 03 	sts	0x03E5, r1
      irparams.rcvstate = STATE_MARK;
     9ae:	93 e0       	ldi	r25, 0x03	; 3
     9b0:	08 c0       	rjmp	.+16     	; 0x9c2 <__stack+0xc3>
    } 
    else { // SPACE
      if (irparams.timer > GAP_TICKS) {
     9b2:	20 91 e5 03 	lds	r18, 0x03E5
     9b6:	30 91 e6 03 	lds	r19, 0x03E6
     9ba:	25 36       	cpi	r18, 0x65	; 101
     9bc:	31 05       	cpc	r19, r1
     9be:	50 f0       	brcs	.+20     	; 0x9d4 <__stack+0xd5>
        // big SPACE, indicates gap between codes
        // Mark current code as ready for processing
        // Switch to STOP
        // Don't reset timer; keep counting space width
        irparams.rcvstate = STATE_STOP;
     9c0:	95 e0       	ldi	r25, 0x05	; 5
     9c2:	90 93 e3 03 	sts	0x03E3, r25
     9c6:	06 c0       	rjmp	.+12     	; 0x9d4 <__stack+0xd5>
      } 
    }
    break;
  case STATE_STOP: // waiting, measuring gap
    if (irdata == MARK) { // reset gap timer
     9c8:	88 23       	and	r24, r24
     9ca:	21 f4       	brne	.+8      	; 0x9d4 <__stack+0xd5>
      irparams.timer = 0;
     9cc:	10 92 e6 03 	sts	0x03E6, r1
     9d0:	10 92 e5 03 	sts	0x03E5, r1
    }
    break;
  }

  if (irparams.blinkflag) {
     9d4:	90 91 e4 03 	lds	r25, 0x03E4
     9d8:	99 23       	and	r25, r25
     9da:	29 f0       	breq	.+10     	; 0x9e6 <__stack+0xe7>
    if (irdata == MARK) {
     9dc:	88 23       	and	r24, r24
     9de:	11 f4       	brne	.+4      	; 0x9e4 <__stack+0xe5>
      BLINKLED_ON();  // turn pin 13 LED on
     9e0:	2d 9a       	sbi	0x05, 5	; 5
     9e2:	01 c0       	rjmp	.+2      	; 0x9e6 <__stack+0xe7>
    } 
    else {
      BLINKLED_OFF();  // turn pin 13 LED off
     9e4:	2d 98       	cbi	0x05, 5	; 5
    }
  }
}
     9e6:	ff 91       	pop	r31
     9e8:	ef 91       	pop	r30
     9ea:	bf 91       	pop	r27
     9ec:	af 91       	pop	r26
     9ee:	9f 91       	pop	r25
     9f0:	8f 91       	pop	r24
     9f2:	7f 91       	pop	r23
     9f4:	6f 91       	pop	r22
     9f6:	5f 91       	pop	r21
     9f8:	4f 91       	pop	r20
     9fa:	3f 91       	pop	r19
     9fc:	2f 91       	pop	r18
     9fe:	0f 90       	pop	r0
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	0f 90       	pop	r0
     a04:	1f 90       	pop	r1
     a06:	18 95       	reti

00000a08 <_ZN6IRrecv4stopEv>:
  irparams.rcvstate = STATE_IDLE;
  irparams.rawlen = 0;
}

void IRrecv::stop() {
	TIMER_DISABLE_INTR; //Timer2 Overflow Interrupt
     a08:	10 92 70 00 	sts	0x0070, r1
	pinMode(TIMER_PWM_PIN, OUTPUT);
     a0c:	83 e0       	ldi	r24, 0x03	; 3
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	0e 94 65 22 	call	0x44ca	; 0x44ca <pinMode>
	digitalWrite(TIMER_PWM_PIN, LOW);
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	0e 94 a4 22 	call	0x4548	; 0x4548 <digitalWrite>
}
     a1c:	08 95       	ret

00000a1e <_ZN6IRrecv9decodeNECEP14decode_results>:
  resume();
  return ERR;
}

// NECs have a repeat only 4 items long
long IRrecv::decodeNEC(decode_results *results) {
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	8b 01       	movw	r16, r22
  long data = 0;
  int offset = 1; // Skip first space
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK)) {
     a34:	db 01       	movw	r26, r22
     a36:	1a 96       	adiw	r26, 0x0a	; 10
     a38:	cd 91       	ld	r28, X+
     a3a:	dc 91       	ld	r29, X
     a3c:	1b 97       	sbiw	r26, 0x0b	; 11
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	9b 81       	ldd	r25, Y+3	; 0x03
     a42:	68 e2       	ldi	r22, 0x28	; 40
     a44:	73 e2       	ldi	r23, 0x23	; 35
     a46:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
     a4a:	00 97       	sbiw	r24, 0x00	; 0
     a4c:	09 f4       	brne	.+2      	; 0xa50 <_ZN6IRrecv9decodeNECEP14decode_results+0x32>
     a4e:	7a c0       	rjmp	.+244    	; 0xb44 <_ZN6IRrecv9decodeNECEP14decode_results+0x126>
    return ERR;
  }
  offset++;
  // Check for repeat
  if (irparams.rawlen == 4 &&
     a50:	80 91 ef 04 	lds	r24, 0x04EF
     a54:	84 30       	cpi	r24, 0x04	; 4
     a56:	09 f0       	breq	.+2      	; 0xa5a <_ZN6IRrecv9decodeNECEP14decode_results+0x3c>
     a58:	85 c0       	rjmp	.+266    	; 0xb64 <_ZN6IRrecv9decodeNECEP14decode_results+0x146>
    MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE) &&
     a5a:	8c 81       	ldd	r24, Y+4	; 0x04
     a5c:	9d 81       	ldd	r25, Y+5	; 0x05
     a5e:	6a ec       	ldi	r22, 0xCA	; 202
     a60:	78 e0       	ldi	r23, 0x08	; 8
     a62:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
  if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK)) {
    return ERR;
  }
  offset++;
  // Check for repeat
  if (irparams.rawlen == 4 &&
     a66:	00 97       	sbiw	r24, 0x00	; 0
     a68:	09 f4       	brne	.+2      	; 0xa6c <_ZN6IRrecv9decodeNECEP14decode_results+0x4e>
     a6a:	7c c0       	rjmp	.+248    	; 0xb64 <_ZN6IRrecv9decodeNECEP14decode_results+0x146>
    MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE) &&
    MATCH_MARK(results->rawbuf[offset+1], NEC_BIT_MARK)) {
     a6c:	8e 81       	ldd	r24, Y+6	; 0x06
     a6e:	9f 81       	ldd	r25, Y+7	; 0x07
     a70:	60 e3       	ldi	r22, 0x30	; 48
     a72:	72 e0       	ldi	r23, 0x02	; 2
     a74:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
  if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK)) {
    return ERR;
  }
  offset++;
  // Check for repeat
  if (irparams.rawlen == 4 &&
     a78:	00 97       	sbiw	r24, 0x00	; 0
     a7a:	09 f4       	brne	.+2      	; 0xa7e <_ZN6IRrecv9decodeNECEP14decode_results+0x60>
     a7c:	73 c0       	rjmp	.+230    	; 0xb64 <_ZN6IRrecv9decodeNECEP14decode_results+0x146>
    MATCH_SPACE(results->rawbuf[offset], NEC_RPT_SPACE) &&
    MATCH_MARK(results->rawbuf[offset+1], NEC_BIT_MARK)) {
    results->bits = 0;
     a7e:	f8 01       	movw	r30, r16
     a80:	11 86       	std	Z+9, r1	; 0x09
     a82:	10 86       	std	Z+8, r1	; 0x08
    results->value = REPEAT;
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	9f ef       	ldi	r25, 0xFF	; 255
     a88:	dc 01       	movw	r26, r24
     a8a:	84 83       	std	Z+4, r24	; 0x04
     a8c:	95 83       	std	Z+5, r25	; 0x05
     a8e:	a6 83       	std	Z+6, r26	; 0x06
     a90:	b7 83       	std	Z+7, r27	; 0x07
    results->decode_type = NEC;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	91 83       	std	Z+1, r25	; 0x01
     a98:	80 83       	st	Z, r24
     a9a:	4f c0       	rjmp	.+158    	; 0xb3a <_ZN6IRrecv9decodeNECEP14decode_results+0x11c>
  }
  if (irparams.rawlen < 2 * NEC_BITS + 4) {
    return ERR;
  }
  // Initial space  
  if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE)) {
     a9c:	8c 81       	ldd	r24, Y+4	; 0x04
     a9e:	9d 81       	ldd	r25, Y+5	; 0x05
     aa0:	64 e9       	ldi	r22, 0x94	; 148
     aa2:	71 e1       	ldi	r23, 0x11	; 17
     aa4:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
     aa8:	00 97       	sbiw	r24, 0x00	; 0
     aaa:	09 f4       	brne	.+2      	; 0xaae <_ZN6IRrecv9decodeNECEP14decode_results+0x90>
     aac:	4b c0       	rjmp	.+150    	; 0xb44 <_ZN6IRrecv9decodeNECEP14decode_results+0x126>
  resume();
  return ERR;
}

// NECs have a repeat only 4 items long
long IRrecv::decodeNEC(decode_results *results) {
     aae:	26 96       	adiw	r28, 0x06	; 6
     ab0:	23 e0       	ldi	r18, 0x03	; 3
     ab2:	a2 2e       	mov	r10, r18
     ab4:	b1 2c       	mov	r11, r1
     ab6:	cc 24       	eor	r12, r12
     ab8:	dd 24       	eor	r13, r13
     aba:	76 01       	movw	r14, r12
  if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE)) {
    return ERR;
  }
  offset++;
  for (int i = 0; i < NEC_BITS; i++) {
    if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK)) {
     abc:	88 81       	ld	r24, Y
     abe:	99 81       	ldd	r25, Y+1	; 0x01
     ac0:	60 e3       	ldi	r22, 0x30	; 48
     ac2:	72 e0       	ldi	r23, 0x02	; 2
     ac4:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	e1 f1       	breq	.+120    	; 0xb44 <_ZN6IRrecv9decodeNECEP14decode_results+0x126>
      return ERR;
    }
    offset++;
    if (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE)) {
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	9b 81       	ldd	r25, Y+3	; 0x03
     ad0:	60 e4       	ldi	r22, 0x40	; 64
     ad2:	76 e0       	ldi	r23, 0x06	; 6
     ad4:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
     ad8:	00 97       	sbiw	r24, 0x00	; 0
     ada:	69 f0       	breq	.+26     	; 0xaf6 <_ZN6IRrecv9decodeNECEP14decode_results+0xd8>
      data = (data << 1) | 1;
     adc:	cc 0c       	add	r12, r12
     ade:	dd 1c       	adc	r13, r13
     ae0:	ee 1c       	adc	r14, r14
     ae2:	ff 1c       	adc	r15, r15
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	a0 e0       	ldi	r26, 0x00	; 0
     aea:	b0 e0       	ldi	r27, 0x00	; 0
     aec:	c8 2a       	or	r12, r24
     aee:	d9 2a       	or	r13, r25
     af0:	ea 2a       	or	r14, r26
     af2:	fb 2a       	or	r15, r27
     af4:	0c c0       	rjmp	.+24     	; 0xb0e <_ZN6IRrecv9decodeNECEP14decode_results+0xf0>
    } 
    else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE)) {
     af6:	8a 81       	ldd	r24, Y+2	; 0x02
     af8:	9b 81       	ldd	r25, Y+3	; 0x03
     afa:	60 e3       	ldi	r22, 0x30	; 48
     afc:	72 e0       	ldi	r23, 0x02	; 2
     afe:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
     b02:	00 97       	sbiw	r24, 0x00	; 0
     b04:	f9 f0       	breq	.+62     	; 0xb44 <_ZN6IRrecv9decodeNECEP14decode_results+0x126>
      data <<= 1;
     b06:	cc 0c       	add	r12, r12
     b08:	dd 1c       	adc	r13, r13
     b0a:	ee 1c       	adc	r14, r14
     b0c:	ff 1c       	adc	r15, r15
    } 
    else {
      return ERR;
    }
    offset++;
     b0e:	a2 e0       	ldi	r26, 0x02	; 2
     b10:	b0 e0       	ldi	r27, 0x00	; 0
     b12:	aa 0e       	add	r10, r26
     b14:	bb 1e       	adc	r11, r27
     b16:	24 96       	adiw	r28, 0x04	; 4
  // Initial space  
  if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE)) {
    return ERR;
  }
  offset++;
  for (int i = 0; i < NEC_BITS; i++) {
     b18:	b3 e4       	ldi	r27, 0x43	; 67
     b1a:	ab 16       	cp	r10, r27
     b1c:	b1 04       	cpc	r11, r1
     b1e:	71 f6       	brne	.-100    	; 0xabc <_ZN6IRrecv9decodeNECEP14decode_results+0x9e>
      return ERR;
    }
    offset++;
  }
  // Success
  results->bits = NEC_BITS;
     b20:	80 e2       	ldi	r24, 0x20	; 32
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	f8 01       	movw	r30, r16
     b26:	91 87       	std	Z+9, r25	; 0x09
     b28:	80 87       	std	Z+8, r24	; 0x08
  results->value = data;
     b2a:	c4 82       	std	Z+4, r12	; 0x04
     b2c:	d5 82       	std	Z+5, r13	; 0x05
     b2e:	e6 82       	std	Z+6, r14	; 0x06
     b30:	f7 82       	std	Z+7, r15	; 0x07
  results->decode_type = NEC;
     b32:	81 e0       	ldi	r24, 0x01	; 1
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	91 83       	std	Z+1, r25	; 0x01
     b38:	80 83       	st	Z, r24
  return DECODED;
     b3a:	01 e0       	ldi	r16, 0x01	; 1
     b3c:	10 e0       	ldi	r17, 0x00	; 0
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	03 c0       	rjmp	.+6      	; 0xb4a <_ZN6IRrecv9decodeNECEP14decode_results+0x12c>
    results->value = REPEAT;
    results->decode_type = NEC;
    return DECODED;
  }
  if (irparams.rawlen < 2 * NEC_BITS + 4) {
    return ERR;
     b44:	00 e0       	ldi	r16, 0x00	; 0
     b46:	10 e0       	ldi	r17, 0x00	; 0
     b48:	98 01       	movw	r18, r16
  // Success
  results->bits = NEC_BITS;
  results->value = data;
  results->decode_type = NEC;
  return DECODED;
}
     b4a:	b8 01       	movw	r22, r16
     b4c:	c9 01       	movw	r24, r18
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	bf 90       	pop	r11
     b60:	af 90       	pop	r10
     b62:	08 95       	ret
    results->bits = 0;
    results->value = REPEAT;
    results->decode_type = NEC;
    return DECODED;
  }
  if (irparams.rawlen < 2 * NEC_BITS + 4) {
     b64:	80 91 ef 04 	lds	r24, 0x04EF
     b68:	84 34       	cpi	r24, 0x44	; 68
     b6a:	08 f0       	brcs	.+2      	; 0xb6e <_ZN6IRrecv9decodeNECEP14decode_results+0x150>
     b6c:	97 cf       	rjmp	.-210    	; 0xa9c <_ZN6IRrecv9decodeNECEP14decode_results+0x7e>
     b6e:	ea cf       	rjmp	.-44     	; 0xb44 <_ZN6IRrecv9decodeNECEP14decode_results+0x126>

00000b70 <_ZN6IRrecv10decodeSonyEP14decode_results>:
  results->value = data;
  results->decode_type = NEC;
  return DECODED;
}

long IRrecv::decodeSony(decode_results *results) {
     b70:	af 92       	push	r10
     b72:	bf 92       	push	r11
     b74:	cf 92       	push	r12
     b76:	df 92       	push	r13
     b78:	ef 92       	push	r14
     b7a:	ff 92       	push	r15
     b7c:	0f 93       	push	r16
     b7e:	1f 93       	push	r17
     b80:	cf 93       	push	r28
     b82:	df 93       	push	r29
     b84:	8b 01       	movw	r16, r22
  long data = 0;
  if (irparams.rawlen < 2 * SONY_BITS + 2) {
     b86:	80 91 ef 04 	lds	r24, 0x04EF
     b8a:	8a 31       	cpi	r24, 0x1A	; 26
     b8c:	08 f4       	brcc	.+2      	; 0xb90 <_ZN6IRrecv10decodeSonyEP14decode_results+0x20>
     b8e:	7e c0       	rjmp	.+252    	; 0xc8c <_ZN6IRrecv10decodeSonyEP14decode_results+0x11c>
  }
  int offset = 0; // Dont skip first space, check its size

  // Some Sony's deliver repeats fast after first
  // unfortunately can't spot difference from of repeat from two fast clicks
  if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
     b90:	db 01       	movw	r26, r22
     b92:	1a 96       	adiw	r26, 0x0a	; 10
     b94:	cd 91       	ld	r28, X+
     b96:	dc 91       	ld	r29, X
     b98:	1b 97       	sbiw	r26, 0x0b	; 11
     b9a:	88 81       	ld	r24, Y
     b9c:	99 81       	ldd	r25, Y+1	; 0x01
     b9e:	b1 e0       	ldi	r27, 0x01	; 1
     ba0:	84 3f       	cpi	r24, 0xF4	; 244
     ba2:	9b 07       	cpc	r25, r27
     ba4:	78 f4       	brcc	.+30     	; 0xbc4 <_ZN6IRrecv10decodeSonyEP14decode_results+0x54>
    // Serial.print("IR Gap found: ");
    results->bits = 0;
     ba6:	fb 01       	movw	r30, r22
     ba8:	11 86       	std	Z+9, r1	; 0x09
     baa:	10 86       	std	Z+8, r1	; 0x08
    results->value = REPEAT;
     bac:	8f ef       	ldi	r24, 0xFF	; 255
     bae:	9f ef       	ldi	r25, 0xFF	; 255
     bb0:	dc 01       	movw	r26, r24
     bb2:	84 83       	std	Z+4, r24	; 0x04
     bb4:	95 83       	std	Z+5, r25	; 0x05
     bb6:	a6 83       	std	Z+6, r26	; 0x06
     bb8:	b7 83       	std	Z+7, r27	; 0x07
    results->decode_type = SANYO;
     bba:	89 e0       	ldi	r24, 0x09	; 9
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	91 83       	std	Z+1, r25	; 0x01
     bc0:	80 83       	st	Z, r24
     bc2:	5f c0       	rjmp	.+190    	; 0xc82 <_ZN6IRrecv10decodeSonyEP14decode_results+0x112>
    return DECODED;
  }
  offset++;

  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SONY_HDR_MARK)) {
     bc4:	8a 81       	ldd	r24, Y+2	; 0x02
     bc6:	9b 81       	ldd	r25, Y+3	; 0x03
     bc8:	60 e6       	ldi	r22, 0x60	; 96
     bca:	79 e0       	ldi	r23, 0x09	; 9
     bcc:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
     bd0:	00 97       	sbiw	r24, 0x00	; 0
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <_ZN6IRrecv10decodeSonyEP14decode_results+0x66>
     bd4:	5b c0       	rjmp	.+182    	; 0xc8c <_ZN6IRrecv10decodeSonyEP14decode_results+0x11c>
  results->value = data;
  results->decode_type = NEC;
  return DECODED;
}

long IRrecv::decodeSony(decode_results *results) {
     bd6:	26 96       	adiw	r28, 0x06	; 6
     bd8:	62 e0       	ldi	r22, 0x02	; 2
     bda:	a6 2e       	mov	r10, r22
     bdc:	b1 2c       	mov	r11, r1
     bde:	cc 24       	eor	r12, r12
     be0:	dd 24       	eor	r13, r13
     be2:	76 01       	movw	r14, r12
     be4:	30 c0       	rjmp	.+96     	; 0xc46 <_ZN6IRrecv10decodeSonyEP14decode_results+0xd6>
     be6:	fe 01       	movw	r30, r28
     be8:	32 97       	sbiw	r30, 0x02	; 2
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
    if (!MATCH_SPACE(results->rawbuf[offset], SONY_HDR_SPACE)) {
     bea:	80 81       	ld	r24, Z
     bec:	91 81       	ldd	r25, Z+1	; 0x01
     bee:	68 e5       	ldi	r22, 0x58	; 88
     bf0:	72 e0       	ldi	r23, 0x02	; 2
     bf2:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	79 f1       	breq	.+94     	; 0xc58 <_ZN6IRrecv10decodeSonyEP14decode_results+0xe8>
      break;
    }
    offset++;
    if (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK)) {
     bfa:	88 81       	ld	r24, Y
     bfc:	99 81       	ldd	r25, Y+1	; 0x01
     bfe:	60 eb       	ldi	r22, 0xB0	; 176
     c00:	74 e0       	ldi	r23, 0x04	; 4
     c02:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
     c06:	00 97       	sbiw	r24, 0x00	; 0
     c08:	69 f0       	breq	.+26     	; 0xc24 <_ZN6IRrecv10decodeSonyEP14decode_results+0xb4>
      data = (data << 1) | 1;
     c0a:	cc 0c       	add	r12, r12
     c0c:	dd 1c       	adc	r13, r13
     c0e:	ee 1c       	adc	r14, r14
     c10:	ff 1c       	adc	r15, r15
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	a0 e0       	ldi	r26, 0x00	; 0
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	c8 2a       	or	r12, r24
     c1c:	d9 2a       	or	r13, r25
     c1e:	ea 2a       	or	r14, r26
     c20:	fb 2a       	or	r15, r27
     c22:	0c c0       	rjmp	.+24     	; 0xc3c <_ZN6IRrecv10decodeSonyEP14decode_results+0xcc>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK)) {
     c24:	88 81       	ld	r24, Y
     c26:	99 81       	ldd	r25, Y+1	; 0x01
     c28:	68 e5       	ldi	r22, 0x58	; 88
     c2a:	72 e0       	ldi	r23, 0x02	; 2
     c2c:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	61 f1       	breq	.+88     	; 0xc8c <_ZN6IRrecv10decodeSonyEP14decode_results+0x11c>
      data <<= 1;
     c34:	cc 0c       	add	r12, r12
     c36:	dd 1c       	adc	r13, r13
     c38:	ee 1c       	adc	r14, r14
     c3a:	ff 1c       	adc	r15, r15
    } 
    else {
      return ERR;
    }
    offset++;
     c3c:	a2 e0       	ldi	r26, 0x02	; 2
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	aa 0e       	add	r10, r26
     c42:	bb 1e       	adc	r11, r27
     c44:	24 96       	adiw	r28, 0x04	; 4
  if (!MATCH_MARK(results->rawbuf[offset], SONY_HDR_MARK)) {
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
     c46:	80 91 ef 04 	lds	r24, 0x04EF
  results->value = data;
  results->decode_type = NEC;
  return DECODED;
}

long IRrecv::decodeSony(decode_results *results) {
     c4a:	95 01       	movw	r18, r10
     c4c:	2f 5f       	subi	r18, 0xFF	; 255
     c4e:	3f 4f       	sbci	r19, 0xFF	; 255
  if (!MATCH_MARK(results->rawbuf[offset], SONY_HDR_MARK)) {
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	3c f2       	brlt	.-114    	; 0xbe6 <_ZN6IRrecv10decodeSonyEP14decode_results+0x76>
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
     c58:	c5 01       	movw	r24, r10
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	95 95       	asr	r25
     c5e:	87 95       	ror	r24
     c60:	f8 01       	movw	r30, r16
     c62:	91 87       	std	Z+9, r25	; 0x09
     c64:	80 87       	std	Z+8, r24	; 0x08
  if (results->bits < 12) {
     c66:	8c 30       	cpi	r24, 0x0C	; 12
     c68:	91 05       	cpc	r25, r1
     c6a:	1c f4       	brge	.+6      	; 0xc72 <_ZN6IRrecv10decodeSonyEP14decode_results+0x102>
    results->bits = 0;
     c6c:	11 86       	std	Z+9, r1	; 0x09
     c6e:	10 86       	std	Z+8, r1	; 0x08
     c70:	0d c0       	rjmp	.+26     	; 0xc8c <_ZN6IRrecv10decodeSonyEP14decode_results+0x11c>
    return ERR;
  }
  results->value = data;
     c72:	c4 82       	std	Z+4, r12	; 0x04
     c74:	d5 82       	std	Z+5, r13	; 0x05
     c76:	e6 82       	std	Z+6, r14	; 0x06
     c78:	f7 82       	std	Z+7, r15	; 0x07
  results->decode_type = SONY;
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	91 83       	std	Z+1, r25	; 0x01
     c80:	80 83       	st	Z, r24
  return DECODED;
     c82:	01 e0       	ldi	r16, 0x01	; 1
     c84:	10 e0       	ldi	r17, 0x00	; 0
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <_ZN6IRrecv10decodeSonyEP14decode_results+0x122>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK)) {
      data <<= 1;
    } 
    else {
      return ERR;
     c8c:	00 e0       	ldi	r16, 0x00	; 0
     c8e:	10 e0       	ldi	r17, 0x00	; 0
     c90:	98 01       	movw	r18, r16
    return ERR;
  }
  results->value = data;
  results->decode_type = SONY;
  return DECODED;
}
     c92:	b8 01       	movw	r22, r16
     c94:	c9 01       	movw	r24, r18
     c96:	df 91       	pop	r29
     c98:	cf 91       	pop	r28
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	ff 90       	pop	r15
     ca0:	ef 90       	pop	r14
     ca2:	df 90       	pop	r13
     ca4:	cf 90       	pop	r12
     ca6:	bf 90       	pop	r11
     ca8:	af 90       	pop	r10
     caa:	08 95       	ret

00000cac <_ZN6IRrecv11decodeSanyoEP14decode_results>:

// I think this is a Sanyo decoder - serial = SA 8650B
// Looks like Sony except for timings, 48 chars of data and time/space different
long IRrecv::decodeSanyo(decode_results *results) {
     cac:	af 92       	push	r10
     cae:	bf 92       	push	r11
     cb0:	cf 92       	push	r12
     cb2:	df 92       	push	r13
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	8b 01       	movw	r16, r22
  long data = 0;
  if (irparams.rawlen < 2 * SANYO_BITS + 2) {
     cc2:	80 91 ef 04 	lds	r24, 0x04EF
     cc6:	8a 31       	cpi	r24, 0x1A	; 26
     cc8:	08 f4       	brcc	.+2      	; 0xccc <_ZN6IRrecv11decodeSanyoEP14decode_results+0x20>
     cca:	87 c0       	rjmp	.+270    	; 0xdda <_ZN6IRrecv11decodeSanyoEP14decode_results+0x12e>
  Serial.print("IR Gap: ");
  Serial.println( results->rawbuf[offset]);
  Serial.println( "test against:");
  Serial.println(results->rawbuf[offset]);
  */
  if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
     ccc:	db 01       	movw	r26, r22
     cce:	1a 96       	adiw	r26, 0x0a	; 10
     cd0:	cd 91       	ld	r28, X+
     cd2:	dc 91       	ld	r29, X
     cd4:	1b 97       	sbiw	r26, 0x0b	; 11
     cd6:	88 81       	ld	r24, Y
     cd8:	99 81       	ldd	r25, Y+1	; 0x01
     cda:	b3 e0       	ldi	r27, 0x03	; 3
     cdc:	80 32       	cpi	r24, 0x20	; 32
     cde:	9b 07       	cpc	r25, r27
     ce0:	78 f4       	brcc	.+30     	; 0xd00 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x54>
    // Serial.print("IR Gap found: ");
    results->bits = 0;
     ce2:	fb 01       	movw	r30, r22
     ce4:	11 86       	std	Z+9, r1	; 0x09
     ce6:	10 86       	std	Z+8, r1	; 0x08
    results->value = REPEAT;
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	9f ef       	ldi	r25, 0xFF	; 255
     cec:	dc 01       	movw	r26, r24
     cee:	84 83       	std	Z+4, r24	; 0x04
     cf0:	95 83       	std	Z+5, r25	; 0x05
     cf2:	a6 83       	std	Z+6, r26	; 0x06
     cf4:	b7 83       	std	Z+7, r27	; 0x07
    results->decode_type = SANYO;
     cf6:	89 e0       	ldi	r24, 0x09	; 9
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	91 83       	std	Z+1, r25	; 0x01
     cfc:	80 83       	st	Z, r24
     cfe:	68 c0       	rjmp	.+208    	; 0xdd0 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x124>
    return DECODED;
  }
  offset++;

  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	9b 81       	ldd	r25, Y+3	; 0x03
     d04:	6c ea       	ldi	r22, 0xAC	; 172
     d06:	7d e0       	ldi	r23, 0x0D	; 13
     d08:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	09 f4       	brne	.+2      	; 0xd12 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x66>
     d10:	64 c0       	rjmp	.+200    	; 0xdda <_ZN6IRrecv11decodeSanyoEP14decode_results+0x12e>
    return ERR;
  }
  offset++;

  // Skip Second Mark
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	9d 81       	ldd	r25, Y+5	; 0x05
     d16:	6c ea       	ldi	r22, 0xAC	; 172
     d18:	7d e0       	ldi	r23, 0x0D	; 13
     d1a:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	09 f4       	brne	.+2      	; 0xd24 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x78>
     d22:	5b c0       	rjmp	.+182    	; 0xdda <_ZN6IRrecv11decodeSanyoEP14decode_results+0x12e>
  return DECODED;
}

// I think this is a Sanyo decoder - serial = SA 8650B
// Looks like Sony except for timings, 48 chars of data and time/space different
long IRrecv::decodeSanyo(decode_results *results) {
     d24:	28 96       	adiw	r28, 0x08	; 8
     d26:	a3 e0       	ldi	r26, 0x03	; 3
     d28:	aa 2e       	mov	r10, r26
     d2a:	b1 2c       	mov	r11, r1
     d2c:	cc 24       	eor	r12, r12
     d2e:	dd 24       	eor	r13, r13
     d30:	76 01       	movw	r14, r12
     d32:	30 c0       	rjmp	.+96     	; 0xd94 <_ZN6IRrecv11decodeSanyoEP14decode_results+0xe8>
     d34:	fe 01       	movw	r30, r28
     d36:	32 97       	sbiw	r30, 0x02	; 2
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
    if (!MATCH_SPACE(results->rawbuf[offset], SANYO_HDR_SPACE)) {
     d38:	80 81       	ld	r24, Z
     d3a:	91 81       	ldd	r25, Z+1	; 0x01
     d3c:	66 eb       	ldi	r22, 0xB6	; 182
     d3e:	73 e0       	ldi	r23, 0x03	; 3
     d40:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	79 f1       	breq	.+94     	; 0xda6 <_ZN6IRrecv11decodeSanyoEP14decode_results+0xfa>
      break;
    }
    offset++;
    if (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK)) {
     d48:	88 81       	ld	r24, Y
     d4a:	99 81       	ldd	r25, Y+1	; 0x01
     d4c:	60 e6       	ldi	r22, 0x60	; 96
     d4e:	79 e0       	ldi	r23, 0x09	; 9
     d50:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	69 f0       	breq	.+26     	; 0xd72 <_ZN6IRrecv11decodeSanyoEP14decode_results+0xc6>
      data = (data << 1) | 1;
     d58:	cc 0c       	add	r12, r12
     d5a:	dd 1c       	adc	r13, r13
     d5c:	ee 1c       	adc	r14, r14
     d5e:	ff 1c       	adc	r15, r15
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	a0 e0       	ldi	r26, 0x00	; 0
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	c8 2a       	or	r12, r24
     d6a:	d9 2a       	or	r13, r25
     d6c:	ea 2a       	or	r14, r26
     d6e:	fb 2a       	or	r15, r27
     d70:	0c c0       	rjmp	.+24     	; 0xd8a <_ZN6IRrecv11decodeSanyoEP14decode_results+0xde>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK)) {
     d72:	88 81       	ld	r24, Y
     d74:	99 81       	ldd	r25, Y+1	; 0x01
     d76:	6c eb       	ldi	r22, 0xBC	; 188
     d78:	72 e0       	ldi	r23, 0x02	; 2
     d7a:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	61 f1       	breq	.+88     	; 0xdda <_ZN6IRrecv11decodeSanyoEP14decode_results+0x12e>
      data <<= 1;
     d82:	cc 0c       	add	r12, r12
     d84:	dd 1c       	adc	r13, r13
     d86:	ee 1c       	adc	r14, r14
     d88:	ff 1c       	adc	r15, r15
    } 
    else {
      return ERR;
    }
    offset++;
     d8a:	a2 e0       	ldi	r26, 0x02	; 2
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	aa 0e       	add	r10, r26
     d90:	bb 1e       	adc	r11, r27
     d92:	24 96       	adiw	r28, 0x04	; 4
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
     d94:	80 91 ef 04 	lds	r24, 0x04EF
  return DECODED;
}

// I think this is a Sanyo decoder - serial = SA 8650B
// Looks like Sony except for timings, 48 chars of data and time/space different
long IRrecv::decodeSanyo(decode_results *results) {
     d98:	95 01       	movw	r18, r10
     d9a:	2f 5f       	subi	r18, 0xFF	; 255
     d9c:	3f 4f       	sbci	r19, 0xFF	; 255
  if (!MATCH_MARK(results->rawbuf[offset], SANYO_HDR_MARK)) {
    return ERR;
  }
  offset++;

  while (offset + 1 < irparams.rawlen) {
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	28 17       	cp	r18, r24
     da2:	39 07       	cpc	r19, r25
     da4:	3c f2       	brlt	.-114    	; 0xd34 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x88>
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
     da6:	c5 01       	movw	r24, r10
     da8:	01 97       	sbiw	r24, 0x01	; 1
     daa:	95 95       	asr	r25
     dac:	87 95       	ror	r24
     dae:	f8 01       	movw	r30, r16
     db0:	91 87       	std	Z+9, r25	; 0x09
     db2:	80 87       	std	Z+8, r24	; 0x08
  if (results->bits < 12) {
     db4:	8c 30       	cpi	r24, 0x0C	; 12
     db6:	91 05       	cpc	r25, r1
     db8:	1c f4       	brge	.+6      	; 0xdc0 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x114>
    results->bits = 0;
     dba:	11 86       	std	Z+9, r1	; 0x09
     dbc:	10 86       	std	Z+8, r1	; 0x08
     dbe:	0d c0       	rjmp	.+26     	; 0xdda <_ZN6IRrecv11decodeSanyoEP14decode_results+0x12e>
    return ERR;
  }
  results->value = data;
     dc0:	c4 82       	std	Z+4, r12	; 0x04
     dc2:	d5 82       	std	Z+5, r13	; 0x05
     dc4:	e6 82       	std	Z+6, r14	; 0x06
     dc6:	f7 82       	std	Z+7, r15	; 0x07
  results->decode_type = SANYO;
     dc8:	89 e0       	ldi	r24, 0x09	; 9
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
  return DECODED;
     dd0:	01 e0       	ldi	r16, 0x01	; 1
     dd2:	10 e0       	ldi	r17, 0x00	; 0
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	03 c0       	rjmp	.+6      	; 0xde0 <_ZN6IRrecv11decodeSanyoEP14decode_results+0x134>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK)) {
      data <<= 1;
    } 
    else {
      return ERR;
     dda:	00 e0       	ldi	r16, 0x00	; 0
     ddc:	10 e0       	ldi	r17, 0x00	; 0
     dde:	98 01       	movw	r18, r16
    return ERR;
  }
  results->value = data;
  results->decode_type = SANYO;
  return DECODED;
}
     de0:	b8 01       	movw	r22, r16
     de2:	c9 01       	movw	r24, r18
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	ff 90       	pop	r15
     dee:	ef 90       	pop	r14
     df0:	df 90       	pop	r13
     df2:	cf 90       	pop	r12
     df4:	bf 90       	pop	r11
     df6:	af 90       	pop	r10
     df8:	08 95       	ret

00000dfa <_ZN6IRrecv16decodeMitsubishiEP14decode_results>:

// Looks like Sony except for timings, 48 chars of data and time/space different
long IRrecv::decodeMitsubishi(decode_results *results) {
     dfa:	6f 92       	push	r6
     dfc:	7f 92       	push	r7
     dfe:	8f 92       	push	r8
     e00:	9f 92       	push	r9
     e02:	af 92       	push	r10
     e04:	bf 92       	push	r11
     e06:	cf 92       	push	r12
     e08:	df 92       	push	r13
     e0a:	ef 92       	push	r14
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	4b 01       	movw	r8, r22
  // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
  long data = 0;
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2) {
     e18:	80 91 ef 04 	lds	r24, 0x04EF
     e1c:	82 32       	cpi	r24, 0x22	; 34
     e1e:	08 f4       	brcc	.+2      	; 0xe22 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x28>
     e20:	76 c0       	rjmp	.+236    	; 0xf0e <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x114>

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7 

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
     e22:	db 01       	movw	r26, r22
     e24:	1a 96       	adiw	r26, 0x0a	; 10
     e26:	cd 91       	ld	r28, X+
     e28:	dc 91       	ld	r29, X
     e2a:	1b 97       	sbiw	r26, 0x0b	; 11
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	6e e5       	ldi	r22, 0x5E	; 94
     e32:	71 e0       	ldi	r23, 0x01	; 1
     e34:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	09 f4       	brne	.+2      	; 0xe3e <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x44>
     e3c:	68 c0       	rjmp	.+208    	; 0xf0e <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x114>
  results->decode_type = SANYO;
  return DECODED;
}

// Looks like Sony except for timings, 48 chars of data and time/space different
long IRrecv::decodeMitsubishi(decode_results *results) {
     e3e:	16 e0       	ldi	r17, 0x06	; 6
     e40:	a1 2e       	mov	r10, r17
     e42:	b1 2c       	mov	r11, r1
     e44:	ac 0e       	add	r10, r28
     e46:	bd 1e       	adc	r11, r29
     e48:	02 e0       	ldi	r16, 0x02	; 2
     e4a:	10 e0       	ldi	r17, 0x00	; 0
     e4c:	cc 24       	eor	r12, r12
     e4e:	dd 24       	eor	r13, r13
     e50:	76 01       	movw	r14, r12
     e52:	32 c0       	rjmp	.+100    	; 0xeb8 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xbe>
     e54:	e5 01       	movw	r28, r10
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
    return ERR;
  }
  offset++;
  while (offset + 1 < irparams.rawlen) {
    if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK)) {
     e56:	22 97       	sbiw	r28, 0x02	; 2
     e58:	88 81       	ld	r24, Y
     e5a:	99 81       	ldd	r25, Y+1	; 0x01
     e5c:	6e e9       	ldi	r22, 0x9E	; 158
     e5e:	77 e0       	ldi	r23, 0x07	; 7
     e60:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
     e64:	00 97       	sbiw	r24, 0x00	; 0
     e66:	69 f0       	breq	.+26     	; 0xe82 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x88>
      data = (data << 1) | 1;
     e68:	cc 0c       	add	r12, r12
     e6a:	dd 1c       	adc	r13, r13
     e6c:	ee 1c       	adc	r14, r14
     e6e:	ff 1c       	adc	r15, r15
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	a0 e0       	ldi	r26, 0x00	; 0
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	c8 2a       	or	r12, r24
     e7a:	d9 2a       	or	r13, r25
     e7c:	ea 2a       	or	r14, r26
     e7e:	fb 2a       	or	r15, r27
     e80:	0c c0       	rjmp	.+24     	; 0xe9a <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xa0>
    } 
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK)) {
     e82:	88 81       	ld	r24, Y
     e84:	99 81       	ldd	r25, Y+1	; 0x01
     e86:	6e ee       	ldi	r22, 0xEE	; 238
     e88:	72 e0       	ldi	r23, 0x02	; 2
     e8a:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	f1 f1       	breq	.+124    	; 0xf0e <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x114>
      data <<= 1;
     e92:	cc 0c       	add	r12, r12
     e94:	dd 1c       	adc	r13, r13
     e96:	ee 1c       	adc	r14, r14
     e98:	ff 1c       	adc	r15, r15
    else {
      // Serial.println("A"); Serial.println(offset); Serial.println(results->rawbuf[offset]);
      return ERR;
    }
    offset++;
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
     e9a:	d5 01       	movw	r26, r10
     e9c:	8d 91       	ld	r24, X+
     e9e:	9c 91       	ld	r25, X
     ea0:	6e e5       	ldi	r22, 0x5E	; 94
     ea2:	71 e0       	ldi	r23, 0x01	; 1
     ea4:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
     ea8:	e4 e0       	ldi	r30, 0x04	; 4
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	ae 0e       	add	r10, r30
     eae:	bf 1e       	adc	r11, r31
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	69 f0       	breq	.+26     	; 0xece <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xd4>
      // Serial.println("B"); Serial.println(offset); Serial.println(results->rawbuf[offset]);
      break;
    }
    offset++;
     eb4:	0e 5f       	subi	r16, 0xFE	; 254
     eb6:	1f 4f       	sbci	r17, 0xFF	; 255
  results->decode_type = SANYO;
  return DECODED;
}

// Looks like Sony except for timings, 48 chars of data and time/space different
long IRrecv::decodeMitsubishi(decode_results *results) {
     eb8:	38 01       	movw	r6, r16
     eba:	08 94       	sec
     ebc:	61 1c       	adc	r6, r1
     ebe:	71 1c       	adc	r7, r1
  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE)) {
    return ERR;
  }
  offset++;
  while (offset + 1 < irparams.rawlen) {
     ec0:	80 91 ef 04 	lds	r24, 0x04EF
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	68 16       	cp	r6, r24
     ec8:	79 06       	cpc	r7, r25
     eca:	24 f2       	brlt	.-120    	; 0xe54 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x5a>
     ecc:	01 c0       	rjmp	.+2      	; 0xed0 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xd6>
     ece:	83 01       	movw	r16, r6
    }
    offset++;
  }

  // Success
  results->bits = (offset - 1) / 2;
     ed0:	01 50       	subi	r16, 0x01	; 1
     ed2:	10 40       	sbci	r17, 0x00	; 0
     ed4:	15 95       	asr	r17
     ed6:	07 95       	ror	r16
     ed8:	d4 01       	movw	r26, r8
     eda:	19 96       	adiw	r26, 0x09	; 9
     edc:	1c 93       	st	X, r17
     ede:	0e 93       	st	-X, r16
     ee0:	18 97       	sbiw	r26, 0x08	; 8
  if (results->bits < MITSUBISHI_BITS) {
     ee2:	00 31       	cpi	r16, 0x10	; 16
     ee4:	11 05       	cpc	r17, r1
     ee6:	2c f4       	brge	.+10     	; 0xef2 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0xf8>
    results->bits = 0;
     ee8:	19 96       	adiw	r26, 0x09	; 9
     eea:	1c 92       	st	X, r1
     eec:	1e 92       	st	-X, r1
     eee:	18 97       	sbiw	r26, 0x08	; 8
     ef0:	0e c0       	rjmp	.+28     	; 0xf0e <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x114>
    return ERR;
  }
  results->value = data;
     ef2:	f4 01       	movw	r30, r8
     ef4:	c4 82       	std	Z+4, r12	; 0x04
     ef6:	d5 82       	std	Z+5, r13	; 0x05
     ef8:	e6 82       	std	Z+6, r14	; 0x06
     efa:	f7 82       	std	Z+7, r15	; 0x07
  results->decode_type = MITSUBISHI;
     efc:	8a e0       	ldi	r24, 0x0A	; 10
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	91 83       	std	Z+1, r25	; 0x01
     f02:	80 83       	st	Z, r24
  return DECODED;
     f04:	01 e0       	ldi	r16, 0x01	; 1
     f06:	10 e0       	ldi	r17, 0x00	; 0
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <_ZN6IRrecv16decodeMitsubishiEP14decode_results+0x11a>
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK)) {
      data <<= 1;
    } 
    else {
      // Serial.println("A"); Serial.println(offset); Serial.println(results->rawbuf[offset]);
      return ERR;
     f0e:	00 e0       	ldi	r16, 0x00	; 0
     f10:	10 e0       	ldi	r17, 0x00	; 0
     f12:	98 01       	movw	r18, r16
    return ERR;
  }
  results->value = data;
  results->decode_type = MITSUBISHI;
  return DECODED;
}
     f14:	b8 01       	movw	r22, r16
     f16:	c9 01       	movw	r24, r18
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	0f 91       	pop	r16
     f20:	ff 90       	pop	r15
     f22:	ef 90       	pop	r14
     f24:	df 90       	pop	r13
     f26:	cf 90       	pop	r12
     f28:	bf 90       	pop	r11
     f2a:	af 90       	pop	r10
     f2c:	9f 90       	pop	r9
     f2e:	8f 90       	pop	r8
     f30:	7f 90       	pop	r7
     f32:	6f 90       	pop	r6
     f34:	08 95       	ret

00000f36 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>:
// E.g. if the buffer has MARK for 2 time intervals and SPACE for 1,
// successive calls to getRClevel will return MARK, MARK, SPACE.
// offset and used are updated to keep track of the current position.
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
int IRrecv::getRClevel(decode_results *results, int *offset, int *used, int t1) {
     f36:	6f 92       	push	r6
     f38:	7f 92       	push	r7
     f3a:	8f 92       	push	r8
     f3c:	9f 92       	push	r9
     f3e:	af 92       	push	r10
     f40:	bf 92       	push	r11
     f42:	cf 92       	push	r12
     f44:	df 92       	push	r13
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	fb 01       	movw	r30, r22
     f54:	3a 01       	movw	r6, r20
     f56:	49 01       	movw	r8, r18
     f58:	58 01       	movw	r10, r16
  if (*offset >= results->rawlen) {
     f5a:	da 01       	movw	r26, r20
     f5c:	2d 91       	ld	r18, X+
     f5e:	3c 91       	ld	r19, X
     f60:	11 97       	sbiw	r26, 0x01	; 1
     f62:	84 85       	ldd	r24, Z+12	; 0x0c
     f64:	95 85       	ldd	r25, Z+13	; 0x0d
     f66:	28 17       	cp	r18, r24
     f68:	39 07       	cpc	r19, r25
     f6a:	0c f0       	brlt	.+2      	; 0xf6e <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x38>
     f6c:	54 c0       	rjmp	.+168    	; 0x1016 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xe0>
    // After end of recorded buffer, assume SPACE.
    return SPACE;
  }
  int width = results->rawbuf[*offset];
     f6e:	c9 01       	movw	r24, r18
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	02 84       	ldd	r0, Z+10	; 0x0a
     f76:	f3 85       	ldd	r31, Z+11	; 0x0b
     f78:	e0 2d       	mov	r30, r0
     f7a:	e8 0f       	add	r30, r24
     f7c:	f9 1f       	adc	r31, r25
     f7e:	80 81       	ld	r24, Z
     f80:	91 81       	ldd	r25, Z+1	; 0x01
     f82:	7c 01       	movw	r14, r24
  int val = ((*offset) % 2) ? MARK : SPACE;
     f84:	20 ff       	sbrs	r18, 0
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x5c>
     f88:	cc 24       	eor	r12, r12
     f8a:	dd 24       	eor	r13, r13
  int correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
     f8c:	04 e6       	ldi	r16, 0x64	; 100
     f8e:	10 e0       	ldi	r17, 0x00	; 0
     f90:	05 c0       	rjmp	.+10     	; 0xf9c <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0x66>
  if (*offset >= results->rawlen) {
    // After end of recorded buffer, assume SPACE.
    return SPACE;
  }
  int width = results->rawbuf[*offset];
  int val = ((*offset) % 2) ? MARK : SPACE;
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	c9 2e       	mov	r12, r25
     f96:	d1 2c       	mov	r13, r1
  int correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
     f98:	0c e9       	ldi	r16, 0x9C	; 156
     f9a:	1f ef       	ldi	r17, 0xFF	; 255

  int avail;
  if (MATCH(width, t1 + correction)) {
     f9c:	b5 01       	movw	r22, r10
     f9e:	60 0f       	add	r22, r16
     fa0:	71 1f       	adc	r23, r17
     fa2:	c7 01       	movw	r24, r14
     fa4:	0e 94 ca 01 	call	0x394	; 0x394 <_Z5MATCHii>
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	c1 f4       	brne	.+48     	; 0xfdc <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xa6>
    avail = 1;
  } 
  else if (MATCH(width, 2*t1 + correction)) {
     fac:	e5 01       	movw	r28, r10
     fae:	cc 0f       	add	r28, r28
     fb0:	dd 1f       	adc	r29, r29
     fb2:	be 01       	movw	r22, r28
     fb4:	60 0f       	add	r22, r16
     fb6:	71 1f       	adc	r23, r17
     fb8:	c7 01       	movw	r24, r14
     fba:	0e 94 ca 01 	call	0x394	; 0x394 <_Z5MATCHii>
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	81 f4       	brne	.+32     	; 0xfe2 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xac>
    avail = 2;
  } 
  else if (MATCH(width, 3*t1 + correction)) {
     fc2:	be 01       	movw	r22, r28
     fc4:	6a 0d       	add	r22, r10
     fc6:	7b 1d       	adc	r23, r11
     fc8:	60 0f       	add	r22, r16
     fca:	71 1f       	adc	r23, r17
     fcc:	c7 01       	movw	r24, r14
     fce:	0e 94 ca 01 	call	0x394	; 0x394 <_Z5MATCHii>
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	e1 f0       	breq	.+56     	; 0x100e <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xd8>
    avail = 3;
     fd6:	23 e0       	ldi	r18, 0x03	; 3
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	05 c0       	rjmp	.+10     	; 0xfe6 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xb0>
  int val = ((*offset) % 2) ? MARK : SPACE;
  int correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;

  int avail;
  if (MATCH(width, t1 + correction)) {
    avail = 1;
     fdc:	21 e0       	ldi	r18, 0x01	; 1
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xb0>
  } 
  else if (MATCH(width, 2*t1 + correction)) {
    avail = 2;
     fe2:	22 e0       	ldi	r18, 0x02	; 2
     fe4:	30 e0       	ldi	r19, 0x00	; 0
  } 
  else {
    return -1;
  }

  (*used)++;
     fe6:	f4 01       	movw	r30, r8
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	01 96       	adiw	r24, 0x01	; 1
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	80 83       	st	Z, r24
  if (*used >= avail) {
     ff2:	82 17       	cp	r24, r18
     ff4:	93 07       	cpc	r25, r19
     ff6:	94 f0       	brlt	.+36     	; 0x101c <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xe6>
    *used = 0;
     ff8:	11 82       	std	Z+1, r1	; 0x01
     ffa:	10 82       	st	Z, r1
    (*offset)++;
     ffc:	d3 01       	movw	r26, r6
     ffe:	8d 91       	ld	r24, X+
    1000:	9c 91       	ld	r25, X
    1002:	11 97       	sbiw	r26, 0x01	; 1
    1004:	01 96       	adiw	r24, 0x01	; 1
    1006:	11 96       	adiw	r26, 0x01	; 1
    1008:	9c 93       	st	X, r25
    100a:	8e 93       	st	-X, r24
    100c:	07 c0       	rjmp	.+14     	; 0x101c <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xe6>
  } 
  else if (MATCH(width, 3*t1 + correction)) {
    avail = 3;
  } 
  else {
    return -1;
    100e:	cc 24       	eor	r12, r12
    1010:	ca 94       	dec	r12
    1012:	dc 2c       	mov	r13, r12
    1014:	03 c0       	rjmp	.+6      	; 0x101c <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i+0xe6>
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
int IRrecv::getRClevel(decode_results *results, int *offset, int *used, int t1) {
  if (*offset >= results->rawlen) {
    // After end of recorded buffer, assume SPACE.
    return SPACE;
    1016:	01 e0       	ldi	r16, 0x01	; 1
    1018:	c0 2e       	mov	r12, r16
    101a:	d1 2c       	mov	r13, r1
  else {
    Serial.println("SPACE");
  }
#endif
  return val;   
}
    101c:	c6 01       	movw	r24, r12
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	bf 90       	pop	r11
    1030:	af 90       	pop	r10
    1032:	9f 90       	pop	r9
    1034:	8f 90       	pop	r8
    1036:	7f 90       	pop	r7
    1038:	6f 90       	pop	r6
    103a:	08 95       	ret

0000103c <_ZN6IRrecv9decodeRC5EP14decode_results>:

long IRrecv::decodeRC5(decode_results *results) {
    103c:	2f 92       	push	r2
    103e:	3f 92       	push	r3
    1040:	4f 92       	push	r4
    1042:	5f 92       	push	r5
    1044:	6f 92       	push	r6
    1046:	7f 92       	push	r7
    1048:	8f 92       	push	r8
    104a:	9f 92       	push	r9
    104c:	af 92       	push	r10
    104e:	bf 92       	push	r11
    1050:	cf 92       	push	r12
    1052:	df 92       	push	r13
    1054:	ef 92       	push	r14
    1056:	ff 92       	push	r15
    1058:	0f 93       	push	r16
    105a:	1f 93       	push	r17
    105c:	cf 93       	push	r28
    105e:	df 93       	push	r29
    1060:	cd b7       	in	r28, 0x3d	; 61
    1062:	de b7       	in	r29, 0x3e	; 62
    1064:	27 97       	sbiw	r28, 0x07	; 7
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	f8 94       	cli
    106a:	de bf       	out	0x3e, r29	; 62
    106c:	0f be       	out	0x3f, r0	; 63
    106e:	cd bf       	out	0x3d, r28	; 61
    1070:	2c 01       	movw	r4, r24
    1072:	6b 01       	movw	r12, r22
  if (irparams.rawlen < MIN_RC5_SAMPLES + 2) {
    1074:	80 91 ef 04 	lds	r24, 0x04EF
    1078:	8d 30       	cpi	r24, 0x0D	; 13
    107a:	08 f4       	brcc	.+2      	; 0x107e <_ZN6IRrecv9decodeRC5EP14decode_results+0x42>
    107c:	86 c0       	rjmp	.+268    	; 0x118a <_ZN6IRrecv9decodeRC5EP14decode_results+0x14e>
    return ERR;
  }
  int offset = 1; // Skip gap space
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	9c 83       	std	Y+4, r25	; 0x04
    1084:	8b 83       	std	Y+3, r24	; 0x03
  long data = 0;
  int used = 0;
    1086:	1a 82       	std	Y+2, r1	; 0x02
    1088:	19 82       	std	Y+1, r1	; 0x01
  // Get start bits
  if (getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
    108a:	73 e0       	ldi	r23, 0x03	; 3
    108c:	e7 2e       	mov	r14, r23
    108e:	f1 2c       	mov	r15, r1
    1090:	ec 0e       	add	r14, r28
    1092:	fd 1e       	adc	r15, r29
    1094:	c2 01       	movw	r24, r4
    1096:	b6 01       	movw	r22, r12
    1098:	a7 01       	movw	r20, r14
    109a:	3e 01       	movw	r6, r28
    109c:	08 94       	sec
    109e:	61 1c       	adc	r6, r1
    10a0:	71 1c       	adc	r7, r1
    10a2:	93 01       	movw	r18, r6
    10a4:	09 e7       	ldi	r16, 0x79	; 121
    10a6:	13 e0       	ldi	r17, 0x03	; 3
    10a8:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <_ZN6IRrecv9decodeRC5EP14decode_results+0x76>
    10b0:	6c c0       	rjmp	.+216    	; 0x118a <_ZN6IRrecv9decodeRC5EP14decode_results+0x14e>
  if (getRClevel(results, &offset, &used, RC5_T1) != SPACE) return ERR;
    10b2:	c2 01       	movw	r24, r4
    10b4:	b6 01       	movw	r22, r12
    10b6:	a7 01       	movw	r20, r14
    10b8:	93 01       	movw	r18, r6
    10ba:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	91 05       	cpc	r25, r1
    10c2:	09 f0       	breq	.+2      	; 0x10c6 <_ZN6IRrecv9decodeRC5EP14decode_results+0x8a>
    10c4:	62 c0       	rjmp	.+196    	; 0x118a <_ZN6IRrecv9decodeRC5EP14decode_results+0x14e>
  if (getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
    10c6:	c2 01       	movw	r24, r4
    10c8:	b6 01       	movw	r22, r12
    10ca:	a7 01       	movw	r20, r14
    10cc:	93 01       	movw	r18, r6
    10ce:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    10d2:	00 97       	sbiw	r24, 0x00	; 0
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <_ZN6IRrecv9decodeRC5EP14decode_results+0x9c>
    10d6:	59 c0       	rjmp	.+178    	; 0x118a <_ZN6IRrecv9decodeRC5EP14decode_results+0x14e>
    10d8:	1e 82       	std	Y+6, r1	; 0x06
    10da:	1d 82       	std	Y+5, r1	; 0x05
    10dc:	88 24       	eor	r8, r8
    10de:	99 24       	eor	r9, r9
    10e0:	54 01       	movw	r10, r8
  int nbits;
  for (nbits = 0; offset < irparams.rawlen; nbits++) {
    int levelA = getRClevel(results, &offset, &used, RC5_T1); 
    10e2:	ef 82       	std	Y+7, r14	; 0x07
    10e4:	2f 2c       	mov	r2, r15
    10e6:	36 2c       	mov	r3, r6
    10e8:	67 2c       	mov	r6, r7
    10ea:	35 c0       	rjmp	.+106    	; 0x1156 <_ZN6IRrecv9decodeRC5EP14decode_results+0x11a>
    10ec:	c2 01       	movw	r24, r4
    10ee:	b6 01       	movw	r22, r12
    10f0:	4f 81       	ldd	r20, Y+7	; 0x07
    10f2:	52 2d       	mov	r21, r2
    10f4:	23 2d       	mov	r18, r3
    10f6:	36 2d       	mov	r19, r6
    10f8:	09 e7       	ldi	r16, 0x79	; 121
    10fa:	13 e0       	ldi	r17, 0x03	; 3
    10fc:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    1100:	7c 01       	movw	r14, r24
    int levelB = getRClevel(results, &offset, &used, RC5_T1);
    1102:	c2 01       	movw	r24, r4
    1104:	b6 01       	movw	r22, r12
    1106:	4f 81       	ldd	r20, Y+7	; 0x07
    1108:	52 2d       	mov	r21, r2
    110a:	23 2d       	mov	r18, r3
    110c:	36 2d       	mov	r19, r6
    110e:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    if (levelA == SPACE && levelB == MARK) {
    1112:	21 e0       	ldi	r18, 0x01	; 1
    1114:	e2 16       	cp	r14, r18
    1116:	f1 04       	cpc	r15, r1
    1118:	79 f4       	brne	.+30     	; 0x1138 <_ZN6IRrecv9decodeRC5EP14decode_results+0xfc>
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	b1 f5       	brne	.+108    	; 0x118a <_ZN6IRrecv9decodeRC5EP14decode_results+0x14e>
      // 1 bit
      data = (data << 1) | 1;
    111e:	88 0c       	add	r8, r8
    1120:	99 1c       	adc	r9, r9
    1122:	aa 1c       	adc	r10, r10
    1124:	bb 1c       	adc	r11, r11
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a0 e0       	ldi	r26, 0x00	; 0
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	88 2a       	or	r8, r24
    1130:	99 2a       	or	r9, r25
    1132:	aa 2a       	or	r10, r26
    1134:	bb 2a       	or	r11, r27
    1136:	0a c0       	rjmp	.+20     	; 0x114c <_ZN6IRrecv9decodeRC5EP14decode_results+0x110>
    } 
    else if (levelA == MARK && levelB == SPACE) {
    1138:	e1 14       	cp	r14, r1
    113a:	f1 04       	cpc	r15, r1
    113c:	31 f5       	brne	.+76     	; 0x118a <_ZN6IRrecv9decodeRC5EP14decode_results+0x14e>
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	91 05       	cpc	r25, r1
    1142:	19 f5       	brne	.+70     	; 0x118a <_ZN6IRrecv9decodeRC5EP14decode_results+0x14e>
      // zero bit
      data <<= 1;
    1144:	88 0c       	add	r8, r8
    1146:	99 1c       	adc	r9, r9
    1148:	aa 1c       	adc	r10, r10
    114a:	bb 1c       	adc	r11, r11
  // Get start bits
  if (getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
  if (getRClevel(results, &offset, &used, RC5_T1) != SPACE) return ERR;
  if (getRClevel(results, &offset, &used, RC5_T1) != MARK) return ERR;
  int nbits;
  for (nbits = 0; offset < irparams.rawlen; nbits++) {
    114c:	ad 81       	ldd	r26, Y+5	; 0x05
    114e:	be 81       	ldd	r27, Y+6	; 0x06
    1150:	11 96       	adiw	r26, 0x01	; 1
    1152:	be 83       	std	Y+6, r27	; 0x06
    1154:	ad 83       	std	Y+5, r26	; 0x05
    1156:	20 91 ef 04 	lds	r18, 0x04EF
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	82 17       	cp	r24, r18
    1162:	93 07       	cpc	r25, r19
    1164:	1c f2       	brlt	.-122    	; 0x10ec <_ZN6IRrecv9decodeRC5EP14decode_results+0xb0>
      return ERR;
    } 
  }

  // Success
  results->bits = nbits;
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	f6 01       	movw	r30, r12
    116c:	91 87       	std	Z+9, r25	; 0x09
    116e:	80 87       	std	Z+8, r24	; 0x08
  results->value = data;
    1170:	84 82       	std	Z+4, r8	; 0x04
    1172:	95 82       	std	Z+5, r9	; 0x05
    1174:	a6 82       	std	Z+6, r10	; 0x06
    1176:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = RC5;
    1178:	83 e0       	ldi	r24, 0x03	; 3
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	91 83       	std	Z+1, r25	; 0x01
    117e:	80 83       	st	Z, r24
  return DECODED;
    1180:	01 e0       	ldi	r16, 0x01	; 1
    1182:	10 e0       	ldi	r17, 0x00	; 0
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	03 c0       	rjmp	.+6      	; 0x1190 <_ZN6IRrecv9decodeRC5EP14decode_results+0x154>
    else if (levelA == MARK && levelB == SPACE) {
      // zero bit
      data <<= 1;
    } 
    else {
      return ERR;
    118a:	00 e0       	ldi	r16, 0x00	; 0
    118c:	10 e0       	ldi	r17, 0x00	; 0
    118e:	98 01       	movw	r18, r16
  // Success
  results->bits = nbits;
  results->value = data;
  results->decode_type = RC5;
  return DECODED;
}
    1190:	b8 01       	movw	r22, r16
    1192:	c9 01       	movw	r24, r18
    1194:	27 96       	adiw	r28, 0x07	; 7
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	bf 90       	pop	r11
    11b2:	af 90       	pop	r10
    11b4:	9f 90       	pop	r9
    11b6:	8f 90       	pop	r8
    11b8:	7f 90       	pop	r7
    11ba:	6f 90       	pop	r6
    11bc:	5f 90       	pop	r5
    11be:	4f 90       	pop	r4
    11c0:	3f 90       	pop	r3
    11c2:	2f 90       	pop	r2
    11c4:	08 95       	ret

000011c6 <_ZN6IRrecv9decodeRC6EP14decode_results>:

long IRrecv::decodeRC6(decode_results *results) {
    11c6:	2f 92       	push	r2
    11c8:	3f 92       	push	r3
    11ca:	4f 92       	push	r4
    11cc:	5f 92       	push	r5
    11ce:	6f 92       	push	r6
    11d0:	7f 92       	push	r7
    11d2:	8f 92       	push	r8
    11d4:	9f 92       	push	r9
    11d6:	af 92       	push	r10
    11d8:	bf 92       	push	r11
    11da:	cf 92       	push	r12
    11dc:	df 92       	push	r13
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	28 97       	sbiw	r28, 0x08	; 8
    11f0:	0f b6       	in	r0, 0x3f	; 63
    11f2:	f8 94       	cli
    11f4:	de bf       	out	0x3e, r29	; 62
    11f6:	0f be       	out	0x3f, r0	; 63
    11f8:	cd bf       	out	0x3d, r28	; 61
    11fa:	9e 83       	std	Y+6, r25	; 0x06
    11fc:	8d 83       	std	Y+5, r24	; 0x05
    11fe:	3b 01       	movw	r6, r22
  if (results->rawlen < MIN_RC6_SAMPLES) {
    1200:	db 01       	movw	r26, r22
    1202:	1c 96       	adiw	r26, 0x0c	; 12
    1204:	8d 91       	ld	r24, X+
    1206:	9c 91       	ld	r25, X
    1208:	1d 97       	sbiw	r26, 0x0d	; 13
    120a:	18 16       	cp	r1, r24
    120c:	19 06       	cpc	r1, r25
    120e:	0c f0       	brlt	.+2      	; 0x1212 <_ZN6IRrecv9decodeRC6EP14decode_results+0x4c>
    1210:	c1 c0       	rjmp	.+386    	; 0x1394 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1ce>
    return ERR;
  }
  int offset = 1; // Skip first space
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	9c 83       	std	Y+4, r25	; 0x04
    1218:	8b 83       	std	Y+3, r24	; 0x03
  // Initial mark
  if (!MATCH_MARK(results->rawbuf[offset], RC6_HDR_MARK)) {
    121a:	1a 96       	adiw	r26, 0x0a	; 10
    121c:	ed 90       	ld	r14, X+
    121e:	fc 90       	ld	r15, X
    1220:	1b 97       	sbiw	r26, 0x0b	; 11
    1222:	f7 01       	movw	r30, r14
    1224:	82 81       	ldd	r24, Z+2	; 0x02
    1226:	93 81       	ldd	r25, Z+3	; 0x03
    1228:	6a e6       	ldi	r22, 0x6A	; 106
    122a:	7a e0       	ldi	r23, 0x0A	; 10
    122c:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	09 f4       	brne	.+2      	; 0x1236 <_ZN6IRrecv9decodeRC6EP14decode_results+0x70>
    1234:	af c0       	rjmp	.+350    	; 0x1394 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1ce>
    return ERR;
  }
  offset++;
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	9c 83       	std	Y+4, r25	; 0x04
    123c:	8b 83       	std	Y+3, r24	; 0x03
  if (!MATCH_SPACE(results->rawbuf[offset], RC6_HDR_SPACE)) {
    123e:	d7 01       	movw	r26, r14
    1240:	14 96       	adiw	r26, 0x04	; 4
    1242:	8d 91       	ld	r24, X+
    1244:	9c 91       	ld	r25, X
    1246:	15 97       	sbiw	r26, 0x05	; 5
    1248:	69 e7       	ldi	r22, 0x79	; 121
    124a:	73 e0       	ldi	r23, 0x03	; 3
    124c:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	09 f4       	brne	.+2      	; 0x1256 <_ZN6IRrecv9decodeRC6EP14decode_results+0x90>
    1254:	9f c0       	rjmp	.+318    	; 0x1394 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1ce>
    return ERR;
  }
  offset++;
    1256:	83 e0       	ldi	r24, 0x03	; 3
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	9c 83       	std	Y+4, r25	; 0x04
    125c:	8b 83       	std	Y+3, r24	; 0x03
  long data = 0;
  int used = 0;
    125e:	1a 82       	std	Y+2, r1	; 0x02
    1260:	19 82       	std	Y+1, r1	; 0x01
  // Get start bit (1)
  if (getRClevel(results, &offset, &used, RC6_T1) != MARK) return ERR;
    1262:	a3 e0       	ldi	r26, 0x03	; 3
    1264:	ea 2e       	mov	r14, r26
    1266:	f1 2c       	mov	r15, r1
    1268:	ec 0e       	add	r14, r28
    126a:	fd 1e       	adc	r15, r29
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	b3 01       	movw	r22, r6
    1272:	a7 01       	movw	r20, r14
    1274:	6e 01       	movw	r12, r28
    1276:	08 94       	sec
    1278:	c1 1c       	adc	r12, r1
    127a:	d1 1c       	adc	r13, r1
    127c:	96 01       	movw	r18, r12
    127e:	0c eb       	ldi	r16, 0xBC	; 188
    1280:	11 e0       	ldi	r17, 0x01	; 1
    1282:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	09 f0       	breq	.+2      	; 0x128c <_ZN6IRrecv9decodeRC6EP14decode_results+0xc6>
    128a:	84 c0       	rjmp	.+264    	; 0x1394 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1ce>
  if (getRClevel(results, &offset, &used, RC6_T1) != SPACE) return ERR;
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	b3 01       	movw	r22, r6
    1292:	a7 01       	movw	r20, r14
    1294:	96 01       	movw	r18, r12
    1296:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	91 05       	cpc	r25, r1
    129e:	09 f0       	breq	.+2      	; 0x12a2 <_ZN6IRrecv9decodeRC6EP14decode_results+0xdc>
    12a0:	79 c0       	rjmp	.+242    	; 0x1394 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1ce>
    12a2:	18 86       	std	Y+8, r1	; 0x08
    12a4:	1f 82       	std	Y+7, r1	; 0x07
    12a6:	88 24       	eor	r8, r8
    12a8:	99 24       	eor	r9, r9
    12aa:	54 01       	movw	r10, r8
  int nbits;
  for (nbits = 0; offset < results->rawlen; nbits++) {
    int levelA, levelB; // Next two levels
    levelA = getRClevel(results, &offset, &used, RC6_T1); 
    12ac:	17 01       	movw	r2, r14
    12ae:	26 01       	movw	r4, r12
    12b0:	57 c0       	rjmp	.+174    	; 0x1360 <_ZN6IRrecv9decodeRC6EP14decode_results+0x19a>
    12b2:	8d 81       	ldd	r24, Y+5	; 0x05
    12b4:	9e 81       	ldd	r25, Y+6	; 0x06
    12b6:	b3 01       	movw	r22, r6
    12b8:	a1 01       	movw	r20, r2
    12ba:	92 01       	movw	r18, r4
    12bc:	0c eb       	ldi	r16, 0xBC	; 188
    12be:	11 e0       	ldi	r17, 0x01	; 1
    12c0:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    12c4:	7c 01       	movw	r14, r24
    if (nbits == 3) {
    12c6:	ef 81       	ldd	r30, Y+7	; 0x07
    12c8:	f8 85       	ldd	r31, Y+8	; 0x08
    12ca:	e3 30       	cpi	r30, 0x03	; 3
    12cc:	f1 05       	cpc	r31, r1
    12ce:	59 f4       	brne	.+22     	; 0x12e6 <_ZN6IRrecv9decodeRC6EP14decode_results+0x120>
      // T bit is double wide; make sure second half matches
      if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return ERR;
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	b3 01       	movw	r22, r6
    12d6:	a1 01       	movw	r20, r2
    12d8:	92 01       	movw	r18, r4
    12da:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    12de:	e8 16       	cp	r14, r24
    12e0:	f9 06       	cpc	r15, r25
    12e2:	09 f0       	breq	.+2      	; 0x12e6 <_ZN6IRrecv9decodeRC6EP14decode_results+0x120>
    12e4:	57 c0       	rjmp	.+174    	; 0x1394 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1ce>
    } 
    levelB = getRClevel(results, &offset, &used, RC6_T1);
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	b3 01       	movw	r22, r6
    12ec:	a1 01       	movw	r20, r2
    12ee:	92 01       	movw	r18, r4
    12f0:	0c eb       	ldi	r16, 0xBC	; 188
    12f2:	11 e0       	ldi	r17, 0x01	; 1
    12f4:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    12f8:	6c 01       	movw	r12, r24
    if (nbits == 3) {
    12fa:	8f 81       	ldd	r24, Y+7	; 0x07
    12fc:	98 85       	ldd	r25, Y+8	; 0x08
    12fe:	83 30       	cpi	r24, 0x03	; 3
    1300:	91 05       	cpc	r25, r1
    1302:	51 f4       	brne	.+20     	; 0x1318 <_ZN6IRrecv9decodeRC6EP14decode_results+0x152>
      // T bit is double wide; make sure second half matches
      if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return ERR;
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	b3 01       	movw	r22, r6
    130a:	a1 01       	movw	r20, r2
    130c:	92 01       	movw	r18, r4
    130e:	0e 94 9b 07 	call	0xf36	; 0xf36 <_ZN6IRrecv10getRClevelEP14decode_resultsPiS2_i>
    1312:	c8 16       	cp	r12, r24
    1314:	d9 06       	cpc	r13, r25
    1316:	f1 f5       	brne	.+124    	; 0x1394 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1ce>
    } 
    if (levelA == MARK && levelB == SPACE) { // reversed compared to RC5
    1318:	e1 14       	cp	r14, r1
    131a:	f1 04       	cpc	r15, r1
    131c:	89 f4       	brne	.+34     	; 0x1340 <_ZN6IRrecv9decodeRC6EP14decode_results+0x17a>
    131e:	91 e0       	ldi	r25, 0x01	; 1
    1320:	c9 16       	cp	r12, r25
    1322:	d1 04       	cpc	r13, r1
    1324:	b9 f5       	brne	.+110    	; 0x1394 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1ce>
      // 1 bit
      data = (data << 1) | 1;
    1326:	88 0c       	add	r8, r8
    1328:	99 1c       	adc	r9, r9
    132a:	aa 1c       	adc	r10, r10
    132c:	bb 1c       	adc	r11, r11
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a0 e0       	ldi	r26, 0x00	; 0
    1334:	b0 e0       	ldi	r27, 0x00	; 0
    1336:	88 2a       	or	r8, r24
    1338:	99 2a       	or	r9, r25
    133a:	aa 2a       	or	r10, r26
    133c:	bb 2a       	or	r11, r27
    133e:	0b c0       	rjmp	.+22     	; 0x1356 <_ZN6IRrecv9decodeRC6EP14decode_results+0x190>
    } 
    else if (levelA == SPACE && levelB == MARK) {
    1340:	91 e0       	ldi	r25, 0x01	; 1
    1342:	e9 16       	cp	r14, r25
    1344:	f1 04       	cpc	r15, r1
    1346:	31 f5       	brne	.+76     	; 0x1394 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1ce>
    1348:	c1 14       	cp	r12, r1
    134a:	d1 04       	cpc	r13, r1
    134c:	19 f5       	brne	.+70     	; 0x1394 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1ce>
      // zero bit
      data <<= 1;
    134e:	88 0c       	add	r8, r8
    1350:	99 1c       	adc	r9, r9
    1352:	aa 1c       	adc	r10, r10
    1354:	bb 1c       	adc	r11, r11
  int used = 0;
  // Get start bit (1)
  if (getRClevel(results, &offset, &used, RC6_T1) != MARK) return ERR;
  if (getRClevel(results, &offset, &used, RC6_T1) != SPACE) return ERR;
  int nbits;
  for (nbits = 0; offset < results->rawlen; nbits++) {
    1356:	af 81       	ldd	r26, Y+7	; 0x07
    1358:	b8 85       	ldd	r27, Y+8	; 0x08
    135a:	11 96       	adiw	r26, 0x01	; 1
    135c:	b8 87       	std	Y+8, r27	; 0x08
    135e:	af 83       	std	Y+7, r26	; 0x07
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	f3 01       	movw	r30, r6
    1366:	24 85       	ldd	r18, Z+12	; 0x0c
    1368:	35 85       	ldd	r19, Z+13	; 0x0d
    136a:	82 17       	cp	r24, r18
    136c:	93 07       	cpc	r25, r19
    136e:	0c f4       	brge	.+2      	; 0x1372 <_ZN6IRrecv9decodeRC6EP14decode_results+0x1ac>
    1370:	a0 cf       	rjmp	.-192    	; 0x12b2 <_ZN6IRrecv9decodeRC6EP14decode_results+0xec>
    else {
      return ERR; // Error
    } 
  }
  // Success
  results->bits = nbits;
    1372:	8f 81       	ldd	r24, Y+7	; 0x07
    1374:	98 85       	ldd	r25, Y+8	; 0x08
    1376:	91 87       	std	Z+9, r25	; 0x09
    1378:	80 87       	std	Z+8, r24	; 0x08
  results->value = data;
    137a:	84 82       	std	Z+4, r8	; 0x04
    137c:	95 82       	std	Z+5, r9	; 0x05
    137e:	a6 82       	std	Z+6, r10	; 0x06
    1380:	b7 82       	std	Z+7, r11	; 0x07
  results->decode_type = RC6;
    1382:	84 e0       	ldi	r24, 0x04	; 4
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	80 83       	st	Z, r24
  return DECODED;
    138a:	01 e0       	ldi	r16, 0x01	; 1
    138c:	10 e0       	ldi	r17, 0x00	; 0
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	03 c0       	rjmp	.+6      	; 0x139a <_ZN6IRrecv9decodeRC6EP14decode_results+0x1d4>
    else if (levelA == SPACE && levelB == MARK) {
      // zero bit
      data <<= 1;
    } 
    else {
      return ERR; // Error
    1394:	00 e0       	ldi	r16, 0x00	; 0
    1396:	10 e0       	ldi	r17, 0x00	; 0
    1398:	98 01       	movw	r18, r16
  // Success
  results->bits = nbits;
  results->value = data;
  results->decode_type = RC6;
  return DECODED;
}
    139a:	b8 01       	movw	r22, r16
    139c:	c9 01       	movw	r24, r18
    139e:	28 96       	adiw	r28, 0x08	; 8
    13a0:	0f b6       	in	r0, 0x3f	; 63
    13a2:	f8 94       	cli
    13a4:	de bf       	out	0x3e, r29	; 62
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	cd bf       	out	0x3d, r28	; 61
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	1f 91       	pop	r17
    13b0:	0f 91       	pop	r16
    13b2:	ff 90       	pop	r15
    13b4:	ef 90       	pop	r14
    13b6:	df 90       	pop	r13
    13b8:	cf 90       	pop	r12
    13ba:	bf 90       	pop	r11
    13bc:	af 90       	pop	r10
    13be:	9f 90       	pop	r9
    13c0:	8f 90       	pop	r8
    13c2:	7f 90       	pop	r7
    13c4:	6f 90       	pop	r6
    13c6:	5f 90       	pop	r5
    13c8:	4f 90       	pop	r4
    13ca:	3f 90       	pop	r3
    13cc:	2f 90       	pop	r2
    13ce:	08 95       	ret

000013d0 <_ZN6IRrecv15decodePanasonicEP14decode_results>:
long IRrecv::decodePanasonic(decode_results *results) {
    13d0:	8f 92       	push	r8
    13d2:	9f 92       	push	r9
    13d4:	af 92       	push	r10
    13d6:	bf 92       	push	r11
    13d8:	cf 92       	push	r12
    13da:	df 92       	push	r13
    13dc:	ef 92       	push	r14
    13de:	ff 92       	push	r15
    13e0:	0f 93       	push	r16
    13e2:	1f 93       	push	r17
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	00 d0       	rcall	.+0      	; 0x13ea <_ZN6IRrecv15decodePanasonicEP14decode_results+0x1a>
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <_ZN6IRrecv15decodePanasonicEP14decode_results+0x1c>
    13ec:	cd b7       	in	r28, 0x3d	; 61
    13ee:	de b7       	in	r29, 0x3e	; 62
    13f0:	7b 01       	movw	r14, r22
    unsigned long long data = 0;
    int offset = 1;
    
    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_MARK)) {
    13f2:	fb 01       	movw	r30, r22
    13f4:	02 85       	ldd	r16, Z+10	; 0x0a
    13f6:	13 85       	ldd	r17, Z+11	; 0x0b
    13f8:	f8 01       	movw	r30, r16
    13fa:	82 81       	ldd	r24, Z+2	; 0x02
    13fc:	93 81       	ldd	r25, Z+3	; 0x03
    13fe:	6e ea       	ldi	r22, 0xAE	; 174
    1400:	7d e0       	ldi	r23, 0x0D	; 13
    1402:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	09 f4       	brne	.+2      	; 0x140c <_ZN6IRrecv15decodePanasonicEP14decode_results+0x3c>
    140a:	83 c0       	rjmp	.+262    	; 0x1512 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x142>
        return ERR;
    }
    offset++;
    if (!MATCH_MARK(results->rawbuf[offset], PANASONIC_HDR_SPACE)) {
    140c:	f8 01       	movw	r30, r16
    140e:	84 81       	ldd	r24, Z+4	; 0x04
    1410:	95 81       	ldd	r25, Z+5	; 0x05
    1412:	66 ed       	ldi	r22, 0xD6	; 214
    1414:	76 e0       	ldi	r23, 0x06	; 6
    1416:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
    141a:	00 97       	sbiw	r24, 0x00	; 0
    141c:	09 f4       	brne	.+2      	; 0x1420 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x50>
    141e:	79 c0       	rjmp	.+242    	; 0x1512 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x142>
  results->bits = nbits;
  results->value = data;
  results->decode_type = RC6;
  return DECODED;
}
long IRrecv::decodePanasonic(decode_results *results) {
    1420:	b6 e0       	ldi	r27, 0x06	; 6
    1422:	cb 2e       	mov	r12, r27
    1424:	d1 2c       	mov	r13, r1
    1426:	c0 0e       	add	r12, r16
    1428:	d1 1e       	adc	r13, r17
    142a:	83 e0       	ldi	r24, 0x03	; 3
    142c:	a8 2e       	mov	r10, r24
    142e:	b1 2c       	mov	r11, r1
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	10 e0       	ldi	r17, 0x00	; 0
    143a:	00 e0       	ldi	r16, 0x00	; 0
    143c:	99 24       	eor	r9, r9
    143e:	88 24       	eor	r8, r8
    }
    offset++;
    
    // decode address
    for (int i = 0; i < PANASONIC_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK)) {
    1440:	f6 01       	movw	r30, r12
    1442:	80 81       	ld	r24, Z
    1444:	91 81       	ldd	r25, Z+1	; 0x01
    1446:	66 ef       	ldi	r22, 0xF6	; 246
    1448:	71 e0       	ldi	r23, 0x01	; 1
    144a:	29 83       	std	Y+1, r18	; 0x01
    144c:	3a 83       	std	Y+2, r19	; 0x02
    144e:	4b 83       	std	Y+3, r20	; 0x03
    1450:	5c 83       	std	Y+4, r21	; 0x04
    1452:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	09 f4       	brne	.+2      	; 0x145c <_ZN6IRrecv15decodePanasonicEP14decode_results+0x8c>
    145a:	5b c0       	rjmp	.+182    	; 0x1512 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x142>
            return ERR;
        }
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
    145c:	f6 01       	movw	r30, r12
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	93 81       	ldd	r25, Z+3	; 0x03
    1462:	6c ed       	ldi	r22, 0xDC	; 220
    1464:	74 e0       	ldi	r23, 0x04	; 4
    1466:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
    146a:	29 81       	ldd	r18, Y+1	; 0x01
    146c:	3a 81       	ldd	r19, Y+2	; 0x02
    146e:	4b 81       	ldd	r20, Y+3	; 0x03
    1470:	5c 81       	ldd	r21, Y+4	; 0x04
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	49 f0       	breq	.+18     	; 0x1488 <_ZN6IRrecv15decodePanasonicEP14decode_results+0xb8>
            data = (data << 1) | 1;
    1476:	61 2f       	mov	r22, r17
    1478:	70 2f       	mov	r23, r16
    147a:	89 2d       	mov	r24, r9
    147c:	98 2d       	mov	r25, r8
    147e:	01 e0       	ldi	r16, 0x01	; 1
    1480:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__ashldi3>
    1484:	21 60       	ori	r18, 0x01	; 1
    1486:	18 c0       	rjmp	.+48     	; 0x14b8 <_ZN6IRrecv15decodePanasonicEP14decode_results+0xe8>
        } else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE)) {
    1488:	f6 01       	movw	r30, r12
    148a:	82 81       	ldd	r24, Z+2	; 0x02
    148c:	93 81       	ldd	r25, Z+3	; 0x03
    148e:	60 e9       	ldi	r22, 0x90	; 144
    1490:	71 e0       	ldi	r23, 0x01	; 1
    1492:	29 83       	std	Y+1, r18	; 0x01
    1494:	3a 83       	std	Y+2, r19	; 0x02
    1496:	4b 83       	std	Y+3, r20	; 0x03
    1498:	5c 83       	std	Y+4, r21	; 0x04
    149a:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
    149e:	29 81       	ldd	r18, Y+1	; 0x01
    14a0:	3a 81       	ldd	r19, Y+2	; 0x02
    14a2:	4b 81       	ldd	r20, Y+3	; 0x03
    14a4:	5c 81       	ldd	r21, Y+4	; 0x04
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	a1 f1       	breq	.+104    	; 0x1512 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x142>
            data <<= 1;
    14aa:	61 2f       	mov	r22, r17
    14ac:	70 2f       	mov	r23, r16
    14ae:	89 2d       	mov	r24, r9
    14b0:	98 2d       	mov	r25, r8
    14b2:	01 e0       	ldi	r16, 0x01	; 1
    14b4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__ashldi3>
    14b8:	16 2f       	mov	r17, r22
    14ba:	07 2f       	mov	r16, r23
    14bc:	98 2e       	mov	r9, r24
    14be:	89 2e       	mov	r8, r25
        } else {
            return ERR;
        }
        offset++;
    14c0:	82 e0       	ldi	r24, 0x02	; 2
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	a8 0e       	add	r10, r24
    14c6:	b9 1e       	adc	r11, r25
    14c8:	e4 e0       	ldi	r30, 0x04	; 4
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	ce 0e       	add	r12, r30
    14ce:	df 1e       	adc	r13, r31
        return ERR;
    }
    offset++;
    
    // decode address
    for (int i = 0; i < PANASONIC_BITS; i++) {
    14d0:	f3 e6       	ldi	r31, 0x63	; 99
    14d2:	af 16       	cp	r10, r31
    14d4:	b1 04       	cpc	r11, r1
    14d6:	09 f0       	breq	.+2      	; 0x14da <_ZN6IRrecv15decodePanasonicEP14decode_results+0x10a>
    14d8:	b3 cf       	rjmp	.-154    	; 0x1440 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x70>
        } else {
            return ERR;
        }
        offset++;
    }
    results->value = (unsigned long)data;
    14da:	f7 01       	movw	r30, r14
    14dc:	24 83       	std	Z+4, r18	; 0x04
    14de:	35 83       	std	Z+5, r19	; 0x05
    14e0:	46 83       	std	Z+6, r20	; 0x06
    14e2:	57 83       	std	Z+7, r21	; 0x07
    results->panasonicAddress = (unsigned int)(data >> 32);
    14e4:	61 2f       	mov	r22, r17
    14e6:	70 2f       	mov	r23, r16
    14e8:	89 2d       	mov	r24, r9
    14ea:	98 2d       	mov	r25, r8
    14ec:	00 e2       	ldi	r16, 0x20	; 32
    14ee:	0e 94 d6 00 	call	0x1ac	; 0x1ac <__lshrdi3>
    14f2:	f7 01       	movw	r30, r14
    14f4:	22 83       	std	Z+2, r18	; 0x02
    14f6:	33 83       	std	Z+3, r19	; 0x03
    results->decode_type = PANASONIC;
    14f8:	87 e0       	ldi	r24, 0x07	; 7
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	91 83       	std	Z+1, r25	; 0x01
    14fe:	80 83       	st	Z, r24
    results->bits = PANASONIC_BITS;
    1500:	80 e3       	ldi	r24, 0x30	; 48
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	91 87       	std	Z+9, r25	; 0x09
    1506:	80 87       	std	Z+8, r24	; 0x08
    return DECODED;
    1508:	01 e0       	ldi	r16, 0x01	; 1
    150a:	10 e0       	ldi	r17, 0x00	; 0
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	03 c0       	rjmp	.+6      	; 0x1518 <_ZN6IRrecv15decodePanasonicEP14decode_results+0x148>
        if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE)) {
            data = (data << 1) | 1;
        } else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE)) {
            data <<= 1;
        } else {
            return ERR;
    1512:	00 e0       	ldi	r16, 0x00	; 0
    1514:	10 e0       	ldi	r17, 0x00	; 0
    1516:	98 01       	movw	r18, r16
    results->value = (unsigned long)data;
    results->panasonicAddress = (unsigned int)(data >> 32);
    results->decode_type = PANASONIC;
    results->bits = PANASONIC_BITS;
    return DECODED;
}
    1518:	b8 01       	movw	r22, r16
    151a:	c9 01       	movw	r24, r18
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	ff 90       	pop	r15
    152e:	ef 90       	pop	r14
    1530:	df 90       	pop	r13
    1532:	cf 90       	pop	r12
    1534:	bf 90       	pop	r11
    1536:	af 90       	pop	r10
    1538:	9f 90       	pop	r9
    153a:	8f 90       	pop	r8
    153c:	08 95       	ret

0000153e <_ZN6IRrecv9decodeJVCEP14decode_results>:
long IRrecv::decodeJVC(decode_results *results) {
    153e:	8f 92       	push	r8
    1540:	9f 92       	push	r9
    1542:	af 92       	push	r10
    1544:	bf 92       	push	r11
    1546:	cf 92       	push	r12
    1548:	df 92       	push	r13
    154a:	ef 92       	push	r14
    154c:	ff 92       	push	r15
    154e:	0f 93       	push	r16
    1550:	1f 93       	push	r17
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	8b 01       	movw	r16, r22
    long data = 0;
    int offset = 1; // Skip first space
    // Check for repeat
    if (irparams.rawlen - 1 == 33 &&
    1558:	80 91 ef 04 	lds	r24, 0x04EF
    155c:	82 32       	cpi	r24, 0x22	; 34
    155e:	09 f0       	breq	.+2      	; 0x1562 <_ZN6IRrecv9decodeJVCEP14decode_results+0x24>
    1560:	a9 c0       	rjmp	.+338    	; 0x16b4 <_ZN6IRrecv9decodeJVCEP14decode_results+0x176>
        MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) &&
    1562:	db 01       	movw	r26, r22
    1564:	1a 96       	adiw	r26, 0x0a	; 10
    1566:	cd 91       	ld	r28, X+
    1568:	dc 91       	ld	r29, X
    156a:	1b 97       	sbiw	r26, 0x0b	; 11
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	9b 81       	ldd	r25, Y+3	; 0x03
    1570:	68 e5       	ldi	r22, 0x58	; 88
    1572:	72 e0       	ldi	r23, 0x02	; 2
    1574:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
}
long IRrecv::decodeJVC(decode_results *results) {
    long data = 0;
    int offset = 1; // Skip first space
    // Check for repeat
    if (irparams.rawlen - 1 == 33 &&
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	09 f4       	brne	.+2      	; 0x157e <_ZN6IRrecv9decodeJVCEP14decode_results+0x40>
    157c:	9b c0       	rjmp	.+310    	; 0x16b4 <_ZN6IRrecv9decodeJVCEP14decode_results+0x176>
        MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) &&
        MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) {
    157e:	e0 91 ef 04 	lds	r30, 0x04EF
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	31 97       	sbiw	r30, 0x01	; 1
    1586:	ee 0f       	add	r30, r30
    1588:	ff 1f       	adc	r31, r31
    158a:	ec 0f       	add	r30, r28
    158c:	fd 1f       	adc	r31, r29
    158e:	80 81       	ld	r24, Z
    1590:	91 81       	ldd	r25, Z+1	; 0x01
    1592:	68 e5       	ldi	r22, 0x58	; 88
    1594:	72 e0       	ldi	r23, 0x02	; 2
    1596:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
}
long IRrecv::decodeJVC(decode_results *results) {
    long data = 0;
    int offset = 1; // Skip first space
    // Check for repeat
    if (irparams.rawlen - 1 == 33 &&
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	09 f4       	brne	.+2      	; 0x15a0 <_ZN6IRrecv9decodeJVCEP14decode_results+0x62>
    159e:	8a c0       	rjmp	.+276    	; 0x16b4 <_ZN6IRrecv9decodeJVCEP14decode_results+0x176>
        MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) &&
        MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) {
        results->bits = 0;
    15a0:	f8 01       	movw	r30, r16
    15a2:	11 86       	std	Z+9, r1	; 0x09
    15a4:	10 86       	std	Z+8, r1	; 0x08
        results->value = REPEAT;
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	9f ef       	ldi	r25, 0xFF	; 255
    15aa:	dc 01       	movw	r26, r24
    15ac:	84 83       	std	Z+4, r24	; 0x04
    15ae:	95 83       	std	Z+5, r25	; 0x05
    15b0:	a6 83       	std	Z+6, r26	; 0x06
    15b2:	b7 83       	std	Z+7, r27	; 0x07
        results->decode_type = JVC;
    15b4:	88 e0       	ldi	r24, 0x08	; 8
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	80 83       	st	Z, r24
    15bc:	64 c0       	rjmp	.+200    	; 0x1686 <_ZN6IRrecv9decodeJVCEP14decode_results+0x148>
    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], JVC_HDR_MARK)) {
        return ERR;
    }
    offset++; 
    if (irparams.rawlen < 2 * JVC_BITS + 1 ) {
    15be:	80 91 ef 04 	lds	r24, 0x04EF
    15c2:	81 32       	cpi	r24, 0x21	; 33
    15c4:	08 f4       	brcc	.+2      	; 0x15c8 <_ZN6IRrecv9decodeJVCEP14decode_results+0x8a>
    15c6:	64 c0       	rjmp	.+200    	; 0x1690 <_ZN6IRrecv9decodeJVCEP14decode_results+0x152>
        return ERR;
    }
    // Initial space 
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
    15c8:	d5 01       	movw	r26, r10
    15ca:	14 96       	adiw	r26, 0x04	; 4
    15cc:	8d 91       	ld	r24, X+
    15ce:	9c 91       	ld	r25, X
    15d0:	15 97       	sbiw	r26, 0x05	; 5
    15d2:	60 ea       	ldi	r22, 0xA0	; 160
    15d4:	7f e0       	ldi	r23, 0x0F	; 15
    15d6:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	09 f4       	brne	.+2      	; 0x15e0 <_ZN6IRrecv9decodeJVCEP14decode_results+0xa2>
    15de:	58 c0       	rjmp	.+176    	; 0x1690 <_ZN6IRrecv9decodeJVCEP14decode_results+0x152>
    results->panasonicAddress = (unsigned int)(data >> 32);
    results->decode_type = PANASONIC;
    results->bits = PANASONIC_BITS;
    return DECODED;
}
long IRrecv::decodeJVC(decode_results *results) {
    15e0:	e5 01       	movw	r28, r10
    15e2:	26 96       	adiw	r28, 0x06	; 6
    15e4:	33 e0       	ldi	r19, 0x03	; 3
    15e6:	83 2e       	mov	r8, r19
    15e8:	91 2c       	mov	r9, r1
    15ea:	cc 24       	eor	r12, r12
    15ec:	dd 24       	eor	r13, r13
    15ee:	76 01       	movw	r14, r12
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
        return ERR;
    }
    offset++;
    for (int i = 0; i < JVC_BITS; i++) {
        if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) {
    15f0:	88 81       	ld	r24, Y
    15f2:	99 81       	ldd	r25, Y+1	; 0x01
    15f4:	68 e5       	ldi	r22, 0x58	; 88
    15f6:	72 e0       	ldi	r23, 0x02	; 2
    15f8:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	09 f4       	brne	.+2      	; 0x1602 <_ZN6IRrecv9decodeJVCEP14decode_results+0xc4>
    1600:	47 c0       	rjmp	.+142    	; 0x1690 <_ZN6IRrecv9decodeJVCEP14decode_results+0x152>
            return ERR;
        }
        offset++;
        if (MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE)) {
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	9b 81       	ldd	r25, Y+3	; 0x03
    1606:	60 e4       	ldi	r22, 0x40	; 64
    1608:	76 e0       	ldi	r23, 0x06	; 6
    160a:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	69 f0       	breq	.+26     	; 0x162c <_ZN6IRrecv9decodeJVCEP14decode_results+0xee>
            data = (data << 1) | 1;
    1612:	cc 0c       	add	r12, r12
    1614:	dd 1c       	adc	r13, r13
    1616:	ee 1c       	adc	r14, r14
    1618:	ff 1c       	adc	r15, r15
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a0 e0       	ldi	r26, 0x00	; 0
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	c8 2a       	or	r12, r24
    1624:	d9 2a       	or	r13, r25
    1626:	ea 2a       	or	r14, r26
    1628:	fb 2a       	or	r15, r27
    162a:	0c c0       	rjmp	.+24     	; 0x1644 <_ZN6IRrecv9decodeJVCEP14decode_results+0x106>
        } 
        else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE)) {
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	9b 81       	ldd	r25, Y+3	; 0x03
    1630:	66 e2       	ldi	r22, 0x26	; 38
    1632:	72 e0       	ldi	r23, 0x02	; 2
    1634:	0e 94 16 02 	call	0x42c	; 0x42c <_Z11MATCH_SPACEii>
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	51 f1       	breq	.+84     	; 0x1690 <_ZN6IRrecv9decodeJVCEP14decode_results+0x152>
            data <<= 1;
    163c:	cc 0c       	add	r12, r12
    163e:	dd 1c       	adc	r13, r13
    1640:	ee 1c       	adc	r14, r14
    1642:	ff 1c       	adc	r15, r15
        } 
        else {
            return ERR;
        }
        offset++;
    1644:	a2 e0       	ldi	r26, 0x02	; 2
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	8a 0e       	add	r8, r26
    164a:	9b 1e       	adc	r9, r27
    164c:	24 96       	adiw	r28, 0x04	; 4
    // Initial space 
    if (!MATCH_SPACE(results->rawbuf[offset], JVC_HDR_SPACE)) {
        return ERR;
    }
    offset++;
    for (int i = 0; i < JVC_BITS; i++) {
    164e:	b3 e2       	ldi	r27, 0x23	; 35
    1650:	8b 16       	cp	r8, r27
    1652:	91 04       	cpc	r9, r1
    1654:	69 f6       	brne	.-102    	; 0x15f0 <_ZN6IRrecv9decodeJVCEP14decode_results+0xb2>
            return ERR;
        }
        offset++;
    }
    //Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)){
    1656:	f5 01       	movw	r30, r10
    1658:	ea 5b       	subi	r30, 0xBA	; 186
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	80 81       	ld	r24, Z
    165e:	91 81       	ldd	r25, Z+1	; 0x01
    1660:	68 e5       	ldi	r22, 0x58	; 88
    1662:	72 e0       	ldi	r23, 0x02	; 2
    1664:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	91 f0       	breq	.+36     	; 0x1690 <_ZN6IRrecv9decodeJVCEP14decode_results+0x152>
        return ERR;
    }
    // Success
    results->bits = JVC_BITS;
    166c:	80 e1       	ldi	r24, 0x10	; 16
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	f8 01       	movw	r30, r16
    1672:	91 87       	std	Z+9, r25	; 0x09
    1674:	80 87       	std	Z+8, r24	; 0x08
    results->value = data;
    1676:	c4 82       	std	Z+4, r12	; 0x04
    1678:	d5 82       	std	Z+5, r13	; 0x05
    167a:	e6 82       	std	Z+6, r14	; 0x06
    167c:	f7 82       	std	Z+7, r15	; 0x07
    results->decode_type = JVC;
    167e:	88 e0       	ldi	r24, 0x08	; 8
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	80 83       	st	Z, r24
    return DECODED;
    1686:	01 e0       	ldi	r16, 0x01	; 1
    1688:	10 e0       	ldi	r17, 0x00	; 0
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	03 c0       	rjmp	.+6      	; 0x1696 <_ZN6IRrecv9decodeJVCEP14decode_results+0x158>
        results->decode_type = JVC;
        return DECODED;
    } 
    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], JVC_HDR_MARK)) {
        return ERR;
    1690:	00 e0       	ldi	r16, 0x00	; 0
    1692:	10 e0       	ldi	r17, 0x00	; 0
    1694:	98 01       	movw	r18, r16
    // Success
    results->bits = JVC_BITS;
    results->value = data;
    results->decode_type = JVC;
    return DECODED;
}
    1696:	b8 01       	movw	r22, r16
    1698:	c9 01       	movw	r24, r18
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	1f 91       	pop	r17
    16a0:	0f 91       	pop	r16
    16a2:	ff 90       	pop	r15
    16a4:	ef 90       	pop	r14
    16a6:	df 90       	pop	r13
    16a8:	cf 90       	pop	r12
    16aa:	bf 90       	pop	r11
    16ac:	af 90       	pop	r10
    16ae:	9f 90       	pop	r9
    16b0:	8f 90       	pop	r8
    16b2:	08 95       	ret
        results->value = REPEAT;
        results->decode_type = JVC;
        return DECODED;
    } 
    // Initial mark
    if (!MATCH_MARK(results->rawbuf[offset], JVC_HDR_MARK)) {
    16b4:	f8 01       	movw	r30, r16
    16b6:	a2 84       	ldd	r10, Z+10	; 0x0a
    16b8:	b3 84       	ldd	r11, Z+11	; 0x0b
    16ba:	d5 01       	movw	r26, r10
    16bc:	12 96       	adiw	r26, 0x02	; 2
    16be:	8d 91       	ld	r24, X+
    16c0:	9c 91       	ld	r25, X
    16c2:	13 97       	sbiw	r26, 0x03	; 3
    16c4:	60 e4       	ldi	r22, 0x40	; 64
    16c6:	7f e1       	ldi	r23, 0x1F	; 31
    16c8:	0e 94 11 02 	call	0x422	; 0x422 <_Z10MATCH_MARKii>
    16cc:	00 97       	sbiw	r24, 0x00	; 0
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <_ZN6IRrecv9decodeJVCEP14decode_results+0x194>
    16d0:	76 cf       	rjmp	.-276    	; 0x15be <_ZN6IRrecv9decodeJVCEP14decode_results+0x80>
    16d2:	de cf       	rjmp	.-68     	; 0x1690 <_ZN6IRrecv9decodeJVCEP14decode_results+0x152>

000016d4 <_ZN6IRrecv7compareEjj>:
 */

// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
int IRrecv::compare(unsigned int oldval, unsigned int newval) {
    16d4:	8f 92       	push	r8
    16d6:	9f 92       	push	r9
    16d8:	af 92       	push	r10
    16da:	bf 92       	push	r11
    16dc:	cf 92       	push	r12
    16de:	df 92       	push	r13
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	4b 01       	movw	r8, r22
  if (newval < oldval * .8) {
    16e6:	ba 01       	movw	r22, r20
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <__floatunsisf>
    16f0:	6b 01       	movw	r12, r22
    16f2:	7c 01       	movw	r14, r24
    16f4:	b4 01       	movw	r22, r8
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 df 1f 	call	0x3fbe	; 0x3fbe <__floatunsisf>
    16fe:	4b 01       	movw	r8, r22
    1700:	5c 01       	movw	r10, r24
    1702:	2d ec       	ldi	r18, 0xCD	; 205
    1704:	3c ec       	ldi	r19, 0xCC	; 204
    1706:	4c e4       	ldi	r20, 0x4C	; 76
    1708:	5f e3       	ldi	r21, 0x3F	; 63
    170a:	0e 94 91 20 	call	0x4122	; 0x4122 <__mulsf3>
    170e:	9b 01       	movw	r18, r22
    1710:	ac 01       	movw	r20, r24
    1712:	c7 01       	movw	r24, r14
    1714:	b6 01       	movw	r22, r12
    1716:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <__cmpsf2>
    171a:	87 fd       	sbrc	r24, 7
    171c:	17 c0       	rjmp	.+46     	; 0x174c <_ZN6IRrecv7compareEjj+0x78>
    return 0;
  } 
  else if (oldval < newval * .8) {
    171e:	c7 01       	movw	r24, r14
    1720:	b6 01       	movw	r22, r12
    1722:	2d ec       	ldi	r18, 0xCD	; 205
    1724:	3c ec       	ldi	r19, 0xCC	; 204
    1726:	4c e4       	ldi	r20, 0x4C	; 76
    1728:	5f e3       	ldi	r21, 0x3F	; 63
    172a:	0e 94 91 20 	call	0x4122	; 0x4122 <__mulsf3>
    172e:	9b 01       	movw	r18, r22
    1730:	ac 01       	movw	r20, r24
    1732:	c5 01       	movw	r24, r10
    1734:	b4 01       	movw	r22, r8
    1736:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <__cmpsf2>
    return 2;
  } 
  else {
    return 1;
    173a:	99 27       	eor	r25, r25
    173c:	87 fd       	sbrc	r24, 7
    173e:	90 95       	com	r25
    1740:	88 27       	eor	r24, r24
    1742:	99 0f       	add	r25, r25
    1744:	88 1f       	adc	r24, r24
    1746:	99 27       	eor	r25, r25
    1748:	01 96       	adiw	r24, 0x01	; 1
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <_ZN6IRrecv7compareEjj+0x7c>
// Compare two tick values, returning 0 if newval is shorter,
// 1 if newval is equal, and 2 if newval is longer
// Use a tolerance of 20%
int IRrecv::compare(unsigned int oldval, unsigned int newval) {
  if (newval < oldval * .8) {
    return 0;
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	90 e0       	ldi	r25, 0x00	; 0
    return 2;
  } 
  else {
    return 1;
  }
}
    1750:	ff 90       	pop	r15
    1752:	ef 90       	pop	r14
    1754:	df 90       	pop	r13
    1756:	cf 90       	pop	r12
    1758:	bf 90       	pop	r11
    175a:	af 90       	pop	r10
    175c:	9f 90       	pop	r9
    175e:	8f 90       	pop	r8
    1760:	08 95       	ret

00001762 <_ZN6IRrecv10decodeHashEP14decode_results>:

/* Converts the raw code values into a 32-bit hash code.
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
long IRrecv::decodeHash(decode_results *results) {
    1762:	6f 92       	push	r6
    1764:	7f 92       	push	r7
    1766:	8f 92       	push	r8
    1768:	9f 92       	push	r9
    176a:	af 92       	push	r10
    176c:	bf 92       	push	r11
    176e:	cf 92       	push	r12
    1770:	df 92       	push	r13
    1772:	ef 92       	push	r14
    1774:	ff 92       	push	r15
    1776:	0f 93       	push	r16
    1778:	1f 93       	push	r17
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	3c 01       	movw	r6, r24
    1780:	8b 01       	movw	r16, r22
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
    1782:	fb 01       	movw	r30, r22
    1784:	84 84       	ldd	r8, Z+12	; 0x0c
    1786:	95 84       	ldd	r9, Z+13	; 0x0d
    1788:	f6 e0       	ldi	r31, 0x06	; 6
    178a:	8f 16       	cp	r8, r31
    178c:	91 04       	cpc	r9, r1
    178e:	0c f4       	brge	.+2      	; 0x1792 <_ZN6IRrecv10decodeHashEP14decode_results+0x30>
    1790:	47 c0       	rjmp	.+142    	; 0x1820 <_ZN6IRrecv10decodeHashEP14decode_results+0xbe>

/* Converts the raw code values into a 32-bit hash code.
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
long IRrecv::decodeHash(decode_results *results) {
    1792:	88 0c       	add	r8, r8
    1794:	99 1c       	adc	r9, r9
    1796:	c6 e0       	ldi	r28, 0x06	; 6
    1798:	d0 e0       	ldi	r29, 0x00	; 0
    179a:	a5 ec       	ldi	r26, 0xC5	; 197
    179c:	ca 2e       	mov	r12, r26
    179e:	ad e9       	ldi	r26, 0x9D	; 157
    17a0:	da 2e       	mov	r13, r26
    17a2:	ac e1       	ldi	r26, 0x1C	; 28
    17a4:	ea 2e       	mov	r14, r26
    17a6:	a1 e8       	ldi	r26, 0x81	; 129
    17a8:	fa 2e       	mov	r15, r26
    17aa:	25 c0       	rjmp	.+74     	; 0x17f6 <_ZN6IRrecv10decodeHashEP14decode_results+0x94>
  if (results->rawlen < 6) {
    return ERR;
  }
  long hash = FNV_BASIS_32;
  for (int i = 1; i+2 < results->rawlen; i++) {
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
    17ac:	82 85       	ldd	r24, Z+10	; 0x0a
    17ae:	93 85       	ldd	r25, Z+11	; 0x0b

/* Converts the raw code values into a 32-bit hash code.
 * Hopefully this code is unique for each button.
 * This isn't a "real" decoding, just an arbitrary value.
 */
long IRrecv::decodeHash(decode_results *results) {
    17b0:	fe 01       	movw	r30, r28
    17b2:	34 97       	sbiw	r30, 0x04	; 4
  if (results->rawlen < 6) {
    return ERR;
  }
  long hash = FNV_BASIS_32;
  for (int i = 1; i+2 < results->rawlen; i++) {
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
    17b4:	e8 0f       	add	r30, r24
    17b6:	f9 1f       	adc	r31, r25
    17b8:	60 81       	ld	r22, Z
    17ba:	71 81       	ldd	r23, Z+1	; 0x01
    17bc:	fc 01       	movw	r30, r24
    17be:	ec 0f       	add	r30, r28
    17c0:	fd 1f       	adc	r31, r29
    17c2:	40 81       	ld	r20, Z
    17c4:	51 81       	ldd	r21, Z+1	; 0x01
    17c6:	c3 01       	movw	r24, r6
    17c8:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <_ZN6IRrecv7compareEjj>
    17cc:	5c 01       	movw	r10, r24
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
    17ce:	c7 01       	movw	r24, r14
    17d0:	b6 01       	movw	r22, r12
    17d2:	23 e9       	ldi	r18, 0x93	; 147
    17d4:	31 e0       	ldi	r19, 0x01	; 1
    17d6:	40 e0       	ldi	r20, 0x00	; 0
    17d8:	51 e0       	ldi	r21, 0x01	; 1
    17da:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <__mulsi3>
    17de:	dc 01       	movw	r26, r24
    17e0:	cb 01       	movw	r24, r22
    17e2:	65 01       	movw	r12, r10
    17e4:	ee 24       	eor	r14, r14
    17e6:	d7 fc       	sbrc	r13, 7
    17e8:	e0 94       	com	r14
    17ea:	fe 2c       	mov	r15, r14
    17ec:	c8 26       	eor	r12, r24
    17ee:	d9 26       	eor	r13, r25
    17f0:	ea 26       	eor	r14, r26
    17f2:	fb 26       	eor	r15, r27
    17f4:	22 96       	adiw	r28, 0x02	; 2
  if (results->rawlen < 6) {
    return ERR;
  }
  long hash = FNV_BASIS_32;
  for (int i = 1; i+2 < results->rawlen; i++) {
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
    17f6:	f8 01       	movw	r30, r16
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
    return ERR;
  }
  long hash = FNV_BASIS_32;
  for (int i = 1; i+2 < results->rawlen; i++) {
    17f8:	c8 15       	cp	r28, r8
    17fa:	d9 05       	cpc	r29, r9
    17fc:	b9 f6       	brne	.-82     	; 0x17ac <_ZN6IRrecv10decodeHashEP14decode_results+0x4a>
    int value =  compare(results->rawbuf[i], results->rawbuf[i+2]);
    // Add value into the hash
    hash = (hash * FNV_PRIME_32) ^ value;
  }
  results->value = hash;
    17fe:	c4 82       	std	Z+4, r12	; 0x04
    1800:	d5 82       	std	Z+5, r13	; 0x05
    1802:	e6 82       	std	Z+6, r14	; 0x06
    1804:	f7 82       	std	Z+7, r15	; 0x07
  results->bits = 32;
    1806:	80 e2       	ldi	r24, 0x20	; 32
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	91 87       	std	Z+9, r25	; 0x09
    180c:	80 87       	std	Z+8, r24	; 0x08
  results->decode_type = UNKNOWN;
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	9f ef       	ldi	r25, 0xFF	; 255
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
  return DECODED;
    1816:	01 e0       	ldi	r16, 0x01	; 1
    1818:	10 e0       	ldi	r17, 0x00	; 0
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	03 c0       	rjmp	.+6      	; 0x1826 <_ZN6IRrecv10decodeHashEP14decode_results+0xc4>
 * This isn't a "real" decoding, just an arbitrary value.
 */
long IRrecv::decodeHash(decode_results *results) {
  // Require at least 6 samples to prevent triggering on noise
  if (results->rawlen < 6) {
    return ERR;
    1820:	00 e0       	ldi	r16, 0x00	; 0
    1822:	10 e0       	ldi	r17, 0x00	; 0
    1824:	98 01       	movw	r18, r16
  }
  results->value = hash;
  results->bits = 32;
  results->decode_type = UNKNOWN;
  return DECODED;
}
    1826:	b8 01       	movw	r22, r16
    1828:	c9 01       	movw	r24, r18
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	df 90       	pop	r13
    1838:	cf 90       	pop	r12
    183a:	bf 90       	pop	r11
    183c:	af 90       	pop	r10
    183e:	9f 90       	pop	r9
    1840:	8f 90       	pop	r8
    1842:	7f 90       	pop	r7
    1844:	6f 90       	pop	r6
    1846:	08 95       	ret

00001848 <_ZN6IRrecv6decodeEP14decode_results>:
}

// Decodes the received IR message
// Returns 0 if no data ready, 1 if data ready.
// Results of decoding are stored in results
int IRrecv::decode(decode_results *results) {
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	8c 01       	movw	r16, r24
    1852:	eb 01       	movw	r28, r22
  results->rawbuf = irparams.rawbuf;
    1854:	87 ee       	ldi	r24, 0xE7	; 231
    1856:	93 e0       	ldi	r25, 0x03	; 3
    1858:	9b 87       	std	Y+11, r25	; 0x0b
    185a:	8a 87       	std	Y+10, r24	; 0x0a
  results->rawlen = irparams.rawlen;
    185c:	80 91 ef 04 	lds	r24, 0x04EF
    1860:	8c 87       	std	Y+12, r24	; 0x0c
    1862:	1d 86       	std	Y+13, r1	; 0x0d
  if (irparams.rcvstate != STATE_STOP) {
    1864:	80 91 e3 03 	lds	r24, 0x03E3
    1868:	85 30       	cpi	r24, 0x05	; 5
    186a:	09 f0       	breq	.+2      	; 0x186e <_ZN6IRrecv6decodeEP14decode_results+0x26>
    186c:	62 c0       	rjmp	.+196    	; 0x1932 <_ZN6IRrecv6decodeEP14decode_results+0xea>
    return ERR;
  }
#ifdef DEBUG
  Serial.println("Attempting NEC decode");
#endif
  if (decodeNEC(results)) {
    186e:	c8 01       	movw	r24, r16
    1870:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN6IRrecv9decodeNECEP14decode_results>
    1874:	dc 01       	movw	r26, r24
    1876:	cb 01       	movw	r24, r22
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	a1 05       	cpc	r26, r1
    187c:	b1 05       	cpc	r27, r1
    187e:	09 f0       	breq	.+2      	; 0x1882 <_ZN6IRrecv6decodeEP14decode_results+0x3a>
    1880:	5b c0       	rjmp	.+182    	; 0x1938 <_ZN6IRrecv6decodeEP14decode_results+0xf0>
    return DECODED;
  }
#ifdef DEBUG
  Serial.println("Attempting Sony decode");
#endif
  if (decodeSony(results)) {
    1882:	c8 01       	movw	r24, r16
    1884:	be 01       	movw	r22, r28
    1886:	0e 94 b8 05 	call	0xb70	; 0xb70 <_ZN6IRrecv10decodeSonyEP14decode_results>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	a1 05       	cpc	r26, r1
    1892:	b1 05       	cpc	r27, r1
    1894:	09 f0       	breq	.+2      	; 0x1898 <_ZN6IRrecv6decodeEP14decode_results+0x50>
    1896:	50 c0       	rjmp	.+160    	; 0x1938 <_ZN6IRrecv6decodeEP14decode_results+0xf0>
    return DECODED;
  }
#ifdef DEBUG
  Serial.println("Attempting Sanyo decode");
#endif
  if (decodeSanyo(results)) {
    1898:	c8 01       	movw	r24, r16
    189a:	be 01       	movw	r22, r28
    189c:	0e 94 56 06 	call	0xcac	; 0xcac <_ZN6IRrecv11decodeSanyoEP14decode_results>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	00 97       	sbiw	r24, 0x00	; 0
    18a6:	a1 05       	cpc	r26, r1
    18a8:	b1 05       	cpc	r27, r1
    18aa:	09 f0       	breq	.+2      	; 0x18ae <_ZN6IRrecv6decodeEP14decode_results+0x66>
    18ac:	45 c0       	rjmp	.+138    	; 0x1938 <_ZN6IRrecv6decodeEP14decode_results+0xf0>
    return DECODED;
  }
#ifdef DEBUG
  Serial.println("Attempting Mitsubishi decode");
#endif
  if (decodeMitsubishi(results)) {
    18ae:	c8 01       	movw	r24, r16
    18b0:	be 01       	movw	r22, r28
    18b2:	0e 94 fd 06 	call	0xdfa	; 0xdfa <_ZN6IRrecv16decodeMitsubishiEP14decode_results>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	a1 05       	cpc	r26, r1
    18be:	b1 05       	cpc	r27, r1
    18c0:	09 f0       	breq	.+2      	; 0x18c4 <_ZN6IRrecv6decodeEP14decode_results+0x7c>
    18c2:	3a c0       	rjmp	.+116    	; 0x1938 <_ZN6IRrecv6decodeEP14decode_results+0xf0>
    return DECODED;
  }
#ifdef DEBUG
  Serial.println("Attempting RC5 decode");
#endif  
  if (decodeRC5(results)) {
    18c4:	c8 01       	movw	r24, r16
    18c6:	be 01       	movw	r22, r28
    18c8:	0e 94 1e 08 	call	0x103c	; 0x103c <_ZN6IRrecv9decodeRC5EP14decode_results>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	a1 05       	cpc	r26, r1
    18d4:	b1 05       	cpc	r27, r1
    18d6:	81 f5       	brne	.+96     	; 0x1938 <_ZN6IRrecv6decodeEP14decode_results+0xf0>
    return DECODED;
  }
#ifdef DEBUG
  Serial.println("Attempting RC6 decode");
#endif 
  if (decodeRC6(results)) {
    18d8:	c8 01       	movw	r24, r16
    18da:	be 01       	movw	r22, r28
    18dc:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN6IRrecv9decodeRC6EP14decode_results>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	a1 05       	cpc	r26, r1
    18e8:	b1 05       	cpc	r27, r1
    18ea:	31 f5       	brne	.+76     	; 0x1938 <_ZN6IRrecv6decodeEP14decode_results+0xf0>
    return DECODED;
  }
#ifdef DEBUG
    Serial.println("Attempting Panasonic decode");
#endif 
    if (decodePanasonic(results)) {
    18ec:	c8 01       	movw	r24, r16
    18ee:	be 01       	movw	r22, r28
    18f0:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <_ZN6IRrecv15decodePanasonicEP14decode_results>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	a1 05       	cpc	r26, r1
    18fc:	b1 05       	cpc	r27, r1
    18fe:	e1 f4       	brne	.+56     	; 0x1938 <_ZN6IRrecv6decodeEP14decode_results+0xf0>
        return DECODED;
    }
#ifdef DEBUG
    Serial.println("Attempting JVC decode");
#endif 
    if (decodeJVC(results)) {
    1900:	c8 01       	movw	r24, r16
    1902:	be 01       	movw	r22, r28
    1904:	0e 94 9f 0a 	call	0x153e	; 0x153e <_ZN6IRrecv9decodeJVCEP14decode_results>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	00 97       	sbiw	r24, 0x00	; 0
    190e:	a1 05       	cpc	r26, r1
    1910:	b1 05       	cpc	r27, r1
    1912:	91 f4       	brne	.+36     	; 0x1938 <_ZN6IRrecv6decodeEP14decode_results+0xf0>
        return DECODED;
    }
  // decodeHash returns a hash on any input.
  // Thus, it needs to be last in the list.
  // If you add any decodes, add them before this.
  if (decodeHash(results)) {
    1914:	c8 01       	movw	r24, r16
    1916:	be 01       	movw	r22, r28
    1918:	0e 94 b1 0b 	call	0x1762	; 0x1762 <_ZN6IRrecv10decodeHashEP14decode_results>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	a1 05       	cpc	r26, r1
    1924:	b1 05       	cpc	r27, r1
    1926:	41 f4       	brne	.+16     	; 0x1938 <_ZN6IRrecv6decodeEP14decode_results+0xf0>
    }
  }
}

void IRrecv::resume() {
  irparams.rcvstate = STATE_IDLE;
    1928:	82 e0       	ldi	r24, 0x02	; 2
    192a:	80 93 e3 03 	sts	0x03E3, r24
  irparams.rawlen = 0;
    192e:	10 92 ef 04 	sts	0x04EF, r1
// Results of decoding are stored in results
int IRrecv::decode(decode_results *results) {
  results->rawbuf = irparams.rawbuf;
  results->rawlen = irparams.rawlen;
  if (irparams.rcvstate != STATE_STOP) {
    return ERR;
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 c0       	rjmp	.+4      	; 0x193c <_ZN6IRrecv6decodeEP14decode_results+0xf4>
    }
  // decodeHash returns a hash on any input.
  // Thus, it needs to be last in the list.
  // If you add any decodes, add them before this.
  if (decodeHash(results)) {
    return DECODED;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
  }
  // Throw away and start over
  resume();
  return ERR;
}
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	08 95       	ret

00001946 <_ZN8IRSystemC1Ei>:
*  Author: Raaj
*/

#include "IRSystem.h"

IRSystem::IRSystem(int recvpin):irrecv(recvpin){
    1946:	0e 94 45 04 	call	0x88a	; 0x88a <_ZN6IRrecvC1Ei>
	//irrecv.stop();
	//1650,550,350,500
//sendArray[RAW_SIZE]={0};
	//sendArray={33,11,7,10};
}
    194a:	08 95       	ret

0000194c <_ZN8IRSystem18getStringForServerEi>:


String IRSystem::getStringForServer(int keyCode){
    194c:	cf 92       	push	r12
    194e:	df 92       	push	r13
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	cd b7       	in	r28, 0x3d	; 61
    195e:	de b7       	in	r29, 0x3e	; 62
    1960:	ef 97       	sbiw	r28, 0x3f	; 63
    1962:	0f b6       	in	r0, 0x3f	; 63
    1964:	f8 94       	cli
    1966:	de bf       	out	0x3e, r29	; 62
    1968:	0f be       	out	0x3f, r0	; 63
    196a:	cd bf       	out	0x3d, r28	; 61
    196c:	7c 01       	movw	r14, r24
    196e:	6b 01       	movw	r12, r22
    1970:	8a 01       	movw	r16, r20
	if(keyCode==-1) keyCode=KEYCODE_RAW;
    1972:	8f ef       	ldi	r24, 0xFF	; 255
    1974:	4f 3f       	cpi	r20, 0xFF	; 255
    1976:	58 07       	cpc	r21, r24
    1978:	11 f4       	brne	.+4      	; 0x197e <_ZN8IRSystem18getStringForServerEi+0x32>
    197a:	00 e0       	ldi	r16, 0x00	; 0
    197c:	10 e0       	ldi	r17, 0x00	; 0
	String finalString;
    197e:	c7 01       	movw	r24, r14
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	71 e0       	ldi	r23, 0x01	; 1
    1984:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
	boolean done=false;
	switch(keyCode){
    1988:	01 15       	cp	r16, r1
    198a:	11 05       	cpc	r17, r1
    198c:	29 f0       	breq	.+10     	; 0x1998 <_ZN8IRSystem18getStringForServerEi+0x4c>
    198e:	07 30       	cpi	r16, 0x07	; 7
    1990:	11 05       	cpc	r17, r1
    1992:	09 f0       	breq	.+2      	; 0x1996 <_ZN8IRSystem18getStringForServerEi+0x4a>
    1994:	ac c0       	rjmp	.+344    	; 0x1aee <_ZN8IRSystem18getStringForServerEi+0x1a2>
    1996:	58 c0       	rjmp	.+176    	; 0x1a48 <_ZN8IRSystem18getStringForServerEi+0xfc>
		case KEYCODE_RAW:{
			finalString=String(KEYCODE_RAW);
    1998:	ce 01       	movw	r24, r28
    199a:	c9 96       	adiw	r24, 0x39	; 57
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	4a e0       	ldi	r20, 0x0A	; 10
    19a2:	0e 94 1b 2b 	call	0x5636	; 0x5636 <_ZN6StringC1Eih>
    19a6:	c7 01       	movw	r24, r14
    19a8:	be 01       	movw	r22, r28
    19aa:	67 5c       	subi	r22, 0xC7	; 199
    19ac:	7f 4f       	sbci	r23, 0xFF	; 255
    19ae:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN6StringaSERKS_>
    19b2:	ce 01       	movw	r24, r28
    19b4:	c9 96       	adiw	r24, 0x39	; 57
    19b6:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    19ba:	c7 01       	movw	r24, r14
    19bc:	61 e0       	ldi	r22, 0x01	; 1
    19be:	71 e0       	ldi	r23, 0x01	; 1
    19c0:	0e 94 ee 29 	call	0x53dc	; 0x53dc <_ZN6String6concatEPKc>
			finalString+="-";
			finalString+=String((char)(results.rawlen+33));
    19c4:	d6 01       	movw	r26, r12
    19c6:	1e 96       	adiw	r26, 0x0e	; 14
    19c8:	6c 91       	ld	r22, X
    19ca:	6f 5d       	subi	r22, 0xDF	; 223
    19cc:	ce 01       	movw	r24, r28
    19ce:	c2 96       	adiw	r24, 0x32	; 50
    19d0:	0e 94 4c 2b 	call	0x5698	; 0x5698 <_ZN6StringC1Ec>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    19d4:	c7 01       	movw	r24, r14
    19d6:	be 01       	movw	r22, r28
    19d8:	6e 5c       	subi	r22, 0xCE	; 206
    19da:	7f 4f       	sbci	r23, 0xFF	; 255
    19dc:	0e 94 fe 29 	call	0x53fc	; 0x53fc <_ZN6String6concatERKS_>
    19e0:	ce 01       	movw	r24, r28
    19e2:	c2 96       	adiw	r24, 0x32	; 50
    19e4:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    19e8:	c7 01       	movw	r24, r14
    19ea:	61 e0       	ldi	r22, 0x01	; 1
    19ec:	71 e0       	ldi	r23, 0x01	; 1
    19ee:	0e 94 ee 29 	call	0x53dc	; 0x53dc <_ZN6String6concatEPKc>
			finalString+="-";
			for(int i=0;i<results.rawlen;i++){
    19f2:	00 e0       	ldi	r16, 0x00	; 0
    19f4:	10 e0       	ldi	r17, 0x00	; 0
    19f6:	1d c0       	rjmp	.+58     	; 0x1a32 <_ZN8IRSystem18getStringForServerEi+0xe6>
//sendArray[RAW_SIZE]={0};
	//sendArray={33,11,7,10};
}


String IRSystem::getStringForServer(int keyCode){
    19f8:	c8 01       	movw	r24, r16
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
			finalString=String(KEYCODE_RAW);
			finalString+="-";
			finalString+=String((char)(results.rawlen+33));
			finalString+="-";
			for(int i=0;i<results.rawlen;i++){
				char x=(char)(results.rawbuf[i]+33);
    19fe:	d6 01       	movw	r26, r12
    1a00:	1c 96       	adiw	r26, 0x0c	; 12
    1a02:	ed 91       	ld	r30, X+
    1a04:	fc 91       	ld	r31, X
    1a06:	1d 97       	sbiw	r26, 0x0d	; 13
    1a08:	e8 0f       	add	r30, r24
    1a0a:	f9 1f       	adc	r31, r25
    1a0c:	60 81       	ld	r22, Z
    1a0e:	71 81       	ldd	r23, Z+1	; 0x01
    1a10:	6f 5d       	subi	r22, 0xDF	; 223
				finalString+=String(x);
    1a12:	ce 01       	movw	r24, r28
    1a14:	8b 96       	adiw	r24, 0x2b	; 43
    1a16:	0e 94 4c 2b 	call	0x5698	; 0x5698 <_ZN6StringC1Ec>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1a1a:	c7 01       	movw	r24, r14
    1a1c:	be 01       	movw	r22, r28
    1a1e:	65 5d       	subi	r22, 0xD5	; 213
    1a20:	7f 4f       	sbci	r23, 0xFF	; 255
    1a22:	0e 94 fe 29 	call	0x53fc	; 0x53fc <_ZN6String6concatERKS_>
    1a26:	ce 01       	movw	r24, r28
    1a28:	8b 96       	adiw	r24, 0x2b	; 43
    1a2a:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
		case KEYCODE_RAW:{
			finalString=String(KEYCODE_RAW);
			finalString+="-";
			finalString+=String((char)(results.rawlen+33));
			finalString+="-";
			for(int i=0;i<results.rawlen;i++){
    1a2e:	0f 5f       	subi	r16, 0xFF	; 255
    1a30:	1f 4f       	sbci	r17, 0xFF	; 255
    1a32:	f6 01       	movw	r30, r12
    1a34:	86 85       	ldd	r24, Z+14	; 0x0e
    1a36:	97 85       	ldd	r25, Z+15	; 0x0f
    1a38:	08 17       	cp	r16, r24
    1a3a:	19 07       	cpc	r17, r25
    1a3c:	ec f2       	brlt	.-70     	; 0x19f8 <_ZN8IRSystem18getStringForServerEi+0xac>
				char x=(char)(results.rawbuf[i]+33);
				finalString+=String(x);
			}
			Serial.println("RAW");
    1a3e:	8b e1       	ldi	r24, 0x1B	; 27
    1a40:	96 e0       	ldi	r25, 0x06	; 6
    1a42:	63 e0       	ldi	r22, 0x03	; 3
    1a44:	71 e0       	ldi	r23, 0x01	; 1
    1a46:	99 c0       	rjmp	.+306    	; 0x1b7a <_ZN8IRSystem18getStringForServerEi+0x22e>
			done=true;
			break;
		}
		
		case PANASONIC:{
			Serial.println(results.panasonicAddress,DEC);
    1a48:	d6 01       	movw	r26, r12
    1a4a:	14 96       	adiw	r26, 0x04	; 4
    1a4c:	6d 91       	ld	r22, X+
    1a4e:	7c 91       	ld	r23, X
    1a50:	15 97       	sbiw	r26, 0x05	; 5
    1a52:	8b e1       	ldi	r24, 0x1B	; 27
    1a54:	96 e0       	ldi	r25, 0x06	; 6
    1a56:	4a e0       	ldi	r20, 0x0A	; 10
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	0e 94 46 26 	call	0x4c8c	; 0x4c8c <_ZN5Print7printlnEji>
			finalString=String(PANASONIC);
    1a5e:	ce 01       	movw	r24, r28
    1a60:	84 96       	adiw	r24, 0x24	; 36
    1a62:	67 e0       	ldi	r22, 0x07	; 7
    1a64:	70 e0       	ldi	r23, 0x00	; 0
    1a66:	4a e0       	ldi	r20, 0x0A	; 10
    1a68:	0e 94 1b 2b 	call	0x5636	; 0x5636 <_ZN6StringC1Eih>
    1a6c:	c7 01       	movw	r24, r14
    1a6e:	be 01       	movw	r22, r28
    1a70:	6c 5d       	subi	r22, 0xDC	; 220
    1a72:	7f 4f       	sbci	r23, 0xFF	; 255
    1a74:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN6StringaSERKS_>
    1a78:	ce 01       	movw	r24, r28
    1a7a:	84 96       	adiw	r24, 0x24	; 36
    1a7c:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    1a80:	c7 01       	movw	r24, r14
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	71 e0       	ldi	r23, 0x01	; 1
    1a86:	0e 94 ee 29 	call	0x53dc	; 0x53dc <_ZN6String6concatEPKc>
			finalString+="-";
			finalString+=String(results.panasonicAddress,DEC);
    1a8a:	f6 01       	movw	r30, r12
    1a8c:	64 81       	ldd	r22, Z+4	; 0x04
    1a8e:	75 81       	ldd	r23, Z+5	; 0x05
    1a90:	ce 01       	movw	r24, r28
    1a92:	4d 96       	adiw	r24, 0x1d	; 29
    1a94:	4a e0       	ldi	r20, 0x0A	; 10
    1a96:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <_ZN6StringC1Ejh>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1a9a:	c7 01       	movw	r24, r14
    1a9c:	be 01       	movw	r22, r28
    1a9e:	63 5e       	subi	r22, 0xE3	; 227
    1aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa2:	0e 94 fe 29 	call	0x53fc	; 0x53fc <_ZN6String6concatERKS_>
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	4d 96       	adiw	r24, 0x1d	; 29
    1aaa:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    1aae:	c7 01       	movw	r24, r14
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	71 e0       	ldi	r23, 0x01	; 1
    1ab4:	0e 94 ee 29 	call	0x53dc	; 0x53dc <_ZN6String6concatEPKc>
			finalString+="-";
			finalString+=String(results.value,DEC);
    1ab8:	d6 01       	movw	r26, r12
    1aba:	16 96       	adiw	r26, 0x06	; 6
    1abc:	4d 91       	ld	r20, X+
    1abe:	5d 91       	ld	r21, X+
    1ac0:	6d 91       	ld	r22, X+
    1ac2:	7c 91       	ld	r23, X
    1ac4:	19 97       	sbiw	r26, 0x09	; 9
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	46 96       	adiw	r24, 0x16	; 22
    1aca:	2a e0       	ldi	r18, 0x0A	; 10
    1acc:	0e 94 b8 2a 	call	0x5570	; 0x5570 <_ZN6StringC1Emh>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1ad0:	c7 01       	movw	r24, r14
    1ad2:	be 01       	movw	r22, r28
    1ad4:	6a 5e       	subi	r22, 0xEA	; 234
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	0e 94 fe 29 	call	0x53fc	; 0x53fc <_ZN6String6concatERKS_>
    1adc:	ce 01       	movw	r24, r28
    1ade:	46 96       	adiw	r24, 0x16	; 22
    1ae0:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
			Serial.println("PANASONIC");
    1ae4:	8b e1       	ldi	r24, 0x1B	; 27
    1ae6:	96 e0       	ldi	r25, 0x06	; 6
    1ae8:	67 e0       	ldi	r22, 0x07	; 7
    1aea:	71 e0       	ldi	r23, 0x01	; 1
    1aec:	46 c0       	rjmp	.+140    	; 0x1b7a <_ZN8IRSystem18getStringForServerEi+0x22e>
			break;
		}	
	}
	
	if(!done){
	finalString=String(keyCode);
    1aee:	ce 01       	movw	r24, r28
    1af0:	0f 96       	adiw	r24, 0x0f	; 15
    1af2:	b8 01       	movw	r22, r16
    1af4:	4a e0       	ldi	r20, 0x0A	; 10
    1af6:	0e 94 1b 2b 	call	0x5636	; 0x5636 <_ZN6StringC1Eih>
    1afa:	c7 01       	movw	r24, r14
    1afc:	be 01       	movw	r22, r28
    1afe:	61 5f       	subi	r22, 0xF1	; 241
    1b00:	7f 4f       	sbci	r23, 0xFF	; 255
    1b02:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN6StringaSERKS_>
    1b06:	ce 01       	movw	r24, r28
    1b08:	0f 96       	adiw	r24, 0x0f	; 15
    1b0a:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    1b0e:	c7 01       	movw	r24, r14
    1b10:	61 e0       	ldi	r22, 0x01	; 1
    1b12:	71 e0       	ldi	r23, 0x01	; 1
    1b14:	0e 94 ee 29 	call	0x53dc	; 0x53dc <_ZN6String6concatEPKc>
	finalString+="-";
	finalString+=String(results.bits,DEC);
    1b18:	f6 01       	movw	r30, r12
    1b1a:	62 85       	ldd	r22, Z+10	; 0x0a
    1b1c:	73 85       	ldd	r23, Z+11	; 0x0b
    1b1e:	ce 01       	movw	r24, r28
    1b20:	08 96       	adiw	r24, 0x08	; 8
    1b22:	4a e0       	ldi	r20, 0x0A	; 10
    1b24:	0e 94 1b 2b 	call	0x5636	; 0x5636 <_ZN6StringC1Eih>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1b28:	c7 01       	movw	r24, r14
    1b2a:	be 01       	movw	r22, r28
    1b2c:	68 5f       	subi	r22, 0xF8	; 248
    1b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b30:	0e 94 fe 29 	call	0x53fc	; 0x53fc <_ZN6String6concatERKS_>
    1b34:	ce 01       	movw	r24, r28
    1b36:	08 96       	adiw	r24, 0x08	; 8
    1b38:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    1b3c:	c7 01       	movw	r24, r14
    1b3e:	61 e0       	ldi	r22, 0x01	; 1
    1b40:	71 e0       	ldi	r23, 0x01	; 1
    1b42:	0e 94 ee 29 	call	0x53dc	; 0x53dc <_ZN6String6concatEPKc>
	finalString+="-";
	finalString+=String(results.value,DEC);
    1b46:	d6 01       	movw	r26, r12
    1b48:	16 96       	adiw	r26, 0x06	; 6
    1b4a:	4d 91       	ld	r20, X+
    1b4c:	5d 91       	ld	r21, X+
    1b4e:	6d 91       	ld	r22, X+
    1b50:	7c 91       	ld	r23, X
    1b52:	19 97       	sbiw	r26, 0x09	; 9
    1b54:	ce 01       	movw	r24, r28
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	2a e0       	ldi	r18, 0x0A	; 10
    1b5a:	0e 94 b8 2a 	call	0x5570	; 0x5570 <_ZN6StringC1Emh>
	unsigned char concat(long num);
	unsigned char concat(unsigned long num);
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    1b5e:	c7 01       	movw	r24, r14
    1b60:	be 01       	movw	r22, r28
    1b62:	6f 5f       	subi	r22, 0xFF	; 255
    1b64:	7f 4f       	sbci	r23, 0xFF	; 255
    1b66:	0e 94 fe 29 	call	0x53fc	; 0x53fc <_ZN6String6concatERKS_>
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	01 96       	adiw	r24, 0x01	; 1
    1b6e:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
	Serial.println("OTHER VALID");
    1b72:	8b e1       	ldi	r24, 0x1B	; 27
    1b74:	96 e0       	ldi	r25, 0x06	; 6
    1b76:	61 e1       	ldi	r22, 0x11	; 17
    1b78:	71 e0       	ldi	r23, 0x01	; 1
    1b7a:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
	}	
	
	return finalString;
}
    1b7e:	c7 01       	movw	r24, r14
    1b80:	ef 96       	adiw	r28, 0x3f	; 63
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	ef 90       	pop	r14
    1b98:	df 90       	pop	r13
    1b9a:	cf 90       	pop	r12
    1b9c:	08 95       	ret

00001b9e <_ZN8IRSystem23processAndExecuteStringER6String>:

//0-3-550/350/500
void IRSystem::processAndExecuteString(String& fromServer){
    1b9e:	2f 92       	push	r2
    1ba0:	3f 92       	push	r3
    1ba2:	4f 92       	push	r4
    1ba4:	5f 92       	push	r5
    1ba6:	6f 92       	push	r6
    1ba8:	7f 92       	push	r7
    1baa:	8f 92       	push	r8
    1bac:	9f 92       	push	r9
    1bae:	af 92       	push	r10
    1bb0:	bf 92       	push	r11
    1bb2:	df 92       	push	r13
    1bb4:	ef 92       	push	r14
    1bb6:	ff 92       	push	r15
    1bb8:	0f 93       	push	r16
    1bba:	1f 93       	push	r17
    1bbc:	cf 93       	push	r28
    1bbe:	df 93       	push	r29
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	c6 51       	subi	r28, 0x16	; 22
    1bc6:	d1 40       	sbci	r29, 0x01	; 1
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	1c 01       	movw	r2, r24
    1bd4:	3b 01       	movw	r6, r22
	byte keyCode=fromServer[0]-'0';
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	70 e0       	ldi	r23, 0x00	; 0
    1bdc:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <_ZN6StringixEj>
    1be0:	dc 01       	movw	r26, r24
    1be2:	fc 90       	ld	r15, X
    1be4:	b0 ed       	ldi	r27, 0xD0	; 208
    1be6:	fb 0e       	add	r15, r27
	Serial.println(keyCode,DEC);
    1be8:	8b e1       	ldi	r24, 0x1B	; 27
    1bea:	96 e0       	ldi	r25, 0x06	; 6
    1bec:	6f 2d       	mov	r22, r15
    1bee:	4a e0       	ldi	r20, 0x0A	; 10
    1bf0:	50 e0       	ldi	r21, 0x00	; 0
    1bf2:	0e 94 75 26 	call	0x4cea	; 0x4cea <_ZN5Print7printlnEhi>

	//- is 45
	if(keyCode==KEYCODE_RAW){
    1bf6:	ff 20       	and	r15, r15
    1bf8:	09 f0       	breq	.+2      	; 0x1bfc <_ZN8IRSystem23processAndExecuteStringER6String+0x5e>
    1bfa:	8c c0       	rjmp	.+280    	; 0x1d14 <_ZN8IRSystem23processAndExecuteStringER6String+0x176>
		
		byte numLoops=3;
		char loopChar=fromServer[1];
    1bfc:	c3 01       	movw	r24, r6
    1bfe:	61 e0       	ldi	r22, 0x01	; 1
    1c00:	70 e0       	ldi	r23, 0x00	; 0
    1c02:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <_ZN6StringixEj>
		if(loopChar!='-')
    1c06:	fc 01       	movw	r30, r24
    1c08:	80 81       	ld	r24, Z
    1c0a:	8d 32       	cpi	r24, 0x2D	; 45
    1c0c:	51 f0       	breq	.+20     	; 0x1c22 <_ZN8IRSystem23processAndExecuteStringER6String+0x84>
			numLoops=(byte)(fromServer[1]-33);
    1c0e:	c3 01       	movw	r24, r6
    1c10:	61 e0       	ldi	r22, 0x01	; 1
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <_ZN6StringixEj>
    1c18:	dc 01       	movw	r26, r24
    1c1a:	dc 90       	ld	r13, X
    1c1c:	bf ed       	ldi	r27, 0xDF	; 223
    1c1e:	db 0e       	add	r13, r27
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <_ZN8IRSystem23processAndExecuteStringER6String+0x88>
	Serial.println(keyCode,DEC);

	//- is 45
	if(keyCode==KEYCODE_RAW){
		
		byte numLoops=3;
    1c22:	b3 e0       	ldi	r27, 0x03	; 3
    1c24:	db 2e       	mov	r13, r27
		char loopChar=fromServer[1];
		if(loopChar!='-')
			numLoops=(byte)(fromServer[1]-33);
			
		byte dataCount=((byte)(fromServer[2])-33);
    1c26:	c3 01       	movw	r24, r6
    1c28:	62 e0       	ldi	r22, 0x02	; 2
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <_ZN6StringixEj>
    1c30:	fc 01       	movw	r30, r24
    1c32:	10 81       	ld	r17, Z
    1c34:	11 52       	subi	r17, 0x21	; 33
		Serial.println(dataCount,DEC);
    1c36:	8b e1       	ldi	r24, 0x1B	; 27
    1c38:	96 e0       	ldi	r25, 0x06	; 6
    1c3a:	61 2f       	mov	r22, r17
    1c3c:	4a e0       	ldi	r20, 0x0A	; 10
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
    1c40:	0e 94 75 26 	call	0x4cea	; 0x4cea <_ZN5Print7printlnEhi>
		Serial.println(numLoops,DEC);
    1c44:	8b e1       	ldi	r24, 0x1B	; 27
    1c46:	96 e0       	ldi	r25, 0x06	; 6
    1c48:	6d 2d       	mov	r22, r13
    1c4a:	4a e0       	ldi	r20, 0x0A	; 10
    1c4c:	50 e0       	ldi	r21, 0x00	; 0
    1c4e:	0e 94 75 26 	call	0x4cea	; 0x4cea <_ZN5Print7printlnEhi>
		
		//unsigned int *sendArray = new unsigned int[RAW_SIZE];
		unsigned int sendArray[RAW_SIZE]={0};
    1c52:	fe 01       	movw	r30, r28
    1c54:	3f 96       	adiw	r30, 0x0f	; 15
    1c56:	88 e0       	ldi	r24, 0x08	; 8
    1c58:	91 e0       	ldi	r25, 0x01	; 1
    1c5a:	df 01       	movw	r26, r30
    1c5c:	9c 01       	movw	r18, r24
    1c5e:	1d 92       	st	X+, r1
    1c60:	21 50       	subi	r18, 0x01	; 1
    1c62:	30 40       	sbci	r19, 0x00	; 0
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <_ZN8IRSystem23processAndExecuteStringER6String+0xc0>
			
		for(byte i=5;i<(dataCount+4);i++){
    1c66:	05 e0       	ldi	r16, 0x05	; 5
    1c68:	41 2e       	mov	r4, r17
    1c6a:	55 24       	eor	r5, r5
    1c6c:	63 e0       	ldi	r22, 0x03	; 3
    1c6e:	86 2e       	mov	r8, r22
    1c70:	91 2c       	mov	r9, r1
    1c72:	84 0c       	add	r8, r4
    1c74:	95 1c       	adc	r9, r5
			char charInt=fromServer[i];
			Serial.print(charInt);
			int analogVal=(int)charInt-33;
			sendArray[i-5]=analogVal*USECPERTICK;
    1c76:	a2 e3       	ldi	r26, 0x32	; 50
    1c78:	aa 2e       	mov	r10, r26
    1c7a:	b1 2c       	mov	r11, r1
		Serial.println(numLoops,DEC);
		
		//unsigned int *sendArray = new unsigned int[RAW_SIZE];
		unsigned int sendArray[RAW_SIZE]={0};
			
		for(byte i=5;i<(dataCount+4);i++){
    1c7c:	23 c0       	rjmp	.+70     	; 0x1cc4 <_ZN8IRSystem23processAndExecuteStringER6String+0x126>
			char charInt=fromServer[i];
    1c7e:	c3 01       	movw	r24, r6
    1c80:	60 2f       	mov	r22, r16
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <_ZN6StringixEj>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	1c 91       	ld	r17, X
			Serial.print(charInt);
    1c8c:	8b e1       	ldi	r24, 0x1B	; 27
    1c8e:	96 e0       	ldi	r25, 0x06	; 6
    1c90:	61 2f       	mov	r22, r17
    1c92:	0e 94 83 25 	call	0x4b06	; 0x4b06 <_ZN5Print5printEc>
			int analogVal=(int)charInt-33;
			sendArray[i-5]=analogVal*USECPERTICK;
    1c96:	f7 01       	movw	r30, r14
    1c98:	35 97       	sbiw	r30, 0x05	; 5
    1c9a:	ee 0f       	add	r30, r30
    1c9c:	ff 1f       	adc	r31, r31
    1c9e:	21 e0       	ldi	r18, 0x01	; 1
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	2c 0f       	add	r18, r28
    1ca4:	3d 1f       	adc	r19, r29
    1ca6:	e2 0f       	add	r30, r18
    1ca8:	f3 1f       	adc	r31, r19
		unsigned int sendArray[RAW_SIZE]={0};
			
		for(byte i=5;i<(dataCount+4);i++){
			char charInt=fromServer[i];
			Serial.print(charInt);
			int analogVal=(int)charInt-33;
    1caa:	81 2f       	mov	r24, r17
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	81 97       	sbiw	r24, 0x21	; 33
			sendArray[i-5]=analogVal*USECPERTICK;
    1cb0:	8a 9d       	mul	r24, r10
    1cb2:	90 01       	movw	r18, r0
    1cb4:	8b 9d       	mul	r24, r11
    1cb6:	30 0d       	add	r19, r0
    1cb8:	9a 9d       	mul	r25, r10
    1cba:	30 0d       	add	r19, r0
    1cbc:	11 24       	eor	r1, r1
    1cbe:	37 87       	std	Z+15, r19	; 0x0f
    1cc0:	26 87       	std	Z+14, r18	; 0x0e
		Serial.println(numLoops,DEC);
		
		//unsigned int *sendArray = new unsigned int[RAW_SIZE];
		unsigned int sendArray[RAW_SIZE]={0};
			
		for(byte i=5;i<(dataCount+4);i++){
    1cc2:	0f 5f       	subi	r16, 0xFF	; 255
    1cc4:	e0 2e       	mov	r14, r16
    1cc6:	ff 24       	eor	r15, r15
    1cc8:	8e 14       	cp	r8, r14
    1cca:	9f 04       	cpc	r9, r15
    1ccc:	c4 f6       	brge	.-80     	; 0x1c7e <_ZN8IRSystem23processAndExecuteStringER6String+0xe0>
			char charInt=fromServer[i];
			Serial.print(charInt);
			int analogVal=(int)charInt-33;
			sendArray[i-5]=analogVal*USECPERTICK;
		}
		Serial.println("END");
    1cce:	8b e1       	ldi	r24, 0x1B	; 27
    1cd0:	96 e0       	ldi	r25, 0x06	; 6
    1cd2:	6d e1       	ldi	r22, 0x1D	; 29
    1cd4:	71 e0       	ldi	r23, 0x01	; 1
    1cd6:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
		
		for(byte i=0;i<numLoops;i++){
    1cda:	10 e0       	ldi	r17, 0x00	; 0
			irsend.sendRaw(sendArray,dataCount-1,38);
    1cdc:	41 01       	movw	r8, r2
    1cde:	08 94       	sec
    1ce0:	81 1c       	adc	r8, r1
    1ce2:	91 1c       	adc	r9, r1
    1ce4:	72 01       	movw	r14, r4
    1ce6:	08 94       	sec
    1ce8:	e1 08       	sbc	r14, r1
    1cea:	f1 08       	sbc	r15, r1
			int analogVal=(int)charInt-33;
			sendArray[i-5]=analogVal*USECPERTICK;
		}
		Serial.println("END");
		
		for(byte i=0;i<numLoops;i++){
    1cec:	10 c0       	rjmp	.+32     	; 0x1d0e <_ZN8IRSystem23processAndExecuteStringER6String+0x170>
			irsend.sendRaw(sendArray,dataCount-1,38);
    1cee:	c4 01       	movw	r24, r8
    1cf0:	be 01       	movw	r22, r28
    1cf2:	61 5f       	subi	r22, 0xF1	; 241
    1cf4:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf6:	a7 01       	movw	r20, r14
    1cf8:	26 e2       	ldi	r18, 0x26	; 38
    1cfa:	30 e0       	ldi	r19, 0x00	; 0
    1cfc:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <_ZN6IRsend7sendRawEPjii>
			delay(200);
    1d00:	68 ec       	ldi	r22, 0xC8	; 200
    1d02:	70 e0       	ldi	r23, 0x00	; 0
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
			int analogVal=(int)charInt-33;
			sendArray[i-5]=analogVal*USECPERTICK;
		}
		Serial.println("END");
		
		for(byte i=0;i<numLoops;i++){
    1d0c:	1f 5f       	subi	r17, 0xFF	; 255
    1d0e:	1d 15       	cp	r17, r13
    1d10:	71 f7       	brne	.-36     	; 0x1cee <_ZN8IRSystem23processAndExecuteStringER6String+0x150>
    1d12:	bf c0       	rjmp	.+382    	; 0x1e92 <_ZN8IRSystem23processAndExecuteStringER6String+0x2f4>
		}	
		
		//delete [] sendArray;
		
	}else{
		Serial.println(freeMemory());
    1d14:	0e 94 ed 10 	call	0x21da	; 0x21da <freeMemory>
    1d18:	bc 01       	movw	r22, r24
    1d1a:	8b e1       	ldi	r24, 0x1B	; 27
    1d1c:	96 e0       	ldi	r25, 0x06	; 6
    1d1e:	4a e0       	ldi	r20, 0x0A	; 10
    1d20:	50 e0       	ldi	r21, 0x00	; 0
    1d22:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN5Print7printlnEii>
		byte loc;
		for(byte i=2;i<fromServer.length();i++){
    1d26:	12 e0       	ldi	r17, 0x02	; 2
    1d28:	08 c0       	rjmp	.+16     	; 0x1d3a <_ZN8IRSystem23processAndExecuteStringER6String+0x19c>
			if(fromServer[i]=='-'){
    1d2a:	c3 01       	movw	r24, r6
    1d2c:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <_ZN6StringixEj>
    1d30:	dc 01       	movw	r26, r24
    1d32:	8c 91       	ld	r24, X
    1d34:	8d 32       	cpi	r24, 0x2D	; 45
    1d36:	51 f0       	breq	.+20     	; 0x1d4c <_ZN8IRSystem23processAndExecuteStringER6String+0x1ae>
		//delete [] sendArray;
		
	}else{
		Serial.println(freeMemory());
		byte loc;
		for(byte i=2;i<fromServer.length();i++){
    1d38:	1f 5f       	subi	r17, 0xFF	; 255
    1d3a:	61 2f       	mov	r22, r17
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	f3 01       	movw	r30, r6
    1d40:	84 81       	ldd	r24, Z+4	; 0x04
    1d42:	95 81       	ldd	r25, Z+5	; 0x05
    1d44:	68 17       	cp	r22, r24
    1d46:	79 07       	cpc	r23, r25
    1d48:	80 f3       	brcs	.-32     	; 0x1d2a <_ZN8IRSystem23processAndExecuteStringER6String+0x18c>
    1d4a:	01 c0       	rjmp	.+2      	; 0x1d4e <_ZN8IRSystem23processAndExecuteStringER6String+0x1b0>
			if(fromServer[i]=='-'){
    1d4c:	01 2f       	mov	r16, r17
				loc=i;
				break;
			}
		}
		
		int bits=fromServer.substring(2,loc).toInt();
    1d4e:	ce 01       	movw	r24, r28
    1d50:	08 96       	adiw	r24, 0x08	; 8
    1d52:	b3 01       	movw	r22, r6
    1d54:	42 e0       	ldi	r20, 0x02	; 2
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	20 2f       	mov	r18, r16
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	0e 94 65 2b 	call	0x56ca	; 0x56ca <_ZNK6String9substringEjj>
    1d60:	ce 01       	movw	r24, r28
    1d62:	08 96       	adiw	r24, 0x08	; 8
    1d64:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZNK6String5toIntEv>
    1d68:	4b 01       	movw	r8, r22
    1d6a:	5c 01       	movw	r10, r24
    1d6c:	ce 01       	movw	r24, r28
    1d6e:	08 96       	adiw	r24, 0x08	; 8
    1d70:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
		unsigned long val=fromServer.substring(loc+1,fromServer.length()).toInt();
    1d74:	40 2f       	mov	r20, r16
    1d76:	50 e0       	ldi	r21, 0x00	; 0
    1d78:	4f 5f       	subi	r20, 0xFF	; 255
    1d7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7c:	d3 01       	movw	r26, r6
    1d7e:	14 96       	adiw	r26, 0x04	; 4
    1d80:	2d 91       	ld	r18, X+
    1d82:	3c 91       	ld	r19, X
    1d84:	15 97       	sbiw	r26, 0x05	; 5
    1d86:	ce 01       	movw	r24, r28
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	b3 01       	movw	r22, r6
    1d8c:	0e 94 65 2b 	call	0x56ca	; 0x56ca <_ZNK6String9substringEjj>
    1d90:	ce 01       	movw	r24, r28
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZNK6String5toIntEv>
    1d98:	16 2f       	mov	r17, r22
    1d9a:	07 2f       	mov	r16, r23
    1d9c:	e8 2e       	mov	r14, r24
    1d9e:	d9 2e       	mov	r13, r25
    1da0:	ce 01       	movw	r24, r28
    1da2:	01 96       	adiw	r24, 0x01	; 1
    1da4:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
		
		//int bits=getValue(fromServer,'-',1).toInt();
		//unsigned long val=getValue(fromServer,'-',2).toInt();
		Serial.println(bits,DEC);
    1da8:	8b e1       	ldi	r24, 0x1B	; 27
    1daa:	96 e0       	ldi	r25, 0x06	; 6
    1dac:	b4 01       	movw	r22, r8
    1dae:	4a e0       	ldi	r20, 0x0A	; 10
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN5Print7printlnEii>
		Serial.println(val,DEC);
    1db6:	8b e1       	ldi	r24, 0x1B	; 27
    1db8:	96 e0       	ldi	r25, 0x06	; 6
    1dba:	41 2f       	mov	r20, r17
    1dbc:	50 2f       	mov	r21, r16
    1dbe:	6e 2d       	mov	r22, r14
    1dc0:	7d 2d       	mov	r23, r13
    1dc2:	2a e0       	ldi	r18, 0x0A	; 10
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	0e 94 32 26 	call	0x4c64	; 0x4c64 <_ZN5Print7printlnEmi>
		
		if(keyCode==NEC){
    1dca:	b1 e0       	ldi	r27, 0x01	; 1
    1dcc:	fb 16       	cp	r15, r27
    1dce:	81 f4       	brne	.+32     	; 0x1df0 <_ZN8IRSystem23processAndExecuteStringER6String+0x252>
			Serial.println("NEC");
    1dd0:	8b e1       	ldi	r24, 0x1B	; 27
    1dd2:	96 e0       	ldi	r25, 0x06	; 6
    1dd4:	61 e2       	ldi	r22, 0x21	; 33
    1dd6:	71 e0       	ldi	r23, 0x01	; 1
    1dd8:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
			irsend.sendNEC(val,bits);
    1ddc:	c1 01       	movw	r24, r2
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	41 2f       	mov	r20, r17
    1de2:	50 2f       	mov	r21, r16
    1de4:	6e 2d       	mov	r22, r14
    1de6:	7d 2d       	mov	r23, r13
    1de8:	94 01       	movw	r18, r8
    1dea:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <_ZN6IRsend7sendNECEmi>
    1dee:	51 c0       	rjmp	.+162    	; 0x1e92 <_ZN8IRSystem23processAndExecuteStringER6String+0x2f4>
		}else if(keyCode==PANASONIC){
    1df0:	e7 e0       	ldi	r30, 0x07	; 7
    1df2:	fe 16       	cp	r15, r30
    1df4:	81 f4       	brne	.+32     	; 0x1e16 <_ZN8IRSystem23processAndExecuteStringER6String+0x278>
			Serial.println("PANASONIC");
    1df6:	8b e1       	ldi	r24, 0x1B	; 27
    1df8:	96 e0       	ldi	r25, 0x06	; 6
    1dfa:	67 e0       	ldi	r22, 0x07	; 7
    1dfc:	71 e0       	ldi	r23, 0x01	; 1
    1dfe:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
			irsend.sendPanasonic(bits,val);
    1e02:	c1 01       	movw	r24, r2
    1e04:	01 96       	adiw	r24, 0x01	; 1
    1e06:	b4 01       	movw	r22, r8
    1e08:	21 2f       	mov	r18, r17
    1e0a:	30 2f       	mov	r19, r16
    1e0c:	4e 2d       	mov	r20, r14
    1e0e:	5d 2d       	mov	r21, r13
    1e10:	0e 94 56 02 	call	0x4ac	; 0x4ac <_ZN6IRsend13sendPanasonicEjm>
    1e14:	3e c0       	rjmp	.+124    	; 0x1e92 <_ZN8IRSystem23processAndExecuteStringER6String+0x2f4>
		}else if(keyCode==SONY){
    1e16:	f2 e0       	ldi	r31, 0x02	; 2
    1e18:	ff 16       	cp	r15, r31
    1e1a:	91 f4       	brne	.+36     	; 0x1e40 <_ZN8IRSystem23processAndExecuteStringER6String+0x2a2>
			Serial.println("SONY");
    1e1c:	8b e1       	ldi	r24, 0x1B	; 27
    1e1e:	96 e0       	ldi	r25, 0x06	; 6
    1e20:	65 e2       	ldi	r22, 0x25	; 37
    1e22:	71 e0       	ldi	r23, 0x01	; 1
    1e24:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
			irsend.sendSony(bits,val);
    1e28:	a4 01       	movw	r20, r8
    1e2a:	66 27       	eor	r22, r22
    1e2c:	57 fd       	sbrc	r21, 7
    1e2e:	60 95       	com	r22
    1e30:	76 2f       	mov	r23, r22
    1e32:	c1 01       	movw	r24, r2
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	21 2f       	mov	r18, r17
    1e38:	30 2f       	mov	r19, r16
    1e3a:	0e 94 ac 03 	call	0x758	; 0x758 <_ZN6IRsend8sendSonyEmi>
    1e3e:	29 c0       	rjmp	.+82     	; 0x1e92 <_ZN8IRSystem23processAndExecuteStringER6String+0x2f4>
		}else if(keyCode==RC5){
    1e40:	23 e0       	ldi	r18, 0x03	; 3
    1e42:	f2 16       	cp	r15, r18
    1e44:	91 f4       	brne	.+36     	; 0x1e6a <_ZN8IRSystem23processAndExecuteStringER6String+0x2cc>
			Serial.println("RC5");
    1e46:	8b e1       	ldi	r24, 0x1B	; 27
    1e48:	96 e0       	ldi	r25, 0x06	; 6
    1e4a:	6a e2       	ldi	r22, 0x2A	; 42
    1e4c:	71 e0       	ldi	r23, 0x01	; 1
    1e4e:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
			irsend.sendRC5(bits,val);
    1e52:	a4 01       	movw	r20, r8
    1e54:	66 27       	eor	r22, r22
    1e56:	57 fd       	sbrc	r21, 7
    1e58:	60 95       	com	r22
    1e5a:	76 2f       	mov	r23, r22
    1e5c:	c1 01       	movw	r24, r2
    1e5e:	01 96       	adiw	r24, 0x01	; 1
    1e60:	21 2f       	mov	r18, r17
    1e62:	30 2f       	mov	r19, r16
    1e64:	0e 94 21 03 	call	0x642	; 0x642 <_ZN6IRsend7sendRC5Emi>
    1e68:	14 c0       	rjmp	.+40     	; 0x1e92 <_ZN8IRSystem23processAndExecuteStringER6String+0x2f4>
		}else if(keyCode==RC6){
    1e6a:	34 e0       	ldi	r19, 0x04	; 4
    1e6c:	f3 16       	cp	r15, r19
    1e6e:	89 f4       	brne	.+34     	; 0x1e92 <_ZN8IRSystem23processAndExecuteStringER6String+0x2f4>
			Serial.println("RC6");
    1e70:	8b e1       	ldi	r24, 0x1B	; 27
    1e72:	96 e0       	ldi	r25, 0x06	; 6
    1e74:	6e e2       	ldi	r22, 0x2E	; 46
    1e76:	71 e0       	ldi	r23, 0x01	; 1
    1e78:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
			irsend.sendRC6(bits,val);
    1e7c:	a4 01       	movw	r20, r8
    1e7e:	66 27       	eor	r22, r22
    1e80:	57 fd       	sbrc	r21, 7
    1e82:	60 95       	com	r22
    1e84:	76 2f       	mov	r23, r22
    1e86:	c1 01       	movw	r24, r2
    1e88:	01 96       	adiw	r24, 0x01	; 1
    1e8a:	21 2f       	mov	r18, r17
    1e8c:	30 2f       	mov	r19, r16
    1e8e:	0e 94 b5 02 	call	0x56a	; 0x56a <_ZN6IRsend7sendRC6Emi>
		}
	}			
}
    1e92:	ca 5e       	subi	r28, 0xEA	; 234
    1e94:	de 4f       	sbci	r29, 0xFE	; 254
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	0f 91       	pop	r16
    1ea8:	ff 90       	pop	r15
    1eaa:	ef 90       	pop	r14
    1eac:	df 90       	pop	r13
    1eae:	bf 90       	pop	r11
    1eb0:	af 90       	pop	r10
    1eb2:	9f 90       	pop	r9
    1eb4:	8f 90       	pop	r8
    1eb6:	7f 90       	pop	r7
    1eb8:	6f 90       	pop	r6
    1eba:	5f 90       	pop	r5
    1ebc:	4f 90       	pop	r4
    1ebe:	3f 90       	pop	r3
    1ec0:	2f 90       	pop	r2
    1ec2:	08 95       	ret

00001ec4 <_ZN8IRSystem13startReceiverER6String>:
	Serial.println("");
}
*/

//first time length match second time length
uint8_t IRSystem::startReceiver(String& serverResp){
    1ec4:	af 92       	push	r10
    1ec6:	bf 92       	push	r11
    1ec8:	cf 92       	push	r12
    1eca:	df 92       	push	r13
    1ecc:	ef 92       	push	r14
    1ece:	ff 92       	push	r15
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	cf 93       	push	r28
    1ed6:	df 93       	push	r29
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	27 97       	sbiw	r28, 0x07	; 7
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	8c 01       	movw	r16, r24
    1eea:	5b 01       	movw	r10, r22
	uint8_t returnType=IR_DATINV;
	Serial.println("Receiver waiting..");
    1eec:	8b e1       	ldi	r24, 0x1B	; 27
    1eee:	96 e0       	ldi	r25, 0x06	; 6
    1ef0:	62 e3       	ldi	r22, 0x32	; 50
    1ef2:	71 e0       	ldi	r23, 0x01	; 1
    1ef4:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
	irrecv.enableIRIn();
    1ef8:	f0 2e       	mov	r15, r16
    1efa:	e1 2e       	mov	r14, r17
    1efc:	c8 01       	movw	r24, r16
    1efe:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN6IRrecv10enableIRInEv>
	while(1){
		if (irrecv.decode(&results)) {
    1f02:	22 e0       	ldi	r18, 0x02	; 2
    1f04:	c2 2e       	mov	r12, r18
    1f06:	d1 2c       	mov	r13, r1
    1f08:	c0 0e       	add	r12, r16
    1f0a:	d1 1e       	adc	r13, r17
    1f0c:	8f 2d       	mov	r24, r15
    1f0e:	9e 2d       	mov	r25, r14
    1f10:	b6 01       	movw	r22, r12
    1f12:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN6IRrecv6decodeEP14decode_results>
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	31 f1       	breq	.+76     	; 0x1f66 <_ZN8IRSystem13startReceiverER6String+0xa2>
			//dump(&results);
			Serial.println(results.rawlen);
    1f1a:	f8 01       	movw	r30, r16
    1f1c:	66 85       	ldd	r22, Z+14	; 0x0e
    1f1e:	77 85       	ldd	r23, Z+15	; 0x0f
    1f20:	8b e1       	ldi	r24, 0x1B	; 27
    1f22:	96 e0       	ldi	r25, 0x06	; 6
    1f24:	4a e0       	ldi	r20, 0x0A	; 10
    1f26:	50 e0       	ldi	r21, 0x00	; 0
    1f28:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN5Print7printlnEii>
			
			if(results.rawlen>15){
    1f2c:	f8 01       	movw	r30, r16
    1f2e:	86 85       	ldd	r24, Z+14	; 0x0e
    1f30:	97 85       	ldd	r25, Z+15	; 0x0f
    1f32:	80 31       	cpi	r24, 0x10	; 16
    1f34:	91 05       	cpc	r25, r1
    1f36:	9c f1       	brlt	.+102    	; 0x1f9e <_ZN8IRSystem13startReceiverER6String+0xda>
				serverResp=getStringForServer(results.decode_type);
    1f38:	42 81       	ldd	r20, Z+2	; 0x02
    1f3a:	53 81       	ldd	r21, Z+3	; 0x03
    1f3c:	ce 01       	movw	r24, r28
    1f3e:	01 96       	adiw	r24, 0x01	; 1
    1f40:	b8 01       	movw	r22, r16
    1f42:	0e 94 a6 0c 	call	0x194c	; 0x194c <_ZN8IRSystem18getStringForServerEi>
    1f46:	c5 01       	movw	r24, r10
    1f48:	be 01       	movw	r22, r28
    1f4a:	6f 5f       	subi	r22, 0xFF	; 255
    1f4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4e:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN6StringaSERKS_>
    1f52:	ce 01       	movw	r24, r28
    1f54:	01 96       	adiw	r24, 0x01	; 1
    1f56:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
				returnType=IR_DATACAP;
				LEDFlasher.quickFlash();
    1f5a:	80 ef       	ldi	r24, 0xF0	; 240
    1f5c:	94 e0       	ldi	r25, 0x04	; 4
    1f5e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <_ZN8LEDTimer10quickFlashEv>
			//dump(&results);
			Serial.println(results.rawlen);
			
			if(results.rawlen>15){
				serverResp=getStringForServer(results.decode_type);
				returnType=IR_DATACAP;
    1f62:	00 e0       	ldi	r16, 0x00	; 0
				LEDFlasher.quickFlash();
				break;
    1f64:	1d c0       	rjmp	.+58     	; 0x1fa0 <_ZN8IRSystem13startReceiverER6String+0xdc>
			}else{
				returnType=IR_DATINV; break;
			}
		}		
		
		if((millis()-startTime)>IRTIMEOUT_TIME){
    1f66:	0e 94 b9 21 	call	0x4372	; 0x4372 <millis>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	f8 01       	movw	r30, r16
    1f70:	40 89       	ldd	r20, Z+16	; 0x10
    1f72:	51 89       	ldd	r21, Z+17	; 0x11
    1f74:	62 89       	ldd	r22, Z+18	; 0x12
    1f76:	73 89       	ldd	r23, Z+19	; 0x13
    1f78:	84 1b       	sub	r24, r20
    1f7a:	95 0b       	sbc	r25, r21
    1f7c:	a6 0b       	sbc	r26, r22
    1f7e:	b7 0b       	sbc	r27, r23
    1f80:	81 31       	cpi	r24, 0x11	; 17
    1f82:	f7 e2       	ldi	r31, 0x27	; 39
    1f84:	9f 07       	cpc	r25, r31
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	af 07       	cpc	r26, r31
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	bf 07       	cpc	r27, r31
    1f8e:	08 f4       	brcc	.+2      	; 0x1f92 <_ZN8IRSystem13startReceiverER6String+0xce>
    1f90:	bd cf       	rjmp	.-134    	; 0x1f0c <_ZN8IRSystem13startReceiverER6String+0x48>
			LEDFlasher.quickFlash();
    1f92:	80 ef       	ldi	r24, 0xF0	; 240
    1f94:	94 e0       	ldi	r25, 0x04	; 4
    1f96:	0e 94 79 10 	call	0x20f2	; 0x20f2 <_ZN8LEDTimer10quickFlashEv>
			returnType=IR_TIMEOUT; break;
    1f9a:	02 e0       	ldi	r16, 0x02	; 2
    1f9c:	01 c0       	rjmp	.+2      	; 0x1fa0 <_ZN8IRSystem13startReceiverER6String+0xdc>
				serverResp=getStringForServer(results.decode_type);
				returnType=IR_DATACAP;
				LEDFlasher.quickFlash();
				break;
			}else{
				returnType=IR_DATINV; break;
    1f9e:	01 e0       	ldi	r16, 0x01	; 1
			LEDFlasher.quickFlash();
			returnType=IR_TIMEOUT; break;
		}

	}
	irrecv.stop();	
    1fa0:	8f 2d       	mov	r24, r15
    1fa2:	9e 2d       	mov	r25, r14
    1fa4:	0e 94 04 05 	call	0xa08	; 0xa08 <_ZN6IRrecv4stopEv>
	Serial.println("Receiver end");
    1fa8:	8b e1       	ldi	r24, 0x1B	; 27
    1faa:	96 e0       	ldi	r25, 0x06	; 6
    1fac:	65 e4       	ldi	r22, 0x45	; 69
    1fae:	71 e0       	ldi	r23, 0x01	; 1
    1fb0:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
	return returnType;
}
    1fb4:	80 2f       	mov	r24, r16
    1fb6:	27 96       	adiw	r28, 0x07	; 7
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	de bf       	out	0x3e, r29	; 62
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	1f 91       	pop	r17
    1fc8:	0f 91       	pop	r16
    1fca:	ff 90       	pop	r15
    1fcc:	ef 90       	pop	r14
    1fce:	df 90       	pop	r13
    1fd0:	cf 90       	pop	r12
    1fd2:	bf 90       	pop	r11
    1fd4:	af 90       	pop	r10
    1fd6:	08 95       	ret

00001fd8 <_Z8timerISRv>:
	}		
	
}

void timerISR()
{
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
	switch(LEDFlasher.LED1State){
    1fdc:	c0 91 f3 04 	lds	r28, 0x04F3
    1fe0:	c1 30       	cpi	r28, 0x01	; 1
    1fe2:	49 f0       	breq	.+18     	; 0x1ff6 <_Z8timerISRv+0x1e>
    1fe4:	c1 30       	cpi	r28, 0x01	; 1
    1fe6:	18 f0       	brcs	.+6      	; 0x1fee <_Z8timerISRv+0x16>
    1fe8:	c2 30       	cpi	r28, 0x02	; 2
    1fea:	99 f4       	brne	.+38     	; 0x2012 <_Z8timerISRv+0x3a>
    1fec:	0d c0       	rjmp	.+26     	; 0x2008 <_Z8timerISRv+0x30>
		
		case 0:
			digitalWrite(LEDFlasher.LED1,LOW);
    1fee:	80 91 f0 04 	lds	r24, 0x04F0
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	0c c0       	rjmp	.+24     	; 0x200e <_Z8timerISRv+0x36>
			break;
		
		case 1:
			digitalWrite(LEDFlasher.LED1, digitalRead(LEDFlasher.LED1) ^ 1 );
    1ff6:	d0 91 f0 04 	lds	r29, 0x04F0
    1ffa:	8d 2f       	mov	r24, r29
    1ffc:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <digitalRead>
    2000:	68 2f       	mov	r22, r24
    2002:	6c 27       	eor	r22, r28
    2004:	8d 2f       	mov	r24, r29
    2006:	03 c0       	rjmp	.+6      	; 0x200e <_Z8timerISRv+0x36>
			break;
		
		case 2:
			digitalWrite(LEDFlasher.LED1,HIGH);
    2008:	80 91 f0 04 	lds	r24, 0x04F0
    200c:	61 e0       	ldi	r22, 0x01	; 1
    200e:	0e 94 a4 22 	call	0x4548	; 0x4548 <digitalWrite>
		
		default:
			break;
	}
	
	switch(LEDFlasher.LED2State){
    2012:	c0 91 f4 04 	lds	r28, 0x04F4
    2016:	c1 30       	cpi	r28, 0x01	; 1
    2018:	49 f0       	breq	.+18     	; 0x202c <_Z8timerISRv+0x54>
    201a:	c1 30       	cpi	r28, 0x01	; 1
    201c:	18 f0       	brcs	.+6      	; 0x2024 <_Z8timerISRv+0x4c>
    201e:	c2 30       	cpi	r28, 0x02	; 2
    2020:	99 f4       	brne	.+38     	; 0x2048 <_Z8timerISRv+0x70>
    2022:	0d c0       	rjmp	.+26     	; 0x203e <_Z8timerISRv+0x66>
		
		case 0:
		digitalWrite(LEDFlasher.LED2,LOW);
    2024:	80 91 f1 04 	lds	r24, 0x04F1
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	0c c0       	rjmp	.+24     	; 0x2044 <_Z8timerISRv+0x6c>
		break;
		
		case 1:
		digitalWrite(LEDFlasher.LED2, digitalRead(LEDFlasher.LED2) ^ 1 );
    202c:	d0 91 f1 04 	lds	r29, 0x04F1
    2030:	8d 2f       	mov	r24, r29
    2032:	0e 94 f8 22 	call	0x45f0	; 0x45f0 <digitalRead>
    2036:	68 2f       	mov	r22, r24
    2038:	6c 27       	eor	r22, r28
    203a:	8d 2f       	mov	r24, r29
    203c:	03 c0       	rjmp	.+6      	; 0x2044 <_Z8timerISRv+0x6c>
		break;
		
		case 2:
		digitalWrite(LEDFlasher.LED2,HIGH);
    203e:	80 91 f1 04 	lds	r24, 0x04F1
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	0e 94 a4 22 	call	0x4548	; 0x4548 <digitalWrite>
		
		default:
		break;
	}

}
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	08 95       	ret

0000204e <_ZN8LEDTimer6setLEDEhh>:

#include "LEDTimer.h"

LEDTimer LEDFlasher;

 void LEDTimer::setLED(byte xLED1, byte xLED2){
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	ec 01       	movw	r28, r24
    2054:	86 2f       	mov	r24, r22
	 
	LED1=xLED1;
    2056:	68 83       	st	Y, r22
	LED2=xLED2;
    2058:	49 83       	std	Y+1, r20	; 0x01
	LED1State=0;
    205a:	1b 82       	std	Y+3, r1	; 0x03
	LED2State=0;
    205c:	1c 82       	std	Y+4, r1	; 0x04
	pinMode(LED1, OUTPUT);
    205e:	61 e0       	ldi	r22, 0x01	; 1
    2060:	0e 94 65 22 	call	0x44ca	; 0x44ca <pinMode>
	pinMode(LED2, OUTPUT);
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	61 e0       	ldi	r22, 0x01	; 1
    2068:	0e 94 65 22 	call	0x44ca	; 0x44ca <pinMode>
	
}
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	08 95       	ret

00002072 <_ZN8LEDTimer5startEv>:

void LEDTimer::start(){
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
	
	timerState=true;
    2076:	21 e0       	ldi	r18, 0x01	; 1
    2078:	fc 01       	movw	r30, r24
    207a:	22 83       	std	Z+2, r18	; 0x02
	Timer1.initialize(LEDBLINK_RATE);
    207c:	c9 e3       	ldi	r28, 0x39	; 57
    207e:	d5 e0       	ldi	r29, 0x05	; 5
    2080:	ce 01       	movw	r24, r28
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5a e1       	ldi	r21, 0x1A	; 26
    2086:	66 e0       	ldi	r22, 0x06	; 6
    2088:	70 e0       	ldi	r23, 0x00	; 0
    208a:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN8TimerOne10initializeEl>
	Timer1.attachInterrupt(timerISR);
    208e:	ce 01       	movw	r24, r28
    2090:	6c ee       	ldi	r22, 0xEC	; 236
    2092:	7f e0       	ldi	r23, 0x0F	; 15
    2094:	2f ef       	ldi	r18, 0xFF	; 255
    2096:	3f ef       	ldi	r19, 0xFF	; 255
    2098:	a9 01       	movw	r20, r18
    209a:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <_ZN8TimerOne15attachInterruptEPFvvEl>
	
}
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	08 95       	ret

000020a4 <_ZN8LEDTimer4stopEv>:

void LEDTimer::stop(){
    20a4:	cf 93       	push	r28
    20a6:	df 93       	push	r29
	timerState=false;
    20a8:	fc 01       	movw	r30, r24
    20aa:	12 82       	std	Z+2, r1	; 0x02
	Timer1.stop();
    20ac:	c9 e3       	ldi	r28, 0x39	; 57
    20ae:	d5 e0       	ldi	r29, 0x05	; 5
    20b0:	ce 01       	movw	r24, r28
    20b2:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <_ZN8TimerOne4stopEv>
	Timer1.initialize(LEDSTOP_RATE);
    20b6:	ce 01       	movw	r24, r28
    20b8:	40 e4       	ldi	r20, 0x40	; 64
    20ba:	5b e4       	ldi	r21, 0x4B	; 75
    20bc:	6c e4       	ldi	r22, 0x4C	; 76
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN8TimerOne10initializeEl>
}
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	08 95       	ret

000020ca <_ZN8LEDTimer6resumeEv>:

void LEDTimer::resume(){
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
	
	timerState=true;
    20ce:	21 e0       	ldi	r18, 0x01	; 1
    20d0:	fc 01       	movw	r30, r24
    20d2:	22 83       	std	Z+2, r18	; 0x02
	Timer1.initialize(LEDBLINK_RATE);
    20d4:	c9 e3       	ldi	r28, 0x39	; 57
    20d6:	d5 e0       	ldi	r29, 0x05	; 5
    20d8:	ce 01       	movw	r24, r28
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	5a e1       	ldi	r21, 0x1A	; 26
    20de:	66 e0       	ldi	r22, 0x06	; 6
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	0e 94 78 15 	call	0x2af0	; 0x2af0 <_ZN8TimerOne10initializeEl>
	Timer1.resume();
    20e6:	ce 01       	movw	r24, r28
    20e8:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_ZN8TimerOne6resumeEv>
	
}
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	08 95       	ret

000020f2 <_ZN8LEDTimer10quickFlashEv>:

void LEDTimer::quickFlash(){
    20f2:	1f 93       	push	r17
    20f4:	cf 93       	push	r28
    20f6:	df 93       	push	r29
    20f8:	ec 01       	movw	r28, r24
    20fa:	12 e0       	ldi	r17, 0x02	; 2
	for(byte i=0;i<2;i++){
		digitalWrite(LED1,LOW);digitalWrite(LED2,LOW);
    20fc:	88 81       	ld	r24, Y
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	0e 94 a4 22 	call	0x4548	; 0x4548 <digitalWrite>
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	60 e0       	ldi	r22, 0x00	; 0
    2108:	0e 94 a4 22 	call	0x4548	; 0x4548 <digitalWrite>
		delay(50);
    210c:	62 e3       	ldi	r22, 0x32	; 50
    210e:	70 e0       	ldi	r23, 0x00	; 0
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
		digitalWrite(LED1,HIGH);digitalWrite(LED2,HIGH);
    2118:	88 81       	ld	r24, Y
    211a:	61 e0       	ldi	r22, 0x01	; 1
    211c:	0e 94 a4 22 	call	0x4548	; 0x4548 <digitalWrite>
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	61 e0       	ldi	r22, 0x01	; 1
    2124:	0e 94 a4 22 	call	0x4548	; 0x4548 <digitalWrite>
		delay(50);
    2128:	62 e3       	ldi	r22, 0x32	; 50
    212a:	70 e0       	ldi	r23, 0x00	; 0
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
    2134:	11 50       	subi	r17, 0x01	; 1
	Timer1.resume();
	
}

void LEDTimer::quickFlash(){
	for(byte i=0;i<2;i++){
    2136:	11 f7       	brne	.-60     	; 0x20fc <_ZN8LEDTimer10quickFlashEv+0xa>
		digitalWrite(LED1,LOW);digitalWrite(LED2,LOW);
		delay(50);
		digitalWrite(LED1,HIGH);digitalWrite(LED2,HIGH);
		delay(50);
	}	
}
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	1f 91       	pop	r17
    213e:	08 95       	ret

00002140 <_ZN8LEDTimer11quickSetLEDEv>:

void LEDTimer:: quickSetLED(){
    2140:	cf 93       	push	r28
    2142:	df 93       	push	r29
    2144:	ec 01       	movw	r28, r24
	
	if(LED1State==0)
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	88 23       	and	r24, r24
    214a:	19 f4       	brne	.+6      	; 0x2152 <_ZN8LEDTimer11quickSetLEDEv+0x12>
		digitalWrite(LED1,LOW);
    214c:	88 81       	ld	r24, Y
    214e:	60 e0       	ldi	r22, 0x00	; 0
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <_ZN8LEDTimer11quickSetLEDEv+0x16>
	else
		digitalWrite(LED1,HIGH);
    2152:	88 81       	ld	r24, Y
    2154:	61 e0       	ldi	r22, 0x01	; 1
    2156:	0e 94 a4 22 	call	0x4548	; 0x4548 <digitalWrite>
	if(LED2State==0)
    215a:	8c 81       	ldd	r24, Y+4	; 0x04
    215c:	88 23       	and	r24, r24
    215e:	19 f4       	brne	.+6      	; 0x2166 <_ZN8LEDTimer11quickSetLEDEv+0x26>
		digitalWrite(LED2,LOW);
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	02 c0       	rjmp	.+4      	; 0x216a <_ZN8LEDTimer11quickSetLEDEv+0x2a>
	else
		digitalWrite(LED2,HIGH);
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	61 e0       	ldi	r22, 0x01	; 1
    216a:	0e 94 a4 22 	call	0x4548	; 0x4548 <digitalWrite>
		
}
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	08 95       	ret

00002174 <_ZN8LEDTimer8setStateEhh>:

void LEDTimer::setState(byte xLED1State, byte xLED2State){
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	ec 01       	movw	r28, r24
	
	LED1State=xLED1State;
    217a:	6b 83       	std	Y+3, r22	; 0x03
	LED2State=xLED2State;
    217c:	4c 83       	std	Y+4, r20	; 0x04
	
	if(((LED1State==2) && (LED2State==2))
    217e:	62 30       	cpi	r22, 0x02	; 2
    2180:	11 f0       	breq	.+4      	; 0x2186 <_ZN8LEDTimer8setStateEhh+0x12>
    2182:	66 23       	and	r22, r22
    2184:	79 f4       	brne	.+30     	; 0x21a4 <_ZN8LEDTimer8setStateEhh+0x30>
    2186:	42 30       	cpi	r20, 0x02	; 2
    2188:	31 f0       	breq	.+12     	; 0x2196 <_ZN8LEDTimer8setStateEhh+0x22>
    218a:	62 30       	cpi	r22, 0x02	; 2
    218c:	11 f0       	breq	.+4      	; 0x2192 <_ZN8LEDTimer8setStateEhh+0x1e>
    218e:	66 23       	and	r22, r22
    2190:	49 f4       	brne	.+18     	; 0x21a4 <_ZN8LEDTimer8setStateEhh+0x30>
    2192:	44 23       	and	r20, r20
    2194:	39 f4       	brne	.+14     	; 0x21a4 <_ZN8LEDTimer8setStateEhh+0x30>
	|| ((LED1State==0) && (LED2State==2))
	|| ((LED1State==2) && (LED2State==0))
	|| ((LED1State==0) && (LED2State==0))){
		stop();
    2196:	ce 01       	movw	r24, r28
    2198:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN8LEDTimer4stopEv>
		quickSetLED();
    219c:	ce 01       	movw	r24, r28
    219e:	0e 94 a0 10 	call	0x2140	; 0x2140 <_ZN8LEDTimer11quickSetLEDEv>
    21a2:	06 c0       	rjmp	.+12     	; 0x21b0 <_ZN8LEDTimer8setStateEhh+0x3c>
	}else{
		if(!timerState)
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	88 23       	and	r24, r24
    21a8:	19 f4       	brne	.+6      	; 0x21b0 <_ZN8LEDTimer8setStateEhh+0x3c>
			resume();
    21aa:	ce 01       	movw	r24, r28
    21ac:	0e 94 65 10 	call	0x20ca	; 0x20ca <_ZN8LEDTimer6resumeEv>
	}		
	
}
    21b0:	df 91       	pop	r29
    21b2:	cf 91       	pop	r28
    21b4:	08 95       	ret

000021b6 <_Z12freeListSizev>:
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    21b6:	e0 91 3d 06 	lds	r30, 0x063D
    21ba:	f0 91 3e 06 	lds	r31, 0x063E
#include "MemoryFree.h";

/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e0       	ldi	r25, 0x00	; 0

  for (current = __flp; current; current = current->nx) {
    21c2:	08 c0       	rjmp	.+16     	; 0x21d4 <_Z12freeListSizev+0x1e>
    total += 2; /* Add two bytes for the memory block's header  */
    21c4:	02 96       	adiw	r24, 0x02	; 2
    total += (int) current->sz;
    21c6:	20 81       	ld	r18, Z
    21c8:	31 81       	ldd	r19, Z+1	; 0x01
    21ca:	82 0f       	add	r24, r18
    21cc:	93 1f       	adc	r25, r19
/* Calculates the size of the free list */
int freeListSize() {
  struct __freelist* current;
  int total = 0;

  for (current = __flp; current; current = current->nx) {
    21ce:	02 80       	ldd	r0, Z+2	; 0x02
    21d0:	f3 81       	ldd	r31, Z+3	; 0x03
    21d2:	e0 2d       	mov	r30, r0
    21d4:	30 97       	sbiw	r30, 0x00	; 0
    21d6:	b1 f7       	brne	.-20     	; 0x21c4 <_Z12freeListSizev+0xe>
    total += 2; /* Add two bytes for the memory block's header  */
    total += (int) current->sz;
  }

  return total;
}
    21d8:	08 95       	ret

000021da <freeMemory>:

int freeMemory() {
    21da:	0f 93       	push	r16
    21dc:	1f 93       	push	r17
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	00 d0       	rcall	.+0      	; 0x21e4 <freeMemory+0xa>
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
  int free_memory;

  if ((int)__brkval == 0) {
    21e8:	80 91 3b 06 	lds	r24, 0x063B
    21ec:	90 91 3c 06 	lds	r25, 0x063C
    21f0:	8e 01       	movw	r16, r28
    21f2:	0f 5f       	subi	r16, 0xFF	; 255
    21f4:	1f 4f       	sbci	r17, 0xFF	; 255
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	19 f4       	brne	.+6      	; 0x2200 <freeMemory+0x26>
    free_memory = ((int)&free_memory) - ((int)&__heap_start);
    21fa:	0f 53       	subi	r16, 0x3F	; 63
    21fc:	16 40       	sbci	r17, 0x06	; 6
    21fe:	08 c0       	rjmp	.+16     	; 0x2210 <freeMemory+0x36>
  } else {
    free_memory = ((int)&free_memory) - ((int)__brkval);
    2200:	08 1b       	sub	r16, r24
    2202:	19 0b       	sbc	r17, r25
    2204:	1a 83       	std	Y+2, r17	; 0x02
    2206:	09 83       	std	Y+1, r16	; 0x01
    free_memory += freeListSize();
    2208:	0e 94 db 10 	call	0x21b6	; 0x21b6 <_Z12freeListSizev>
    220c:	08 0f       	add	r16, r24
    220e:	19 1f       	adc	r17, r25
    2210:	1a 83       	std	Y+2, r17	; 0x02
    2212:	09 83       	std	Y+1, r16	; 0x01
  }
  return free_memory;
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	df 91       	pop	r29
    221e:	cf 91       	pop	r28
    2220:	1f 91       	pop	r17
    2222:	0f 91       	pop	r16
    2224:	08 95       	ret

00002226 <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    2226:	20 91 37 05 	lds	r18, 0x0537
    222a:	30 91 38 05 	lds	r19, 0x0538
    222e:	28 17       	cp	r18, r24
    2230:	39 07       	cpc	r19, r25
    2232:	b9 f4       	brne	.+46     	; 0x2262 <_ZN14SoftwareSerial4readEv+0x3c>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    2234:	90 91 f5 04 	lds	r25, 0x04F5
    2238:	80 91 f6 04 	lds	r24, 0x04F6
    223c:	98 17       	cp	r25, r24
    223e:	a1 f0       	breq	.+40     	; 0x2268 <_ZN14SoftwareSerial4readEv+0x42>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
    2240:	e0 91 f5 04 	lds	r30, 0x04F5
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	e9 50       	subi	r30, 0x09	; 9
    2248:	fb 4f       	sbci	r31, 0xFB	; 251
    224a:	80 81       	ld	r24, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
    224c:	20 91 f5 04 	lds	r18, 0x04F5
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	2f 5f       	subi	r18, 0xFF	; 255
    2254:	3f 4f       	sbci	r19, 0xFF	; 255
    2256:	2f 73       	andi	r18, 0x3F	; 63
    2258:	30 70       	andi	r19, 0x00	; 0
    225a:	20 93 f5 04 	sts	0x04F5, r18
  return d;
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	08 95       	ret

// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
    return -1;
    2262:	8f ef       	ldi	r24, 0xFF	; 255
    2264:	9f ef       	ldi	r25, 0xFF	; 255
    2266:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
    2268:	8f ef       	ldi	r24, 0xFF	; 255
    226a:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  return d;
}
    226c:	08 95       	ret

0000226e <_ZN14SoftwareSerial4peekEv>:
  SREG = oldSREG;
}

int SoftwareSerial::peek()
{
  if (!isListening())
    226e:	20 91 37 05 	lds	r18, 0x0537
    2272:	30 91 38 05 	lds	r19, 0x0538
    2276:	28 17       	cp	r18, r24
    2278:	39 07       	cpc	r19, r25
    227a:	71 f4       	brne	.+28     	; 0x2298 <_ZN14SoftwareSerial4peekEv+0x2a>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    227c:	90 91 f5 04 	lds	r25, 0x04F5
    2280:	80 91 f6 04 	lds	r24, 0x04F6
    2284:	98 17       	cp	r25, r24
    2286:	59 f0       	breq	.+22     	; 0x229e <_ZN14SoftwareSerial4peekEv+0x30>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
    2288:	e0 91 f5 04 	lds	r30, 0x04F5
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	e9 50       	subi	r30, 0x09	; 9
    2290:	fb 4f       	sbci	r31, 0xFB	; 251
    2292:	80 81       	ld	r24, Z
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	08 95       	ret
}

int SoftwareSerial::peek()
{
  if (!isListening())
    return -1;
    2298:	8f ef       	ldi	r24, 0xFF	; 255
    229a:	9f ef       	ldi	r25, 0xFF	; 255
    229c:	08 95       	ret

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
    return -1;
    229e:	8f ef       	ldi	r24, 0xFF	; 255
    22a0:	9f ef       	ldi	r25, 0xFF	; 255

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
}
    22a2:	08 95       	ret

000022a4 <_ZN14SoftwareSerial5flushEv>:
  return 1;
}

void SoftwareSerial::flush()
{
  if (!isListening())
    22a4:	20 91 37 05 	lds	r18, 0x0537
    22a8:	30 91 38 05 	lds	r19, 0x0538
    22ac:	28 17       	cp	r18, r24
    22ae:	39 07       	cpc	r19, r25
    22b0:	39 f4       	brne	.+14     	; 0x22c0 <_ZN14SoftwareSerial5flushEv+0x1c>
    return;

  uint8_t oldSREG = SREG;
    22b2:	8f b7       	in	r24, 0x3f	; 63
  cli();
    22b4:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
    22b6:	10 92 f6 04 	sts	0x04F6, r1
    22ba:	10 92 f5 04 	sts	0x04F5, r1
  SREG = oldSREG;
    22be:	8f bf       	out	0x3f, r24	; 63
    22c0:	08 95       	ret

000022c2 <_ZN14SoftwareSerial9availableEv>:
  return d;
}

int SoftwareSerial::available()
{
  if (!isListening())
    22c2:	20 91 37 05 	lds	r18, 0x0537
    22c6:	30 91 38 05 	lds	r19, 0x0538
    22ca:	28 17       	cp	r18, r24
    22cc:	39 07       	cpc	r19, r25
    22ce:	71 f4       	brne	.+28     	; 0x22ec <_ZN14SoftwareSerial9availableEv+0x2a>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
    22d0:	80 91 f6 04 	lds	r24, 0x04F6
    22d4:	20 91 f5 04 	lds	r18, 0x04F5
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	80 5c       	subi	r24, 0xC0	; 192
    22dc:	9f 4f       	sbci	r25, 0xFF	; 255
    22de:	82 1b       	sub	r24, r18
    22e0:	91 09       	sbc	r25, r1
    22e2:	60 e4       	ldi	r22, 0x40	; 64
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	0e 94 10 2c 	call	0x5820	; 0x5820 <__divmodhi4>
    22ea:	08 95       	ret
}

int SoftwareSerial::available()
{
  if (!isListening())
    return 0;
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}
    22f0:	08 95       	ret

000022f2 <_ZN14SoftwareSerial10tunedDelayEj>:
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	01 97       	sbiw	r24, 0x01	; 1
    22f6:	2f ef       	ldi	r18, 0xFF	; 255
    22f8:	8f 3f       	cpi	r24, 0xFF	; 255
    22fa:	92 07       	cpc	r25, r18
    22fc:	d9 f7       	brne	.-10     	; 0x22f4 <_ZN14SoftwareSerial10tunedDelayEj+0x2>
}
    22fe:	08 95       	ret

00002300 <_ZN14SoftwareSerial6listenEv>:

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
    2300:	fc 01       	movw	r30, r24
  if (active_object != this)
    2302:	80 91 37 05 	lds	r24, 0x0537
    2306:	90 91 38 05 	lds	r25, 0x0538
    230a:	8e 17       	cp	r24, r30
    230c:	9f 07       	cpc	r25, r31
    230e:	81 f0       	breq	.+32     	; 0x2330 <_ZN14SoftwareSerial6listenEv+0x30>
  {
    _buffer_overflow = false;
    2310:	83 8d       	ldd	r24, Z+27	; 0x1b
    2312:	8e 7f       	andi	r24, 0xFE	; 254
    2314:	83 8f       	std	Z+27, r24	; 0x1b
    uint8_t oldSREG = SREG;
    2316:	8f b7       	in	r24, 0x3f	; 63
    cli();
    2318:	f8 94       	cli
    _receive_buffer_head = _receive_buffer_tail = 0;
    231a:	10 92 f6 04 	sts	0x04F6, r1
    231e:	10 92 f5 04 	sts	0x04F5, r1
    active_object = this;
    2322:	f0 93 38 05 	sts	0x0538, r31
    2326:	e0 93 37 05 	sts	0x0537, r30
    SREG = oldSREG;
    232a:	8f bf       	out	0x3f, r24	; 63
    return true;
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	08 95       	ret
  }

  return false;
    2330:	80 e0       	ldi	r24, 0x00	; 0
}
    2332:	08 95       	ret

00002334 <_ZN14SoftwareSerial4recvEv>:

//
// The receive routine called by the interrupt handler
//
void SoftwareSerial::recv()
{
    2334:	ef 92       	push	r14
    2336:	ff 92       	push	r15
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	ec 01       	movw	r28, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2342:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2344:	ee 85       	ldd	r30, Y+14	; 0x0e
    2346:	ff 85       	ldd	r31, Y+15	; 0x0f
    2348:	9d 85       	ldd	r25, Y+13	; 0x0d
    234a:	81 ff       	sbrs	r24, 1
    234c:	04 c0       	rjmp	.+8      	; 0x2356 <_ZN14SoftwareSerial4recvEv+0x22>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    234e:	80 81       	ld	r24, Z
    2350:	89 23       	and	r24, r25

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    2352:	29 f4       	brne	.+10     	; 0x235e <_ZN14SoftwareSerial4recvEv+0x2a>
    2354:	48 c0       	rjmp	.+144    	; 0x23e6 <_ZN14SoftwareSerial4recvEv+0xb2>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2356:	80 81       	ld	r24, Z
    2358:	89 23       	and	r24, r25

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    235a:	09 f0       	breq	.+2      	; 0x235e <_ZN14SoftwareSerial4recvEv+0x2a>
    235c:	44 c0       	rjmp	.+136    	; 0x23e6 <_ZN14SoftwareSerial4recvEv+0xb2>
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    235e:	8b 89       	ldd	r24, Y+19	; 0x13
    2360:	9c 89       	ldd	r25, Y+20	; 0x14
    2362:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN14SoftwareSerial10tunedDelayEj>
    2366:	28 e0       	ldi	r18, 0x08	; 8
    2368:	e2 2e       	mov	r14, r18
    236a:	f1 2c       	mov	r15, r1
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    236c:	01 e0       	ldi	r16, 0x01	; 1
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    236e:	10 e0       	ldi	r17, 0x00	; 0
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
    2370:	8d 89       	ldd	r24, Y+21	; 0x15
    2372:	9e 89       	ldd	r25, Y+22	; 0x16
    2374:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN14SoftwareSerial10tunedDelayEj>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    2378:	ee 85       	ldd	r30, Y+14	; 0x0e
    237a:	ff 85       	ldd	r31, Y+15	; 0x0f
    237c:	80 81       	ld	r24, Z
    237e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2380:	89 23       	and	r24, r25
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
      if (rx_pin_read())
    2382:	11 f0       	breq	.+4      	; 0x2388 <_ZN14SoftwareSerial4recvEv+0x54>
        d |= i;
    2384:	10 2b       	or	r17, r16
    2386:	03 c0       	rjmp	.+6      	; 0x238e <_ZN14SoftwareSerial4recvEv+0x5a>
    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
    2388:	80 2f       	mov	r24, r16
    238a:	80 95       	com	r24
      if (rx_pin_read())
        d |= i;
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    238c:	18 23       	and	r17, r24
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    238e:	00 0f       	add	r16, r16
    2390:	08 94       	sec
    2392:	e1 08       	sbc	r14, r1
    2394:	f1 08       	sbc	r15, r1
    2396:	e1 14       	cp	r14, r1
    2398:	f1 04       	cpc	r15, r1
    239a:	51 f7       	brne	.-44     	; 0x2370 <_ZN14SoftwareSerial4recvEv+0x3c>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
    239c:	8f 89       	ldd	r24, Y+23	; 0x17
    239e:	98 8d       	ldd	r25, Y+24	; 0x18
    23a0:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN14SoftwareSerial10tunedDelayEj>
    DebugPulse(_DEBUG_PIN2, 1);

    if (_inverse_logic)
    23a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a6:	81 fd       	sbrc	r24, 1
      d = ~d;
    23a8:	10 95       	com	r17

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
    23aa:	80 91 f6 04 	lds	r24, 0x04F6
    23ae:	20 91 f5 04 	lds	r18, 0x04F5
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	01 96       	adiw	r24, 0x01	; 1
    23b6:	8f 73       	andi	r24, 0x3F	; 63
    23b8:	90 70       	andi	r25, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	82 17       	cp	r24, r18
    23be:	93 07       	cpc	r25, r19
    23c0:	79 f0       	breq	.+30     	; 0x23e0 <_ZN14SoftwareSerial4recvEv+0xac>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    23c2:	e0 91 f6 04 	lds	r30, 0x04F6
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	e9 50       	subi	r30, 0x09	; 9
    23ca:	fb 4f       	sbci	r31, 0xFB	; 251
    23cc:	10 83       	st	Z, r17
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    23ce:	80 91 f6 04 	lds	r24, 0x04F6
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	01 96       	adiw	r24, 0x01	; 1
    23d6:	8f 73       	andi	r24, 0x3F	; 63
    23d8:	90 70       	andi	r25, 0x00	; 0
    23da:	80 93 f6 04 	sts	0x04F6, r24
    23de:	03 c0       	rjmp	.+6      	; 0x23e6 <_ZN14SoftwareSerial4recvEv+0xb2>
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
    23e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e2:	81 60       	ori	r24, 0x01	; 1
    23e4:	8b 8f       	std	Y+27, r24	; 0x1b
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	08 95       	ret

000023f4 <_ZN14SoftwareSerial12tx_pin_writeEh>:

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
    23f4:	fc 01       	movw	r30, r24
    23f6:	a1 89       	ldd	r26, Z+17	; 0x11
    23f8:	b2 89       	ldd	r27, Z+18	; 0x12
    23fa:	90 89       	ldd	r25, Z+16	; 0x10
  if (pin_state == LOW)
    23fc:	66 23       	and	r22, r22
    23fe:	29 f4       	brne	.+10     	; 0x240a <_ZN14SoftwareSerial12tx_pin_writeEh+0x16>
    *_transmitPortRegister &= ~_transmitBitMask;
    2400:	2c 91       	ld	r18, X
    2402:	89 2f       	mov	r24, r25
    2404:	80 95       	com	r24
    2406:	82 23       	and	r24, r18
    2408:	02 c0       	rjmp	.+4      	; 0x240e <_ZN14SoftwareSerial12tx_pin_writeEh+0x1a>
  else
    *_transmitPortRegister |= _transmitBitMask;
    240a:	8c 91       	ld	r24, X
    240c:	89 2b       	or	r24, r25
    240e:	8c 93       	st	X, r24
    2410:	08 95       	ret

00002412 <_ZN14SoftwareSerial5writeEh>:

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
}

size_t SoftwareSerial::write(uint8_t b)
{
    2412:	df 92       	push	r13
    2414:	ef 92       	push	r14
    2416:	ff 92       	push	r15
    2418:	0f 93       	push	r16
    241a:	1f 93       	push	r17
    241c:	cf 93       	push	r28
    241e:	df 93       	push	r29
    2420:	ec 01       	movw	r28, r24
    2422:	f6 2e       	mov	r15, r22
  if (_tx_delay == 0) {
    2424:	89 8d       	ldd	r24, Y+25	; 0x19
    2426:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	39 f4       	brne	.+14     	; 0x243a <_ZN14SoftwareSerial5writeEh+0x28>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	9b 83       	std	Y+3, r25	; 0x03
    2432:	8a 83       	std	Y+2, r24	; 0x02
    setWriteError();
    return 0;
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	47 c0       	rjmp	.+142    	; 0x24c8 <_ZN14SoftwareSerial5writeEh+0xb6>
  }

  uint8_t oldSREG = SREG;
    243a:	ef b6       	in	r14, 0x3f	; 63
  cli();  // turn off interrupts for a clean txmit
    243c:	f8 94       	cli

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
    243e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2440:	61 e0       	ldi	r22, 0x01	; 1
    2442:	81 ff       	sbrs	r24, 1
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	ce 01       	movw	r24, r28
    2448:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <_ZN14SoftwareSerial12tx_pin_writeEh>
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);
    244c:	89 8d       	ldd	r24, Y+25	; 0x19
    244e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2450:	05 96       	adiw	r24, 0x05	; 5
    2452:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN14SoftwareSerial10tunedDelayEj>

  // Write each of the 8 bits
  if (_inverse_logic)
    2456:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2458:	08 e0       	ldi	r16, 0x08	; 8
    245a:	10 e0       	ldi	r17, 0x00	; 0
    245c:	dd 24       	eor	r13, r13
    245e:	d3 94       	inc	r13
    2460:	81 ff       	sbrs	r24, 1
    2462:	15 c0       	rjmp	.+42     	; 0x248e <_ZN14SoftwareSerial5writeEh+0x7c>
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
    2464:	8d 2d       	mov	r24, r13
    2466:	8f 21       	and	r24, r15
    2468:	19 f0       	breq	.+6      	; 0x2470 <_ZN14SoftwareSerial5writeEh+0x5e>
        tx_pin_write(LOW); // send 1
    246a:	ce 01       	movw	r24, r28
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	02 c0       	rjmp	.+4      	; 0x2474 <_ZN14SoftwareSerial5writeEh+0x62>
      else
        tx_pin_write(HIGH); // send 0
    2470:	ce 01       	movw	r24, r28
    2472:	61 e0       	ldi	r22, 0x01	; 1
    2474:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <_ZN14SoftwareSerial12tx_pin_writeEh>
    
      tunedDelay(_tx_delay);
    2478:	89 8d       	ldd	r24, Y+25	; 0x19
    247a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    247c:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN14SoftwareSerial10tunedDelayEj>
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    2480:	dd 0c       	add	r13, r13
    2482:	01 50       	subi	r16, 0x01	; 1
    2484:	10 40       	sbci	r17, 0x00	; 0
    2486:	71 f7       	brne	.-36     	; 0x2464 <_ZN14SoftwareSerial5writeEh+0x52>
        tx_pin_write(HIGH); // send 0
    
      tunedDelay(_tx_delay);
    }

    tx_pin_write(LOW); // restore pin to natural state
    2488:	ce 01       	movw	r24, r28
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	14 c0       	rjmp	.+40     	; 0x24b6 <_ZN14SoftwareSerial5writeEh+0xa4>
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
    248e:	8d 2d       	mov	r24, r13
    2490:	8f 21       	and	r24, r15
    2492:	19 f0       	breq	.+6      	; 0x249a <_ZN14SoftwareSerial5writeEh+0x88>
        tx_pin_write(HIGH); // send 1
    2494:	ce 01       	movw	r24, r28
    2496:	61 e0       	ldi	r22, 0x01	; 1
    2498:	02 c0       	rjmp	.+4      	; 0x249e <_ZN14SoftwareSerial5writeEh+0x8c>
      else
        tx_pin_write(LOW); // send 0
    249a:	ce 01       	movw	r24, r28
    249c:	60 e0       	ldi	r22, 0x00	; 0
    249e:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <_ZN14SoftwareSerial12tx_pin_writeEh>
    
      tunedDelay(_tx_delay);
    24a2:	89 8d       	ldd	r24, Y+25	; 0x19
    24a4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24a6:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN14SoftwareSerial10tunedDelayEj>

    tx_pin_write(LOW); // restore pin to natural state
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    24aa:	dd 0c       	add	r13, r13
    24ac:	01 50       	subi	r16, 0x01	; 1
    24ae:	10 40       	sbci	r17, 0x00	; 0
    24b0:	71 f7       	brne	.-36     	; 0x248e <_ZN14SoftwareSerial5writeEh+0x7c>
        tx_pin_write(LOW); // send 0
    
      tunedDelay(_tx_delay);
    }

    tx_pin_write(HIGH); // restore pin to natural state
    24b2:	ce 01       	movw	r24, r28
    24b4:	61 e0       	ldi	r22, 0x01	; 1
    24b6:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <_ZN14SoftwareSerial12tx_pin_writeEh>
  }

  SREG = oldSREG; // turn interrupts back on
    24ba:	ef be       	out	0x3f, r14	; 63
  tunedDelay(_tx_delay);
    24bc:	89 8d       	ldd	r24, Y+25	; 0x19
    24be:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24c0:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN14SoftwareSerial10tunedDelayEj>
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
  
  return 1;
}
    24c8:	df 91       	pop	r29
    24ca:	cf 91       	pop	r28
    24cc:	1f 91       	pop	r17
    24ce:	0f 91       	pop	r16
    24d0:	ff 90       	pop	r15
    24d2:	ef 90       	pop	r14
    24d4:	df 90       	pop	r13
    24d6:	08 95       	ret

000024d8 <_ZN14SoftwareSerial16handle_interruptEv>:
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    24d8:	80 91 37 05 	lds	r24, 0x0537
    24dc:	90 91 38 05 	lds	r25, 0x0538
    24e0:	00 97       	sbiw	r24, 0x00	; 0
    24e2:	11 f0       	breq	.+4      	; 0x24e8 <_ZN14SoftwareSerial16handle_interruptEv+0x10>
  {
    active_object->recv();
    24e4:	0e 94 9a 11 	call	0x2334	; 0x2334 <_ZN14SoftwareSerial4recvEv>
    24e8:	08 95       	ret

000024ea <__vector_3>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    24ea:	1f 92       	push	r1
    24ec:	0f 92       	push	r0
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	0f 92       	push	r0
    24f2:	11 24       	eor	r1, r1
    24f4:	2f 93       	push	r18
    24f6:	3f 93       	push	r19
    24f8:	4f 93       	push	r20
    24fa:	5f 93       	push	r21
    24fc:	6f 93       	push	r22
    24fe:	7f 93       	push	r23
    2500:	8f 93       	push	r24
    2502:	9f 93       	push	r25
    2504:	af 93       	push	r26
    2506:	bf 93       	push	r27
    2508:	ef 93       	push	r30
    250a:	ff 93       	push	r31
  SoftwareSerial::handle_interrupt();
    250c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <_ZN14SoftwareSerial16handle_interruptEv>
}
    2510:	ff 91       	pop	r31
    2512:	ef 91       	pop	r30
    2514:	bf 91       	pop	r27
    2516:	af 91       	pop	r26
    2518:	9f 91       	pop	r25
    251a:	8f 91       	pop	r24
    251c:	7f 91       	pop	r23
    251e:	6f 91       	pop	r22
    2520:	5f 91       	pop	r21
    2522:	4f 91       	pop	r20
    2524:	3f 91       	pop	r19
    2526:	2f 91       	pop	r18
    2528:	0f 90       	pop	r0
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	0f 90       	pop	r0
    252e:	1f 90       	pop	r1
    2530:	18 95       	reti

00002532 <__vector_4>:
#endif

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
{
    2532:	1f 92       	push	r1
    2534:	0f 92       	push	r0
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	0f 92       	push	r0
    253a:	11 24       	eor	r1, r1
    253c:	2f 93       	push	r18
    253e:	3f 93       	push	r19
    2540:	4f 93       	push	r20
    2542:	5f 93       	push	r21
    2544:	6f 93       	push	r22
    2546:	7f 93       	push	r23
    2548:	8f 93       	push	r24
    254a:	9f 93       	push	r25
    254c:	af 93       	push	r26
    254e:	bf 93       	push	r27
    2550:	ef 93       	push	r30
    2552:	ff 93       	push	r31
  SoftwareSerial::handle_interrupt();
    2554:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <_ZN14SoftwareSerial16handle_interruptEv>
}
    2558:	ff 91       	pop	r31
    255a:	ef 91       	pop	r30
    255c:	bf 91       	pop	r27
    255e:	af 91       	pop	r26
    2560:	9f 91       	pop	r25
    2562:	8f 91       	pop	r24
    2564:	7f 91       	pop	r23
    2566:	6f 91       	pop	r22
    2568:	5f 91       	pop	r21
    256a:	4f 91       	pop	r20
    256c:	3f 91       	pop	r19
    256e:	2f 91       	pop	r18
    2570:	0f 90       	pop	r0
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	0f 90       	pop	r0
    2576:	1f 90       	pop	r1
    2578:	18 95       	reti

0000257a <__vector_5>:
#endif

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
{
    257a:	1f 92       	push	r1
    257c:	0f 92       	push	r0
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	0f 92       	push	r0
    2582:	11 24       	eor	r1, r1
    2584:	2f 93       	push	r18
    2586:	3f 93       	push	r19
    2588:	4f 93       	push	r20
    258a:	5f 93       	push	r21
    258c:	6f 93       	push	r22
    258e:	7f 93       	push	r23
    2590:	8f 93       	push	r24
    2592:	9f 93       	push	r25
    2594:	af 93       	push	r26
    2596:	bf 93       	push	r27
    2598:	ef 93       	push	r30
    259a:	ff 93       	push	r31
  SoftwareSerial::handle_interrupt();
    259c:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <_ZN14SoftwareSerial16handle_interruptEv>
}
    25a0:	ff 91       	pop	r31
    25a2:	ef 91       	pop	r30
    25a4:	bf 91       	pop	r27
    25a6:	af 91       	pop	r26
    25a8:	9f 91       	pop	r25
    25aa:	8f 91       	pop	r24
    25ac:	7f 91       	pop	r23
    25ae:	6f 91       	pop	r22
    25b0:	5f 91       	pop	r21
    25b2:	4f 91       	pop	r20
    25b4:	3f 91       	pop	r19
    25b6:	2f 91       	pop	r18
    25b8:	0f 90       	pop	r0
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	0f 90       	pop	r0
    25be:	1f 90       	pop	r1
    25c0:	18 95       	reti

000025c2 <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	ec 01       	movw	r28, r24
    25ca:	16 2f       	mov	r17, r22
  pinMode(tx, OUTPUT);
    25cc:	86 2f       	mov	r24, r22
    25ce:	61 e0       	ldi	r22, 0x01	; 1
    25d0:	0e 94 65 22 	call	0x44ca	; 0x44ca <pinMode>
  digitalWrite(tx, HIGH);
    25d4:	81 2f       	mov	r24, r17
    25d6:	61 e0       	ldi	r22, 0x01	; 1
    25d8:	0e 94 a4 22 	call	0x4548	; 0x4548 <digitalWrite>
  _transmitBitMask = digitalPinToBitMask(tx);
    25dc:	81 2f       	mov	r24, r17
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	fc 01       	movw	r30, r24
    25e2:	e6 5d       	subi	r30, 0xD6	; 214
    25e4:	fe 4f       	sbci	r31, 0xFE	; 254
    25e6:	e4 91       	lpm	r30, Z
    25e8:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
    25ea:	fc 01       	movw	r30, r24
    25ec:	ea 5e       	subi	r30, 0xEA	; 234
    25ee:	fe 4f       	sbci	r31, 0xFE	; 254
    25f0:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
    25f2:	f0 e0       	ldi	r31, 0x00	; 0
    25f4:	ee 0f       	add	r30, r30
    25f6:	ff 1f       	adc	r31, r31
    25f8:	ee 5f       	subi	r30, 0xFE	; 254
    25fa:	fe 4f       	sbci	r31, 0xFE	; 254
    25fc:	85 91       	lpm	r24, Z+
    25fe:	94 91       	lpm	r25, Z
    2600:	89 8b       	std	Y+17, r24	; 0x11
    2602:	9a 8b       	std	Y+18, r25	; 0x12
}
    2604:	df 91       	pop	r29
    2606:	cf 91       	pop	r28
    2608:	1f 91       	pop	r17
    260a:	08 95       	ret

0000260c <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
    260c:	1f 93       	push	r17
    260e:	cf 93       	push	r28
    2610:	df 93       	push	r29
    2612:	ec 01       	movw	r28, r24
    2614:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
    2616:	86 2f       	mov	r24, r22
    2618:	60 e0       	ldi	r22, 0x00	; 0
    261a:	0e 94 65 22 	call	0x44ca	; 0x44ca <pinMode>
  if (!_inverse_logic)
    261e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2620:	81 fd       	sbrc	r24, 1
    2622:	04 c0       	rjmp	.+8      	; 0x262c <_ZN14SoftwareSerial5setRXEh+0x20>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    2624:	81 2f       	mov	r24, r17
    2626:	61 e0       	ldi	r22, 0x01	; 1
    2628:	0e 94 a4 22 	call	0x4548	; 0x4548 <digitalWrite>
  _receivePin = rx;
    262c:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
    262e:	81 2f       	mov	r24, r17
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	fc 01       	movw	r30, r24
    2634:	e6 5d       	subi	r30, 0xD6	; 214
    2636:	fe 4f       	sbci	r31, 0xFE	; 254
    2638:	e4 91       	lpm	r30, Z
    263a:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
    263c:	fc 01       	movw	r30, r24
    263e:	ea 5e       	subi	r30, 0xEA	; 234
    2640:	fe 4f       	sbci	r31, 0xFE	; 254
    2642:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
    2644:	f0 e0       	ldi	r31, 0x00	; 0
    2646:	ee 0f       	add	r30, r30
    2648:	ff 1f       	adc	r31, r31
    264a:	e4 5f       	subi	r30, 0xF4	; 244
    264c:	fe 4f       	sbci	r31, 0xFE	; 254
    264e:	85 91       	lpm	r24, Z+
    2650:	94 91       	lpm	r25, Z
    2652:	8e 87       	std	Y+14, r24	; 0x0e
    2654:	9f 87       	std	Y+15, r25	; 0x0f
}
    2656:	df 91       	pop	r29
    2658:	cf 91       	pop	r28
    265a:	1f 91       	pop	r17
    265c:	08 95       	ret

0000265e <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	ec 01       	movw	r28, r24
    2666:	16 2f       	mov	r17, r22
  public:
    Print() : write_error(0) {}
    2668:	1b 82       	std	Y+3, r1	; 0x03
    266a:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    266c:	88 ee       	ldi	r24, 0xE8	; 232
    266e:	93 e0       	ldi	r25, 0x03	; 3
    2670:	a0 e0       	ldi	r26, 0x00	; 0
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	8c 83       	std	Y+4, r24	; 0x04
    2676:	9d 83       	std	Y+5, r25	; 0x05
    2678:	ae 83       	std	Y+6, r26	; 0x06
    267a:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
    267c:	86 e5       	ldi	r24, 0x56	; 86
    267e:	91 e0       	ldi	r25, 0x01	; 1
    2680:	99 83       	std	Y+1, r25	; 0x01
    2682:	88 83       	st	Y, r24
    2684:	1c 8a       	std	Y+20, r1	; 0x14
    2686:	1b 8a       	std	Y+19, r1	; 0x13
    2688:	1e 8a       	std	Y+22, r1	; 0x16
    268a:	1d 8a       	std	Y+21, r1	; 0x15
    268c:	18 8e       	std	Y+24, r1	; 0x18
    268e:	1f 8a       	std	Y+23, r1	; 0x17
    2690:	1a 8e       	std	Y+26, r1	; 0x1a
    2692:	19 8e       	std	Y+25, r1	; 0x19
    2694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2696:	21 70       	andi	r18, 0x01	; 1
    2698:	22 0f       	add	r18, r18
    269a:	8c 7f       	andi	r24, 0xFC	; 252
    269c:	82 2b       	or	r24, r18
    269e:	8b 8f       	std	Y+27, r24	; 0x1b
{
  setTX(transmitPin);
    26a0:	ce 01       	movw	r24, r28
    26a2:	64 2f       	mov	r22, r20
    26a4:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
    26a8:	ce 01       	movw	r24, r28
    26aa:	61 2f       	mov	r22, r17
    26ac:	0e 94 06 13 	call	0x260c	; 0x260c <_ZN14SoftwareSerial5setRXEh>
}
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	1f 91       	pop	r17
    26b6:	08 95       	ret

000026b8 <_ZN14SoftwareSerial5beginEl>:
//
// Public methods
//

void SoftwareSerial::begin(long speed)
{
    26b8:	cf 92       	push	r12
    26ba:	df 92       	push	r13
    26bc:	ef 92       	push	r14
    26be:	ff 92       	push	r15
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	ec 01       	movw	r28, r24
    26c6:	6a 01       	movw	r12, r20
    26c8:	7b 01       	movw	r14, r22
	
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
    26ca:	1a 8e       	std	Y+26, r1	; 0x1a
    26cc:	19 8e       	std	Y+25, r1	; 0x19
    26ce:	18 8e       	std	Y+24, r1	; 0x18
    26d0:	1f 8a       	std	Y+23, r1	; 0x17
    26d2:	1e 8a       	std	Y+22, r1	; 0x16
    26d4:	1d 8a       	std	Y+21, r1	; 0x15
    26d6:	1c 8a       	std	Y+20, r1	; 0x14
    26d8:	1b 8a       	std	Y+19, r1	; 0x13
  //_rx_delay_stopbit=1;

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
  {
    long baud = pgm_read_dword(&table[i].baud);
    26de:	a9 01       	movw	r20, r18
    26e0:	44 0f       	add	r20, r20
    26e2:	55 1f       	adc	r21, r21
    26e4:	42 0f       	add	r20, r18
    26e6:	53 1f       	adc	r21, r19
    26e8:	44 0f       	add	r20, r20
    26ea:	55 1f       	adc	r21, r21
    26ec:	44 0f       	add	r20, r20
    26ee:	55 1f       	adc	r21, r21
    26f0:	fa 01       	movw	r30, r20
    26f2:	e8 59       	subi	r30, 0x98	; 152
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	85 91       	lpm	r24, Z+
    26f8:	95 91       	lpm	r25, Z+
    26fa:	a5 91       	lpm	r26, Z+
    26fc:	b4 91       	lpm	r27, Z
    if (baud == speed)
    26fe:	8c 15       	cp	r24, r12
    2700:	9d 05       	cpc	r25, r13
    2702:	ae 05       	cpc	r26, r14
    2704:	bf 05       	cpc	r27, r15
    2706:	e9 f4       	brne	.+58     	; 0x2742 <_ZN14SoftwareSerial5beginEl+0x8a>
    {
      _rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
    2708:	fa 01       	movw	r30, r20
    270a:	e4 59       	subi	r30, 0x94	; 148
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	85 91       	lpm	r24, Z+
    2710:	94 91       	lpm	r25, Z
    2712:	8b 8b       	std	Y+19, r24	; 0x13
    2714:	9c 8b       	std	Y+20, r25	; 0x14
      _rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
    2716:	fa 01       	movw	r30, r20
    2718:	e2 59       	subi	r30, 0x92	; 146
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	85 91       	lpm	r24, Z+
    271e:	94 91       	lpm	r25, Z
    2720:	8d 8b       	std	Y+21, r24	; 0x15
    2722:	9e 8b       	std	Y+22, r25	; 0x16
      _rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
    2724:	fa 01       	movw	r30, r20
    2726:	e0 59       	subi	r30, 0x90	; 144
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	85 91       	lpm	r24, Z+
    272c:	94 91       	lpm	r25, Z
    272e:	8f 8b       	std	Y+23, r24	; 0x17
    2730:	98 8f       	std	Y+24, r25	; 0x18
      _tx_delay = pgm_read_word(&table[i].tx_delay);
    2732:	4e 58       	subi	r20, 0x8E	; 142
    2734:	5f 4f       	sbci	r21, 0xFF	; 255
    2736:	fa 01       	movw	r30, r20
    2738:	85 91       	lpm	r24, Z+
    273a:	94 91       	lpm	r25, Z
    273c:	89 8f       	std	Y+25, r24	; 0x19
    273e:	9a 8f       	std	Y+26, r25	; 0x1a
      break;
    2740:	06 c0       	rjmp	.+12     	; 0x274e <_ZN14SoftwareSerial5beginEl+0x96>
{
	
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
  //_rx_delay_stopbit=1;

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
    2742:	2f 5f       	subi	r18, 0xFF	; 255
    2744:	3f 4f       	sbci	r19, 0xFF	; 255
    2746:	2c 30       	cpi	r18, 0x0C	; 12
    2748:	31 05       	cpc	r19, r1
    274a:	09 f0       	breq	.+2      	; 0x274e <_ZN14SoftwareSerial5beginEl+0x96>
    274c:	c8 cf       	rjmp	.-112    	; 0x26de <_ZN14SoftwareSerial5beginEl+0x26>
      break;
    }
  }

  // Set up RX interrupts, but only if we have a valid RX baud rate
  if (_rx_delay_stopbit)
    274e:	8f 89       	ldd	r24, Y+23	; 0x17
    2750:	98 8d       	ldd	r25, Y+24	; 0x18
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	09 f4       	brne	.+2      	; 0x2758 <_ZN14SoftwareSerial5beginEl+0xa0>
    2756:	48 c0       	rjmp	.+144    	; 0x27e8 <_ZN14SoftwareSerial5beginEl+0x130>
  {
    if (digitalPinToPCICR(_receivePin))
    2758:	9c 85       	ldd	r25, Y+12	; 0x0c
    275a:	96 31       	cpi	r25, 0x16	; 22
    275c:	08 f0       	brcs	.+2      	; 0x2760 <_ZN14SoftwareSerial5beginEl+0xa8>
    275e:	40 c0       	rjmp	.+128    	; 0x27e0 <_ZN14SoftwareSerial5beginEl+0x128>
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
    2760:	20 91 68 00 	lds	r18, 0x0068
    2764:	98 30       	cpi	r25, 0x08	; 8
    2766:	20 f0       	brcs	.+8      	; 0x2770 <_ZN14SoftwareSerial5beginEl+0xb8>
    2768:	9e 30       	cpi	r25, 0x0E	; 14
    276a:	20 f0       	brcs	.+8      	; 0x2774 <_ZN14SoftwareSerial5beginEl+0xbc>
    276c:	82 e0       	ldi	r24, 0x02	; 2
    276e:	03 c0       	rjmp	.+6      	; 0x2776 <_ZN14SoftwareSerial5beginEl+0xbe>
    2770:	84 e0       	ldi	r24, 0x04	; 4
    2772:	01 c0       	rjmp	.+2      	; 0x2776 <_ZN14SoftwareSerial5beginEl+0xbe>
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	82 2b       	or	r24, r18
    2778:	80 93 68 00 	sts	0x0068, r24
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
    277c:	5c 85       	ldd	r21, Y+12	; 0x0c
    277e:	58 30       	cpi	r21, 0x08	; 8
    2780:	48 f0       	brcs	.+18     	; 0x2794 <_ZN14SoftwareSerial5beginEl+0xdc>
    2782:	5e 30       	cpi	r21, 0x0E	; 14
    2784:	60 f0       	brcs	.+24     	; 0x279e <_ZN14SoftwareSerial5beginEl+0xe6>
    2786:	56 31       	cpi	r21, 0x16	; 22
    2788:	c8 f1       	brcs	.+114    	; 0x27fc <_ZN14SoftwareSerial5beginEl+0x144>
    278a:	e0 e0       	ldi	r30, 0x00	; 0
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	a0 e0       	ldi	r26, 0x00	; 0
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	09 c0       	rjmp	.+18     	; 0x27a6 <_ZN14SoftwareSerial5beginEl+0xee>
    2794:	ed e6       	ldi	r30, 0x6D	; 109
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	ad e6       	ldi	r26, 0x6D	; 109
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	04 c0       	rjmp	.+8      	; 0x27a6 <_ZN14SoftwareSerial5beginEl+0xee>
    279e:	eb e6       	ldi	r30, 0x6B	; 107
    27a0:	f0 e0       	ldi	r31, 0x00	; 0
    27a2:	ab e6       	ldi	r26, 0x6B	; 107
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	4c 91       	ld	r20, X
    27a8:	58 30       	cpi	r21, 0x08	; 8
    27aa:	40 f4       	brcc	.+16     	; 0x27bc <_ZN14SoftwareSerial5beginEl+0x104>
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <_ZN14SoftwareSerial5beginEl+0xfe>
    27b2:	88 0f       	add	r24, r24
    27b4:	99 1f       	adc	r25, r25
    27b6:	5a 95       	dec	r21
    27b8:	e2 f7       	brpl	.-8      	; 0x27b2 <_ZN14SoftwareSerial5beginEl+0xfa>
    27ba:	10 c0       	rjmp	.+32     	; 0x27dc <_ZN14SoftwareSerial5beginEl+0x124>
    27bc:	25 2f       	mov	r18, r21
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	5e 30       	cpi	r21, 0x0E	; 14
    27c2:	18 f4       	brcc	.+6      	; 0x27ca <_ZN14SoftwareSerial5beginEl+0x112>
    27c4:	28 50       	subi	r18, 0x08	; 8
    27c6:	30 40       	sbci	r19, 0x00	; 0
    27c8:	02 c0       	rjmp	.+4      	; 0x27ce <_ZN14SoftwareSerial5beginEl+0x116>
    27ca:	2e 50       	subi	r18, 0x0E	; 14
    27cc:	30 40       	sbci	r19, 0x00	; 0
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	90 e0       	ldi	r25, 0x00	; 0
    27d2:	02 c0       	rjmp	.+4      	; 0x27d8 <_ZN14SoftwareSerial5beginEl+0x120>
    27d4:	88 0f       	add	r24, r24
    27d6:	99 1f       	adc	r25, r25
    27d8:	2a 95       	dec	r18
    27da:	e2 f7       	brpl	.-8      	; 0x27d4 <_ZN14SoftwareSerial5beginEl+0x11c>
    27dc:	84 2b       	or	r24, r20
    27de:	80 83       	st	Z, r24
    }
    tunedDelay(_tx_delay); // if we were low this establishes the end
    27e0:	89 8d       	ldd	r24, Y+25	; 0x19
    27e2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    27e4:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN14SoftwareSerial10tunedDelayEj>
#if _DEBUG
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
    27e8:	ce 01       	movw	r24, r28
    27ea:	0e 94 80 11 	call	0x2300	; 0x2300 <_ZN14SoftwareSerial6listenEv>
}
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	ff 90       	pop	r15
    27f4:	ef 90       	pop	r14
    27f6:	df 90       	pop	r13
    27f8:	cf 90       	pop	r12
    27fa:	08 95       	ret
  if (_rx_delay_stopbit)
  {
    if (digitalPinToPCICR(_receivePin))
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
    27fc:	ec e6       	ldi	r30, 0x6C	; 108
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	ac e6       	ldi	r26, 0x6C	; 108
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	d0 cf       	rjmp	.-96     	; 0x27a6 <_ZN14SoftwareSerial5beginEl+0xee>

00002806 <_ZN14SoftwareSerial3endEv>:
  listen();
}

void SoftwareSerial::end()
{
  if (digitalPinToPCMSK(_receivePin))
    2806:	fc 01       	movw	r30, r24
    2808:	44 85       	ldd	r20, Z+12	; 0x0c
    280a:	46 31       	cpi	r20, 0x16	; 22
    280c:	50 f5       	brcc	.+84     	; 0x2862 <_ZN14SoftwareSerial3endEv+0x5c>
    *digitalPinToPCMSK(_receivePin) &= ~_BV(digitalPinToPCMSKbit(_receivePin));
    280e:	48 30       	cpi	r20, 0x08	; 8
    2810:	28 f0       	brcs	.+10     	; 0x281c <_ZN14SoftwareSerial3endEv+0x16>
    2812:	4e 30       	cpi	r20, 0x0E	; 14
    2814:	30 f0       	brcs	.+12     	; 0x2822 <_ZN14SoftwareSerial3endEv+0x1c>
    2816:	ec e6       	ldi	r30, 0x6C	; 108
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	05 c0       	rjmp	.+10     	; 0x2826 <_ZN14SoftwareSerial3endEv+0x20>
    281c:	ed e6       	ldi	r30, 0x6D	; 109
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	02 c0       	rjmp	.+4      	; 0x2826 <_ZN14SoftwareSerial3endEv+0x20>
    2822:	eb e6       	ldi	r30, 0x6B	; 107
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	50 81       	ld	r21, Z
    2828:	48 30       	cpi	r20, 0x08	; 8
    282a:	40 f4       	brcc	.+16     	; 0x283c <_ZN14SoftwareSerial3endEv+0x36>
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	02 c0       	rjmp	.+4      	; 0x2836 <_ZN14SoftwareSerial3endEv+0x30>
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	4a 95       	dec	r20
    2838:	e2 f7       	brpl	.-8      	; 0x2832 <_ZN14SoftwareSerial3endEv+0x2c>
    283a:	10 c0       	rjmp	.+32     	; 0x285c <_ZN14SoftwareSerial3endEv+0x56>
    283c:	24 2f       	mov	r18, r20
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	4e 30       	cpi	r20, 0x0E	; 14
    2842:	18 f4       	brcc	.+6      	; 0x284a <_ZN14SoftwareSerial3endEv+0x44>
    2844:	28 50       	subi	r18, 0x08	; 8
    2846:	30 40       	sbci	r19, 0x00	; 0
    2848:	02 c0       	rjmp	.+4      	; 0x284e <_ZN14SoftwareSerial3endEv+0x48>
    284a:	2e 50       	subi	r18, 0x0E	; 14
    284c:	30 40       	sbci	r19, 0x00	; 0
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	02 c0       	rjmp	.+4      	; 0x2858 <_ZN14SoftwareSerial3endEv+0x52>
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	2a 95       	dec	r18
    285a:	e2 f7       	brpl	.-8      	; 0x2854 <_ZN14SoftwareSerial3endEv+0x4e>
    285c:	80 95       	com	r24
    285e:	85 23       	and	r24, r21
    2860:	80 83       	st	Z, r24
    2862:	08 95       	ret

00002864 <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    2864:	26 e5       	ldi	r18, 0x56	; 86
    2866:	31 e0       	ldi	r19, 0x01	; 1
    2868:	fc 01       	movw	r30, r24
    286a:	31 83       	std	Z+1, r19	; 0x01
    286c:	20 83       	st	Z, r18
{
  end();
    286e:	0e 94 03 14 	call	0x2806	; 0x2806 <_ZN14SoftwareSerial3endEv>
}
    2872:	08 95       	ret

00002874 <checkForString>:

void testFunction(String& passString){
	passString+="asd";
}

boolean checkForString(String compare1, String compare2){
    2874:	9c 01       	movw	r18, r24
    2876:	cb 01       	movw	r24, r22
	int index=compare2.indexOf(compare1);
    2878:	b9 01       	movw	r22, r18
    287a:	0e 94 5e 28 	call	0x50bc	; 0x50bc <_ZNK6String7indexOfERKS_>
	if(index<0){
		return false;
    287e:	89 2f       	mov	r24, r25
    2880:	80 95       	com	r24
	}else{
		//Serial.println("Contains: "+compare1+" : "+compare2);
		return true;
	}
}
    2882:	88 1f       	adc	r24, r24
    2884:	88 27       	eor	r24, r24
    2886:	88 1f       	adc	r24, r24
    2888:	08 95       	ret

0000288a <initializeString>:

void initializeString(String& passString,int type){
    288a:	0f 93       	push	r16
    288c:	1f 93       	push	r17
    288e:	cf 93       	push	r28
    2890:	df 93       	push	r29
    2892:	8c 01       	movw	r16, r24
	switch(type){
    2894:	61 15       	cp	r22, r1
    2896:	71 05       	cpc	r23, r1
    2898:	21 f0       	breq	.+8      	; 0x28a2 <initializeString+0x18>
    289a:	61 30       	cpi	r22, 0x01	; 1
    289c:	71 05       	cpc	r23, r1
    289e:	e1 f4       	brne	.+56     	; 0x28d8 <initializeString+0x4e>
    28a0:	0e c0       	rjmp	.+28     	; 0x28be <initializeString+0x34>
		case LONG_STRING:{
			passString="";
    28a2:	66 e7       	ldi	r22, 0x76	; 118
    28a4:	71 e0       	ldi	r23, 0x01	; 1
    28a6:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN6StringaSEPKc>
    28aa:	cc e8       	ldi	r28, 0x8C	; 140
    28ac:	d0 e0       	ldi	r29, 0x00	; 0
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    28ae:	c8 01       	movw	r24, r16
    28b0:	67 e7       	ldi	r22, 0x77	; 119
    28b2:	71 e0       	ldi	r23, 0x01	; 1
    28b4:	0e 94 ee 29 	call	0x53dc	; 0x53dc <_ZN6String6concatEPKc>
    28b8:	21 97       	sbiw	r28, 0x01	; 1
			for(int i=0;i<140;i++) passString+=" ";
    28ba:	c9 f7       	brne	.-14     	; 0x28ae <initializeString+0x24>
    28bc:	0d c0       	rjmp	.+26     	; 0x28d8 <initializeString+0x4e>
		//passString="                                                                                                    ";
		break;
		}		
		
		case SHORT_STRING:{
			passString="";
    28be:	66 e7       	ldi	r22, 0x76	; 118
    28c0:	71 e0       	ldi	r23, 0x01	; 1
    28c2:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN6StringaSEPKc>
    28c6:	cf e0       	ldi	r28, 0x0F	; 15
    28c8:	d0 e0       	ldi	r29, 0x00	; 0
    28ca:	c8 01       	movw	r24, r16
    28cc:	67 e7       	ldi	r22, 0x77	; 119
    28ce:	71 e0       	ldi	r23, 0x01	; 1
    28d0:	0e 94 ee 29 	call	0x53dc	; 0x53dc <_ZN6String6concatEPKc>
    28d4:	21 97       	sbiw	r28, 0x01	; 1
			for(int i=0;i<15;i++) passString+=" ";
    28d6:	c9 f7       	brne	.-14     	; 0x28ca <initializeString+0x40>
		//passString="                    ";
		break;
		}		
	}
}
    28d8:	df 91       	pop	r29
    28da:	cf 91       	pop	r28
    28dc:	1f 91       	pop	r17
    28de:	0f 91       	pop	r16
    28e0:	08 95       	ret

000028e2 <getValue>:

 String getValue(String& data, char separator, int index)
 {
    28e2:	2f 92       	push	r2
    28e4:	3f 92       	push	r3
    28e6:	4f 92       	push	r4
    28e8:	5f 92       	push	r5
    28ea:	6f 92       	push	r6
    28ec:	7f 92       	push	r7
    28ee:	8f 92       	push	r8
    28f0:	9f 92       	push	r9
    28f2:	af 92       	push	r10
    28f4:	bf 92       	push	r11
    28f6:	cf 92       	push	r12
    28f8:	df 92       	push	r13
    28fa:	ef 92       	push	r14
    28fc:	ff 92       	push	r15
    28fe:	0f 93       	push	r16
    2900:	1f 93       	push	r17
    2902:	cf 93       	push	r28
    2904:	df 93       	push	r29
    2906:	0f 92       	push	r0
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	4c 01       	movw	r8, r24
    290e:	5b 01       	movw	r10, r22
    2910:	39 01       	movw	r6, r18
	 int found = 0;
 int strIndex[] = {0, -1};
 int maxIndex = data.length()-1;
    2912:	fb 01       	movw	r30, r22
    2914:	04 81       	ldd	r16, Z+4	; 0x04
    2916:	15 81       	ldd	r17, Z+5	; 0x05
    2918:	01 50       	subi	r16, 0x01	; 1
    291a:	10 40       	sbci	r17, 0x00	; 0
}

 String getValue(String& data, char separator, int index)
 {
	 int found = 0;
 int strIndex[] = {0, -1};
    291c:	ee 24       	eor	r14, r14
    291e:	ea 94       	dec	r14
    2920:	fe 2c       	mov	r15, r14
    2922:	44 24       	eor	r4, r4
    2924:	55 24       	eor	r5, r5
 int maxIndex = data.length()-1;

 for(int i=0; i<=maxIndex && found<=index; i++){
    2926:	22 24       	eor	r2, r2
    2928:	33 24       	eor	r3, r3
	}
}

 String getValue(String& data, char separator, int index)
 {
	 int found = 0;
    292a:	cc 24       	eor	r12, r12
    292c:	dd 24       	eor	r13, r13
 int strIndex[] = {0, -1};
 int maxIndex = data.length()-1;

 for(int i=0; i<=maxIndex && found<=index; i++){
    292e:	14 c0       	rjmp	.+40     	; 0x2958 <getValue+0x76>
	 if(data.charAt(i)==separator || i==maxIndex){
    2930:	20 16       	cp	r2, r16
    2932:	31 06       	cpc	r3, r17
    2934:	71 f4       	brne	.+28     	; 0x2952 <getValue+0x70>
		 found++;
    2936:	08 94       	sec
    2938:	c1 1c       	adc	r12, r1
    293a:	d1 1c       	adc	r13, r1
		 strIndex[0] = strIndex[1]+1;
    293c:	27 01       	movw	r4, r14
    293e:	08 94       	sec
    2940:	41 1c       	adc	r4, r1
    2942:	51 1c       	adc	r5, r1
		 strIndex[1] = (i == maxIndex) ? i+1 : i;
    2944:	71 01       	movw	r14, r2
    2946:	20 16       	cp	r2, r16
    2948:	31 06       	cpc	r3, r17
    294a:	19 f4       	brne	.+6      	; 0x2952 <getValue+0x70>
    294c:	08 94       	sec
    294e:	e1 1c       	adc	r14, r1
    2950:	f1 1c       	adc	r15, r1
 {
	 int found = 0;
 int strIndex[] = {0, -1};
 int maxIndex = data.length()-1;

 for(int i=0; i<=maxIndex && found<=index; i++){
    2952:	08 94       	sec
    2954:	21 1c       	adc	r2, r1
    2956:	31 1c       	adc	r3, r1
    2958:	02 15       	cp	r16, r2
    295a:	13 05       	cpc	r17, r3
    295c:	64 f0       	brlt	.+24     	; 0x2976 <getValue+0x94>
    295e:	6c 14       	cp	r6, r12
    2960:	7d 04       	cpc	r7, r13
    2962:	64 f0       	brlt	.+24     	; 0x297c <getValue+0x9a>
	 if(data.charAt(i)==separator || i==maxIndex){
    2964:	c5 01       	movw	r24, r10
    2966:	b1 01       	movw	r22, r2
    2968:	49 83       	std	Y+1, r20	; 0x01
    296a:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <_ZNK6String6charAtEj>
    296e:	49 81       	ldd	r20, Y+1	; 0x01
    2970:	84 17       	cp	r24, r20
    2972:	f1 f6       	brne	.-68     	; 0x2930 <getValue+0x4e>
    2974:	e0 cf       	rjmp	.-64     	; 0x2936 <getValue+0x54>
		 strIndex[0] = strIndex[1]+1;
		 strIndex[1] = (i == maxIndex) ? i+1 : i;
	 }
 }

 return found>index ? data.substring(strIndex[0], strIndex[1]) : "";
    2976:	6c 14       	cp	r6, r12
    2978:	7d 04       	cpc	r7, r13
    297a:	3c f4       	brge	.+14     	; 0x298a <getValue+0xa8>
    297c:	c4 01       	movw	r24, r8
    297e:	b5 01       	movw	r22, r10
    2980:	a2 01       	movw	r20, r4
    2982:	97 01       	movw	r18, r14
    2984:	0e 94 65 2b 	call	0x56ca	; 0x56ca <_ZNK6String9substringEjj>
    2988:	05 c0       	rjmp	.+10     	; 0x2994 <getValue+0xb2>
    298a:	c4 01       	movw	r24, r8
    298c:	66 e7       	ldi	r22, 0x76	; 118
    298e:	71 e0       	ldi	r23, 0x01	; 1
    2990:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    2994:	c4 01       	movw	r24, r8
    2996:	0f 90       	pop	r0
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	0f 91       	pop	r16
    29a0:	ff 90       	pop	r15
    29a2:	ef 90       	pop	r14
    29a4:	df 90       	pop	r13
    29a6:	cf 90       	pop	r12
    29a8:	bf 90       	pop	r11
    29aa:	af 90       	pop	r10
    29ac:	9f 90       	pop	r9
    29ae:	8f 90       	pop	r8
    29b0:	7f 90       	pop	r7
    29b2:	6f 90       	pop	r6
    29b4:	5f 90       	pop	r5
    29b6:	4f 90       	pop	r4
    29b8:	3f 90       	pop	r3
    29ba:	2f 90       	pop	r2
    29bc:	08 95       	ret

000029be <__vector_13>:
#include "TimerOne.h"

TimerOne Timer1;              // preinstatiate

ISR(TIMER1_OVF_vect)          // interrupt service routine that wraps a user defined function supplied by attachInterrupt
{
    29be:	1f 92       	push	r1
    29c0:	0f 92       	push	r0
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	0f 92       	push	r0
    29c6:	11 24       	eor	r1, r1
    29c8:	2f 93       	push	r18
    29ca:	3f 93       	push	r19
    29cc:	4f 93       	push	r20
    29ce:	5f 93       	push	r21
    29d0:	6f 93       	push	r22
    29d2:	7f 93       	push	r23
    29d4:	8f 93       	push	r24
    29d6:	9f 93       	push	r25
    29d8:	af 93       	push	r26
    29da:	bf 93       	push	r27
    29dc:	ef 93       	push	r30
    29de:	ff 93       	push	r31
  Timer1.isrCallback();
    29e0:	e0 91 3d 05 	lds	r30, 0x053D
    29e4:	f0 91 3e 05 	lds	r31, 0x053E
    29e8:	09 95       	icall
}
    29ea:	ff 91       	pop	r31
    29ec:	ef 91       	pop	r30
    29ee:	bf 91       	pop	r27
    29f0:	af 91       	pop	r26
    29f2:	9f 91       	pop	r25
    29f4:	8f 91       	pop	r24
    29f6:	7f 91       	pop	r23
    29f8:	6f 91       	pop	r22
    29fa:	5f 91       	pop	r21
    29fc:	4f 91       	pop	r20
    29fe:	3f 91       	pop	r19
    2a00:	2f 91       	pop	r18
    2a02:	0f 90       	pop	r0
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	0f 90       	pop	r0
    2a08:	1f 90       	pop	r1
    2a0a:	18 95       	reti

00002a0c <_ZN8TimerOne9setPeriodEl>:
  setPeriod(microseconds);
}


void TimerOne::setPeriod(long microseconds)		// AR modified for atomic access
{
    2a0c:	fc 01       	movw	r30, r24
  
  long cycles = (F_CPU / 2000000) * microseconds;                                // the counter runs backwards after TOP, interrupt is at BOTTOM so divide microseconds by 2
    2a0e:	a3 e0       	ldi	r26, 0x03	; 3
    2a10:	44 0f       	add	r20, r20
    2a12:	55 1f       	adc	r21, r21
    2a14:	66 1f       	adc	r22, r22
    2a16:	77 1f       	adc	r23, r23
    2a18:	aa 95       	dec	r26
    2a1a:	d1 f7       	brne	.-12     	; 0x2a10 <_ZN8TimerOne9setPeriodEl+0x4>
  if(cycles < RESOLUTION)              clockSelectBits = _BV(CS10);              // no prescale, full xtal
    2a1c:	40 30       	cpi	r20, 0x00	; 0
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	58 07       	cpc	r21, r24
    2a22:	81 e0       	ldi	r24, 0x01	; 1
    2a24:	68 07       	cpc	r22, r24
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	78 07       	cpc	r23, r24
    2a2a:	14 f4       	brge	.+4      	; 0x2a30 <_ZN8TimerOne9setPeriodEl+0x24>
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	10 c0       	rjmp	.+32     	; 0x2a50 <_ZN8TimerOne9setPeriodEl+0x44>
  else if((cycles >>= 3) < RESOLUTION) clockSelectBits = _BV(CS11);              // prescale by /8
    2a30:	33 e0       	ldi	r19, 0x03	; 3
    2a32:	75 95       	asr	r23
    2a34:	67 95       	ror	r22
    2a36:	57 95       	ror	r21
    2a38:	47 95       	ror	r20
    2a3a:	3a 95       	dec	r19
    2a3c:	d1 f7       	brne	.-12     	; 0x2a32 <_ZN8TimerOne9setPeriodEl+0x26>
    2a3e:	40 30       	cpi	r20, 0x00	; 0
    2a40:	80 e0       	ldi	r24, 0x00	; 0
    2a42:	58 07       	cpc	r21, r24
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	68 07       	cpc	r22, r24
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	78 07       	cpc	r23, r24
    2a4c:	1c f4       	brge	.+6      	; 0x2a54 <_ZN8TimerOne9setPeriodEl+0x48>
    2a4e:	82 e0       	ldi	r24, 0x02	; 2
    2a50:	82 83       	std	Z+2, r24	; 0x02
    2a52:	37 c0       	rjmp	.+110    	; 0x2ac2 <_ZN8TimerOne9setPeriodEl+0xb6>
  else if((cycles >>= 3) < RESOLUTION) clockSelectBits = _BV(CS11) | _BV(CS10);  // prescale by /64
    2a54:	23 e0       	ldi	r18, 0x03	; 3
    2a56:	75 95       	asr	r23
    2a58:	67 95       	ror	r22
    2a5a:	57 95       	ror	r21
    2a5c:	47 95       	ror	r20
    2a5e:	2a 95       	dec	r18
    2a60:	d1 f7       	brne	.-12     	; 0x2a56 <_ZN8TimerOne9setPeriodEl+0x4a>
    2a62:	40 30       	cpi	r20, 0x00	; 0
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	58 07       	cpc	r21, r24
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	68 07       	cpc	r22, r24
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	78 07       	cpc	r23, r24
    2a70:	14 f4       	brge	.+4      	; 0x2a76 <_ZN8TimerOne9setPeriodEl+0x6a>
    2a72:	83 e0       	ldi	r24, 0x03	; 3
    2a74:	ed cf       	rjmp	.-38     	; 0x2a50 <_ZN8TimerOne9setPeriodEl+0x44>
  else if((cycles >>= 2) < RESOLUTION) clockSelectBits = _BV(CS12);              // prescale by /256
    2a76:	92 e0       	ldi	r25, 0x02	; 2
    2a78:	75 95       	asr	r23
    2a7a:	67 95       	ror	r22
    2a7c:	57 95       	ror	r21
    2a7e:	47 95       	ror	r20
    2a80:	9a 95       	dec	r25
    2a82:	d1 f7       	brne	.-12     	; 0x2a78 <_ZN8TimerOne9setPeriodEl+0x6c>
    2a84:	40 30       	cpi	r20, 0x00	; 0
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	58 07       	cpc	r21, r24
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	68 07       	cpc	r22, r24
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	78 07       	cpc	r23, r24
    2a92:	14 f4       	brge	.+4      	; 0x2a98 <_ZN8TimerOne9setPeriodEl+0x8c>
    2a94:	84 e0       	ldi	r24, 0x04	; 4
    2a96:	dc cf       	rjmp	.-72     	; 0x2a50 <_ZN8TimerOne9setPeriodEl+0x44>
  else if((cycles >>= 2) < RESOLUTION) clockSelectBits = _BV(CS12) | _BV(CS10);  // prescale by /1024
    2a98:	82 e0       	ldi	r24, 0x02	; 2
    2a9a:	75 95       	asr	r23
    2a9c:	67 95       	ror	r22
    2a9e:	57 95       	ror	r21
    2aa0:	47 95       	ror	r20
    2aa2:	8a 95       	dec	r24
    2aa4:	d1 f7       	brne	.-12     	; 0x2a9a <_ZN8TimerOne9setPeriodEl+0x8e>
    2aa6:	85 e0       	ldi	r24, 0x05	; 5
    2aa8:	82 83       	std	Z+2, r24	; 0x02
    2aaa:	40 30       	cpi	r20, 0x00	; 0
    2aac:	80 e0       	ldi	r24, 0x00	; 0
    2aae:	58 07       	cpc	r21, r24
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	68 07       	cpc	r22, r24
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	78 07       	cpc	r23, r24
    2ab8:	24 f0       	brlt	.+8      	; 0x2ac2 <_ZN8TimerOne9setPeriodEl+0xb6>
  else        cycles = RESOLUTION - 1, clockSelectBits = _BV(CS12) | _BV(CS10);  // request was out of bounds, set as maximum
    2aba:	4f ef       	ldi	r20, 0xFF	; 255
    2abc:	5f ef       	ldi	r21, 0xFF	; 255
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
  
  oldSREG = SREG;				
    2ac2:	8f b7       	in	r24, 0x3f	; 63
    2ac4:	83 83       	std	Z+3, r24	; 0x03
  cli();							// Disable interrupts for 16 bit register access
    2ac6:	f8 94       	cli
  ICR1 = pwmPeriod = cycles;                                          // ICR1 is TOP in p & f correct pwm mode
    2ac8:	51 83       	std	Z+1, r21	; 0x01
    2aca:	40 83       	st	Z, r20
    2acc:	50 93 87 00 	sts	0x0087, r21
    2ad0:	40 93 86 00 	sts	0x0086, r20
  SREG = oldSREG;
    2ad4:	83 81       	ldd	r24, Z+3	; 0x03
    2ad6:	8f bf       	out	0x3f, r24	; 63
  
  TCCR1B &= ~(_BV(CS10) | _BV(CS11) | _BV(CS12));
    2ad8:	80 91 81 00 	lds	r24, 0x0081
    2adc:	88 7f       	andi	r24, 0xF8	; 248
    2ade:	80 93 81 00 	sts	0x0081, r24
  TCCR1B |= clockSelectBits;                                          // reset clock select register, and starts the clock
    2ae2:	80 91 81 00 	lds	r24, 0x0081
    2ae6:	92 81       	ldd	r25, Z+2	; 0x02
    2ae8:	89 2b       	or	r24, r25
    2aea:	80 93 81 00 	sts	0x0081, r24
}
    2aee:	08 95       	ret

00002af0 <_ZN8TimerOne10initializeEl>:
}


void TimerOne::initialize(long microseconds)
{
  TCCR1A = 0;                 // clear control register A 
    2af0:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = _BV(WGM13);        // set mode 8: phase and frequency correct pwm, stop the timer
    2af4:	20 e1       	ldi	r18, 0x10	; 16
    2af6:	20 93 81 00 	sts	0x0081, r18
  setPeriod(microseconds);
    2afa:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <_ZN8TimerOne9setPeriodEl>
}
    2afe:	08 95       	ret

00002b00 <_ZN8TimerOne6resumeEv>:
  TIMSK1 &= ~_BV(TOIE1);                                   // clears the timer overflow interrupt enable bit 
}

void TimerOne::resume()				// AR suggested
{ 
  TCCR1B |= clockSelectBits;
    2b00:	e1 e8       	ldi	r30, 0x81	; 129
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	20 81       	ld	r18, Z
    2b06:	dc 01       	movw	r26, r24
    2b08:	12 96       	adiw	r26, 0x02	; 2
    2b0a:	8c 91       	ld	r24, X
    2b0c:	12 97       	sbiw	r26, 0x02	; 2
    2b0e:	28 2b       	or	r18, r24
    2b10:	20 83       	st	Z, r18
}
    2b12:	08 95       	ret

00002b14 <_ZN8TimerOne15attachInterruptEPFvvEl>:
  if(pin == 1 || pin == 9)       TCCR1A &= ~_BV(COM1A1);   // clear the bit that enables pwm on PB1
  else if(pin == 2 || pin == 10) TCCR1A &= ~_BV(COM1B1);   // clear the bit that enables pwm on PB2
}

void TimerOne::attachInterrupt(void (*isr)(), long microseconds)
{
    2b14:	0f 93       	push	r16
    2b16:	1f 93       	push	r17
    2b18:	cf 93       	push	r28
    2b1a:	df 93       	push	r29
    2b1c:	ec 01       	movw	r28, r24
    2b1e:	8b 01       	movw	r16, r22
    2b20:	ba 01       	movw	r22, r20
    2b22:	a9 01       	movw	r20, r18
  if(microseconds > 0) setPeriod(microseconds);
    2b24:	14 16       	cp	r1, r20
    2b26:	15 06       	cpc	r1, r21
    2b28:	16 06       	cpc	r1, r22
    2b2a:	17 06       	cpc	r1, r23
    2b2c:	14 f4       	brge	.+4      	; 0x2b32 <_ZN8TimerOne15attachInterruptEPFvvEl+0x1e>
    2b2e:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <_ZN8TimerOne9setPeriodEl>
  isrCallback = isr;                                       // register the user's callback with the real ISR
    2b32:	1d 83       	std	Y+5, r17	; 0x05
    2b34:	0c 83       	std	Y+4, r16	; 0x04
  TIMSK1 = _BV(TOIE1);                                     // sets the timer overflow interrupt enable bit
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	80 93 6f 00 	sts	0x006F, r24
	// AR - remove sei() - might be running with interrupts disabled (eg inside an ISR), so leave unchanged
//  sei();                                                   // ensures that interrupts are globally enabled
  resume();
    2b3c:	ce 01       	movw	r24, r28
    2b3e:	0e 94 80 15 	call	0x2b00	; 0x2b00 <_ZN8TimerOne6resumeEv>
}
    2b42:	df 91       	pop	r29
    2b44:	cf 91       	pop	r28
    2b46:	1f 91       	pop	r17
    2b48:	0f 91       	pop	r16
    2b4a:	08 95       	ret

00002b4c <_ZN8TimerOne4stopEv>:
//  TIMSK1 = _BV(TOIE1);              // sets the timer overflow interrupt enable bit
}

void TimerOne::stop()
{
  TCCR1B &= ~(_BV(CS10) | _BV(CS11) | _BV(CS12));          // clears all clock selects bits
    2b4c:	e1 e8       	ldi	r30, 0x81	; 129
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	80 81       	ld	r24, Z
    2b52:	88 7f       	andi	r24, 0xF8	; 248
    2b54:	80 83       	st	Z, r24
}
    2b56:	08 95       	ret

00002b58 <_ZN9WiFlyRNXVC1Ehh>:
*/

#include "WiFlyRNXV.h"

//Constructor-Start listen on uart
WiFlyRNXV::WiFlyRNXV(byte pinReceive, byte pinSend) : uart (pinReceive, pinSend),irSystem(IR_RECEIVEPIN){
    2b58:	cf 92       	push	r12
    2b5a:	df 92       	push	r13
    2b5c:	ef 92       	push	r14
    2b5e:	ff 92       	push	r15
    2b60:	0f 93       	push	r16
    2b62:	1f 93       	push	r17
    2b64:	cf 93       	push	r28
    2b66:	df 93       	push	r29
    2b68:	7c 01       	movw	r14, r24
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	0e 94 2f 13 	call	0x265e	; 0x265e <_ZN14SoftwareSerialC1Ehhb>
    2b70:	c7 01       	movw	r24, r14
    2b72:	4c 96       	adiw	r24, 0x1c	; 28
    2b74:	68 e0       	ldi	r22, 0x08	; 8
    2b76:	70 e0       	ldi	r23, 0x00	; 0
    2b78:	0e 94 a3 0c 	call	0x1946	; 0x1946 <_ZN8IRSystemC1Ei>
    2b7c:	e7 01       	movw	r28, r14
    2b7e:	e0 96       	adiw	r28, 0x30	; 48
    2b80:	29 e7       	ldi	r18, 0x79	; 121
    2b82:	c2 2e       	mov	r12, r18
    2b84:	21 e0       	ldi	r18, 0x01	; 1
    2b86:	d2 2e       	mov	r13, r18
    2b88:	ce 01       	movw	r24, r28
    2b8a:	b6 01       	movw	r22, r12
    2b8c:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    2b90:	87 01       	movw	r16, r14
    2b92:	07 5c       	subi	r16, 0xC7	; 199
    2b94:	1f 4f       	sbci	r17, 0xFF	; 255
    2b96:	c8 01       	movw	r24, r16
    2b98:	b6 01       	movw	r22, r12
    2b9a:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
	initializeString(responseBuffer,LONG_STRING);
    2b9e:	ce 01       	movw	r24, r28
    2ba0:	60 e0       	ldi	r22, 0x00	; 0
    2ba2:	70 e0       	ldi	r23, 0x00	; 0
    2ba4:	0e 94 45 14 	call	0x288a	; 0x288a <initializeString>
	initializeString(ipValue,SHORT_STRING);
    2ba8:	c8 01       	movw	r24, r16
    2baa:	61 e0       	ldi	r22, 0x01	; 1
    2bac:	70 e0       	ldi	r23, 0x00	; 0
    2bae:	0e 94 45 14 	call	0x288a	; 0x288a <initializeString>
	inCommandMode=false;
    2bb2:	f7 01       	movw	r30, r14
    2bb4:	17 aa       	sts	0x97, r17
	wifiStatus=false;
    2bb6:	10 ae       	sts	0xb0, r17
}
    2bb8:	df 91       	pop	r29
    2bba:	cf 91       	pop	r28
    2bbc:	1f 91       	pop	r17
    2bbe:	0f 91       	pop	r16
    2bc0:	ff 90       	pop	r15
    2bc2:	ef 90       	pop	r14
    2bc4:	df 90       	pop	r13
    2bc6:	cf 90       	pop	r12
    2bc8:	08 95       	ret

00002bca <_ZN9WiFlyRNXV5startEv>:

void WiFlyRNXV::start(){
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
    2bce:	d8 2f       	mov	r29, r24
    2bd0:	c9 2f       	mov	r28, r25
	uart.begin(WIFLY_DEFAULT_BAUD_RATE);
    2bd2:	40 e8       	ldi	r20, 0x80	; 128
    2bd4:	55 e2       	ldi	r21, 0x25	; 37
    2bd6:	60 e0       	ldi	r22, 0x00	; 0
    2bd8:	70 e0       	ldi	r23, 0x00	; 0
    2bda:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <_ZN14SoftwareSerial5beginEl>
	uart.listen();
    2bde:	8d 2f       	mov	r24, r29
    2be0:	9c 2f       	mov	r25, r28
    2be2:	0e 94 80 11 	call	0x2300	; 0x2300 <_ZN14SoftwareSerial6listenEv>
	uart.flush();
    2be6:	8d 2f       	mov	r24, r29
    2be8:	9c 2f       	mov	r25, r28
    2bea:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
}
    2bee:	df 91       	pop	r29
    2bf0:	cf 91       	pop	r28
    2bf2:	08 95       	ret

00002bf4 <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi>:
}



//Check buffer with a particular. always stops at $
boolean WiFlyRNXV::checkBufferResponse(String compareValue,int timeout){
    2bf4:	4f 92       	push	r4
    2bf6:	5f 92       	push	r5
    2bf8:	6f 92       	push	r6
    2bfa:	7f 92       	push	r7
    2bfc:	8f 92       	push	r8
    2bfe:	9f 92       	push	r9
    2c00:	af 92       	push	r10
    2c02:	bf 92       	push	r11
    2c04:	cf 92       	push	r12
    2c06:	df 92       	push	r13
    2c08:	ef 92       	push	r14
    2c0a:	ff 92       	push	r15
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	62 97       	sbiw	r28, 0x12	; 18
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	8c 01       	movw	r16, r24
    2c26:	4b 01       	movw	r8, r22
    2c28:	2a 01       	movw	r4, r20
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	60 e0       	ldi	r22, 0x00	; 0
    2c2e:	70 e0       	ldi	r23, 0x00	; 0
    2c30:	0e 94 63 28 	call	0x50c6	; 0x50c6 <_ZNK6String6equalsEPKc>

	//NULL case
	boolean noCase=false;
    2c34:	cc 24       	eor	r12, r12
    2c36:	c3 94       	inc	r12
    2c38:	88 23       	and	r24, r24
    2c3a:	09 f4       	brne	.+2      	; 0x2c3e <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi+0x4a>
    2c3c:	cc 24       	eor	r12, r12
	if(compareValue==NULL) noCase=true;
	initializeString(responseBuffer,LONG_STRING);
    2c3e:	30 e3       	ldi	r19, 0x30	; 48
    2c40:	a3 2e       	mov	r10, r19
    2c42:	b1 2c       	mov	r11, r1
    2c44:	a0 0e       	add	r10, r16
    2c46:	b1 1e       	adc	r11, r17
    2c48:	c5 01       	movw	r24, r10
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	0e 94 45 14 	call	0x288a	; 0x288a <initializeString>
	int  bufpos = 0;											//Buffer position
	char chResponse = 'A';										//Initial character response
	boolean compareSuccess=false;								//Compare Success

	//Fill the buffer
	unsigned long startTime = millis();
    2c52:	0e 94 b9 21 	call	0x4372	; 0x4372 <millis>
    2c56:	6f 87       	std	Y+15, r22	; 0x0f
    2c58:	78 8b       	std	Y+16, r23	; 0x10
    2c5a:	89 8b       	std	Y+17, r24	; 0x11
    2c5c:	9a 8b       	std	Y+18, r25	; 0x12
	initializeString(responseBuffer,LONG_STRING);

	//Variables
	//char* responseBuffer;										//Buffer for response
	boolean bufRead = true;										//Finish Reading
	int  bufpos = 0;											//Buffer position
    2c5e:	ee 24       	eor	r14, r14
    2c60:	ff 24       	eor	r15, r15
	//Fill the buffer
	unsigned long startTime = millis();
	while(bufRead){
		
		//Start getting values
		if(uart.available()){
    2c62:	d0 2e       	mov	r13, r16
    2c64:	01 2f       	mov	r16, r17
		
		//Check for existence of the comparison string, or if timeout stop
		if(checkForString(compareValue,responseBuffer) && noCase==false){
			compareSuccess=true;
			bufRead=false;
		}else if((millis()-startTime)>timeout){
    2c66:	66 24       	eor	r6, r6
    2c68:	57 fc       	sbrc	r5, 7
    2c6a:	60 94       	com	r6
    2c6c:	76 2c       	mov	r7, r6
	//Fill the buffer
	unsigned long startTime = millis();
	while(bufRead){
		
		//Start getting values
		if(uart.available()){
    2c6e:	8d 2d       	mov	r24, r13
    2c70:	90 2f       	mov	r25, r16
    2c72:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN14SoftwareSerial9availableEv>
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	01 f1       	breq	.+64     	; 0x2cba <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi+0xc6>
			chResponse = uart.read();
    2c7a:	8d 2d       	mov	r24, r13
    2c7c:	90 2f       	mov	r25, r16
    2c7e:	0e 94 13 11 	call	0x2226	; 0x2226 <_ZN14SoftwareSerial4readEv>
    2c82:	18 2f       	mov	r17, r24
			//Serial.print(chResponse);
			
			//Keep reading until $ seen
			if(noCase){
    2c84:	cc 20       	and	r12, r12
    2c86:	19 f0       	breq	.+6      	; 0x2c8e <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi+0x9a>
				if(chResponse=='$'){
    2c88:	84 32       	cpi	r24, 0x24	; 36
    2c8a:	09 f4       	brne	.+2      	; 0x2c8e <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi+0x9a>
    2c8c:	49 c0       	rjmp	.+146    	; 0x2d20 <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi+0x12c>
					break;
				}
			}

			//Place into String
			if(bufpos<100){
    2c8e:	24 e6       	ldi	r18, 0x64	; 100
    2c90:	e2 16       	cp	r14, r18
    2c92:	f1 04       	cpc	r15, r1
    2c94:	54 f4       	brge	.+20     	; 0x2caa <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi+0xb6>
				responseBuffer[bufpos]=chResponse;
    2c96:	c5 01       	movw	r24, r10
    2c98:	b7 01       	movw	r22, r14
    2c9a:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <_ZN6StringixEj>
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	10 83       	st	Z, r17
				bufpos++;
    2ca2:	08 94       	sec
    2ca4:	e1 1c       	adc	r14, r1
    2ca6:	f1 1c       	adc	r15, r1
    2ca8:	08 c0       	rjmp	.+16     	; 0x2cba <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi+0xc6>
			}else{
				Serial.println("Overflow");
    2caa:	8b e1       	ldi	r24, 0x1B	; 27
    2cac:	96 e0       	ldi	r25, 0x06	; 6
    2cae:	6a e7       	ldi	r22, 0x7A	; 122
    2cb0:	71 e0       	ldi	r23, 0x01	; 1
    2cb2:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
				bufpos=0;
    2cb6:	ee 24       	eor	r14, r14
    2cb8:	ff 24       	eor	r15, r15


		}
		
		//Check for existence of the comparison string, or if timeout stop
		if(checkForString(compareValue,responseBuffer) && noCase==false){
    2cba:	ce 01       	movw	r24, r28
    2cbc:	08 96       	adiw	r24, 0x08	; 8
    2cbe:	b4 01       	movw	r22, r8
    2cc0:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN6StringC1ERKS_>
    2cc4:	ce 01       	movw	r24, r28
    2cc6:	01 96       	adiw	r24, 0x01	; 1
    2cc8:	b5 01       	movw	r22, r10
    2cca:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN6StringC1ERKS_>
    2cce:	ce 01       	movw	r24, r28
    2cd0:	08 96       	adiw	r24, 0x08	; 8
    2cd2:	be 01       	movw	r22, r28
    2cd4:	6f 5f       	subi	r22, 0xFF	; 255
    2cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cd8:	0e 94 3a 14 	call	0x2874	; 0x2874 <checkForString>
    2cdc:	88 23       	and	r24, r24
    2cde:	11 f0       	breq	.+4      	; 0x2ce4 <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi+0xf0>
}



//Check buffer with a particular. always stops at $
boolean WiFlyRNXV::checkBufferResponse(String compareValue,int timeout){
    2ce0:	11 e0       	ldi	r17, 0x01	; 1
    2ce2:	c1 10       	cpse	r12, r1


		}
		
		//Check for existence of the comparison string, or if timeout stop
		if(checkForString(compareValue,responseBuffer) && noCase==false){
    2ce4:	10 e0       	ldi	r17, 0x00	; 0
    2ce6:	ce 01       	movw	r24, r28
    2ce8:	01 96       	adiw	r24, 0x01	; 1
    2cea:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    2cee:	ce 01       	movw	r24, r28
    2cf0:	08 96       	adiw	r24, 0x08	; 8
    2cf2:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    2cf6:	11 23       	and	r17, r17
    2cf8:	99 f4       	brne	.+38     	; 0x2d20 <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi+0x12c>
			compareSuccess=true;
			bufRead=false;
		}else if((millis()-startTime)>timeout){
    2cfa:	0e 94 b9 21 	call	0x4372	; 0x4372 <millis>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	2f 85       	ldd	r18, Y+15	; 0x0f
    2d04:	38 89       	ldd	r19, Y+16	; 0x10
    2d06:	49 89       	ldd	r20, Y+17	; 0x11
    2d08:	5a 89       	ldd	r21, Y+18	; 0x12
    2d0a:	82 1b       	sub	r24, r18
    2d0c:	93 0b       	sbc	r25, r19
    2d0e:	a4 0b       	sbc	r26, r20
    2d10:	b5 0b       	sbc	r27, r21
    2d12:	48 16       	cp	r4, r24
    2d14:	59 06       	cpc	r5, r25
    2d16:	6a 06       	cpc	r6, r26
    2d18:	7b 06       	cpc	r7, r27
    2d1a:	08 f0       	brcs	.+2      	; 0x2d1e <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi+0x12a>
    2d1c:	a8 cf       	rjmp	.-176    	; 0x2c6e <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi+0x7a>
    2d1e:	01 c0       	rjmp	.+2      	; 0x2d22 <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi+0x12e>
			//Serial.print(chResponse);
			
			//Keep reading until $ seen
			if(noCase){
				if(chResponse=='$'){
					compareSuccess=true;
    2d20:	11 e0       	ldi	r17, 0x01	; 1
			compareSuccess=false;
			bufRead=false;
		}
	}
	
	uart.flush();
    2d22:	8d 2d       	mov	r24, r13
    2d24:	90 2f       	mov	r25, r16
    2d26:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
	//if(compareSuccess)Serial.println("Found: "+compareValue);
	//else Serial.println("Not found: "+compareValue);
	
	return compareSuccess;
}
    2d2a:	81 2f       	mov	r24, r17
    2d2c:	62 96       	adiw	r28, 0x12	; 18
    2d2e:	0f b6       	in	r0, 0x3f	; 63
    2d30:	f8 94       	cli
    2d32:	de bf       	out	0x3e, r29	; 62
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	cd bf       	out	0x3d, r28	; 61
    2d38:	df 91       	pop	r29
    2d3a:	cf 91       	pop	r28
    2d3c:	1f 91       	pop	r17
    2d3e:	0f 91       	pop	r16
    2d40:	ff 90       	pop	r15
    2d42:	ef 90       	pop	r14
    2d44:	df 90       	pop	r13
    2d46:	cf 90       	pop	r12
    2d48:	bf 90       	pop	r11
    2d4a:	af 90       	pop	r10
    2d4c:	9f 90       	pop	r9
    2d4e:	8f 90       	pop	r8
    2d50:	7f 90       	pop	r7
    2d52:	6f 90       	pop	r6
    2d54:	5f 90       	pop	r5
    2d56:	4f 90       	pop	r4
    2d58:	08 95       	ret

00002d5a <_ZN9WiFlyRNXV16EnterCommandModeEv>:


//Enter Command Mode
boolean WiFlyRNXV::EnterCommandMode(){
    2d5a:	ff 92       	push	r15
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
    2d68:	27 97       	sbiw	r28, 0x07	; 7
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	f8 94       	cli
    2d6e:	de bf       	out	0x3e, r29	; 62
    2d70:	0f be       	out	0x3f, r0	; 63
    2d72:	cd bf       	out	0x3d, r28	; 61
    2d74:	8c 01       	movw	r16, r24
	uart.flush();
    2d76:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
	uart.print(COMMAND_MODE);
    2d7a:	c8 01       	movw	r24, r16
    2d7c:	63 e8       	ldi	r22, 0x83	; 131
    2d7e:	71 e0       	ldi	r23, 0x01	; 1
    2d80:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <_ZN5Print5printEPKc>
	delay(COMMAND_MODE_GUARD_TIME);
    2d84:	6c e2       	ldi	r22, 0x2C	; 44
    2d86:	71 e0       	ldi	r23, 0x01	; 1
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	if(checkBufferResponse("CMD",TIMEOUT_TIME))
    2d90:	ce 01       	movw	r24, r28
    2d92:	01 96       	adiw	r24, 0x01	; 1
    2d94:	67 e8       	ldi	r22, 0x87	; 135
    2d96:	71 e0       	ldi	r23, 0x01	; 1
    2d98:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    2d9c:	c8 01       	movw	r24, r16
    2d9e:	be 01       	movw	r22, r28
    2da0:	6f 5f       	subi	r22, 0xFF	; 255
    2da2:	7f 4f       	sbci	r23, 0xFF	; 255
    2da4:	48 eb       	ldi	r20, 0xB8	; 184
    2da6:	5b e0       	ldi	r21, 0x0B	; 11
    2da8:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi>
    2dac:	f8 2e       	mov	r15, r24
    2dae:	ce 01       	movw	r24, r28
    2db0:	01 96       	adiw	r24, 0x01	; 1
    2db2:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    2db6:	ff 20       	and	r15, r15
    2db8:	21 f0       	breq	.+8      	; 0x2dc2 <_ZN9WiFlyRNXV16EnterCommandModeEv+0x68>
	inCommandMode=true;
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	f8 01       	movw	r30, r16
    2dbe:	87 ab       	sts	0x57, r24
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <_ZN9WiFlyRNXV16EnterCommandModeEv+0x6c>
	else
	inCommandMode=false;
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	17 aa       	sts	0x97, r17
	
	return inCommandMode;
}
    2dc6:	f8 01       	movw	r30, r16
    2dc8:	87 a9       	sts	0x47, r24
    2dca:	27 96       	adiw	r28, 0x07	; 7
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	cd bf       	out	0x3d, r28	; 61
    2dd6:	df 91       	pop	r29
    2dd8:	cf 91       	pop	r28
    2dda:	1f 91       	pop	r17
    2ddc:	0f 91       	pop	r16
    2dde:	ff 90       	pop	r15
    2de0:	08 95       	ret

00002de2 <_ZN9WiFlyRNXV15ExitCommandModeEv>:

//Exit Command Mode
boolean WiFlyRNXV::ExitCommandMode(){
    2de2:	cf 93       	push	r28
    2de4:	df 93       	push	r29
    2de6:	ec 01       	movw	r28, r24
	uart.println("exit");
    2de8:	6b e8       	ldi	r22, 0x8B	; 139
    2dea:	71 e0       	ldi	r23, 0x01	; 1
    2dec:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
	delay(COMMAND_MODE_GUARD_TIME);
    2df0:	6c e2       	ldi	r22, 0x2C	; 44
    2df2:	71 e0       	ldi	r23, 0x01	; 1
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	inCommandMode=false;
    2dfc:	1f aa       	sts	0x9f, r17
	
	return inCommandMode;
}
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	08 95       	ret

00002e06 <_ZN9WiFlyRNXV11RebootWiFlyEv>:

//Exit Command Mode
void WiFlyRNXV::RebootWiFly(){
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	ec 01       	movw	r28, r24
	if(!inCommandMode)	EnterCommandMode();
    2e0c:	8f a9       	sts	0x4f, r24
    2e0e:	88 23       	and	r24, r24
    2e10:	19 f4       	brne	.+6      	; 0x2e18 <_ZN9WiFlyRNXV11RebootWiFlyEv+0x12>
    2e12:	ce 01       	movw	r24, r28
    2e14:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <_ZN9WiFlyRNXV16EnterCommandModeEv>
	delay(100);
    2e18:	64 e6       	ldi	r22, 0x64	; 100
    2e1a:	70 e0       	ldi	r23, 0x00	; 0
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	uart.print("reboot\r");
    2e24:	ce 01       	movw	r24, r28
    2e26:	60 e9       	ldi	r22, 0x90	; 144
    2e28:	71 e0       	ldi	r23, 0x01	; 1
    2e2a:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <_ZN5Print5printEPKc>
	inCommandMode=false;
    2e2e:	1f aa       	sts	0x9f, r17
}
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	08 95       	ret

00002e36 <_ZN9WiFlyRNXV15CheckWiFiStatusEv>:

//Check WiFi Status
boolean WiFlyRNXV::CheckWiFiStatus(){
    2e36:	ff 92       	push	r15
    2e38:	0f 93       	push	r16
    2e3a:	1f 93       	push	r17
    2e3c:	cf 93       	push	r28
    2e3e:	df 93       	push	r29
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	27 97       	sbiw	r28, 0x07	; 7
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	f8 94       	cli
    2e4a:	de bf       	out	0x3e, r29	; 62
    2e4c:	0f be       	out	0x3f, r0	; 63
    2e4e:	cd bf       	out	0x3d, r28	; 61
    2e50:	8c 01       	movw	r16, r24
	
	if(inCommandMode){
    2e52:	fc 01       	movw	r30, r24
    2e54:	87 a9       	sts	0x47, r24
    2e56:	88 23       	and	r24, r24
    2e58:	49 f0       	breq	.+18     	; 0x2e6c <_ZN9WiFlyRNXV15CheckWiFiStatusEv+0x36>
		ExitCommandMode();
    2e5a:	c8 01       	movw	r24, r16
    2e5c:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <_ZN9WiFlyRNXV15ExitCommandModeEv>
		delay(1000);
    2e60:	68 ee       	ldi	r22, 0xE8	; 232
    2e62:	73 e0       	ldi	r23, 0x03	; 3
    2e64:	80 e0       	ldi	r24, 0x00	; 0
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	}
	
	if(checkBufferResponse("Associated!",TIMEOUT_TIME))
    2e6c:	ce 01       	movw	r24, r28
    2e6e:	01 96       	adiw	r24, 0x01	; 1
    2e70:	68 e9       	ldi	r22, 0x98	; 152
    2e72:	71 e0       	ldi	r23, 0x01	; 1
    2e74:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    2e78:	c8 01       	movw	r24, r16
    2e7a:	be 01       	movw	r22, r28
    2e7c:	6f 5f       	subi	r22, 0xFF	; 255
    2e7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e80:	48 eb       	ldi	r20, 0xB8	; 184
    2e82:	5b e0       	ldi	r21, 0x0B	; 11
    2e84:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi>
    2e88:	f8 2e       	mov	r15, r24
    2e8a:	ce 01       	movw	r24, r28
    2e8c:	01 96       	adiw	r24, 0x01	; 1
    2e8e:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    2e92:	ff 20       	and	r15, r15
    2e94:	21 f0       	breq	.+8      	; 0x2e9e <_ZN9WiFlyRNXV15CheckWiFiStatusEv+0x68>
	wifiStatus=true;
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	f8 01       	movw	r30, r16
    2e9a:	80 af       	sts	0x70, r24
    2e9c:	02 c0       	rjmp	.+4      	; 0x2ea2 <_ZN9WiFlyRNXV15CheckWiFiStatusEv+0x6c>
	else
	wifiStatus=false;
    2e9e:	f8 01       	movw	r30, r16
    2ea0:	10 ae       	sts	0xb0, r17
	
	
	return wifiStatus;
}
    2ea2:	f8 01       	movw	r30, r16
    2ea4:	80 ad       	sts	0x60, r24
    2ea6:	27 96       	adiw	r28, 0x07	; 7
    2ea8:	0f b6       	in	r0, 0x3f	; 63
    2eaa:	f8 94       	cli
    2eac:	de bf       	out	0x3e, r29	; 62
    2eae:	0f be       	out	0x3f, r0	; 63
    2eb0:	cd bf       	out	0x3d, r28	; 61
    2eb2:	df 91       	pop	r29
    2eb4:	cf 91       	pop	r28
    2eb6:	1f 91       	pop	r17
    2eb8:	0f 91       	pop	r16
    2eba:	ff 90       	pop	r15
    2ebc:	08 95       	ret

00002ebe <_ZN9WiFlyRNXV10EnterAdHocEv>:
	Serial.println("Factory RESET done");
	inCommandMode=false;
}
*/

void WiFlyRNXV::EnterAdHoc(){
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	ec 01       	movw	r28, r24
	
	initializeString(ipValue,SHORT_STRING);
    2ec4:	c9 96       	adiw	r24, 0x39	; 57
    2ec6:	61 e0       	ldi	r22, 0x01	; 1
    2ec8:	70 e0       	ldi	r23, 0x00	; 0
    2eca:	0e 94 45 14 	call	0x288a	; 0x288a <initializeString>

	int delayW=500;
	
	if(!inCommandMode)	EnterCommandMode();
    2ece:	8f a9       	sts	0x4f, r24
    2ed0:	88 23       	and	r24, r24
    2ed2:	19 f4       	brne	.+6      	; 0x2eda <_ZN9WiFlyRNXV10EnterAdHocEv+0x1c>
    2ed4:	ce 01       	movw	r24, r28
    2ed6:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <_ZN9WiFlyRNXV16EnterCommandModeEv>
	
	delay(1000);
    2eda:	68 ee       	ldi	r22, 0xE8	; 232
    2edc:	73 e0       	ldi	r23, 0x03	; 3
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	90 e0       	ldi	r25, 0x00	; 0
    2ee2:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	// Setup adhoc network
	Serial.println("set ip address 169.254.1.1"); uart.flush();
    2ee6:	8b e1       	ldi	r24, 0x1B	; 27
    2ee8:	96 e0       	ldi	r25, 0x06	; 6
    2eea:	64 ea       	ldi	r22, 0xA4	; 164
    2eec:	71 e0       	ldi	r23, 0x01	; 1
    2eee:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
	uart.println("set ip address 169.254.1.1"); delay(delayW);
    2ef8:	ce 01       	movw	r24, r28
    2efa:	64 ea       	ldi	r22, 0xA4	; 164
    2efc:	71 e0       	ldi	r23, 0x01	; 1
    2efe:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2f02:	64 ef       	ldi	r22, 0xF4	; 244
    2f04:	71 e0       	ldi	r23, 0x01	; 1
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	Serial.println("set ip netmask 255.255.0.0"); uart.flush();
    2f0e:	8b e1       	ldi	r24, 0x1B	; 27
    2f10:	96 e0       	ldi	r25, 0x06	; 6
    2f12:	6f eb       	ldi	r22, 0xBF	; 191
    2f14:	71 e0       	ldi	r23, 0x01	; 1
    2f16:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2f1a:	ce 01       	movw	r24, r28
    2f1c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
	uart.println("set ip netmask 255.255.0.0"); delay(delayW);
    2f20:	ce 01       	movw	r24, r28
    2f22:	6f eb       	ldi	r22, 0xBF	; 191
    2f24:	71 e0       	ldi	r23, 0x01	; 1
    2f26:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2f2a:	64 ef       	ldi	r22, 0xF4	; 244
    2f2c:	71 e0       	ldi	r23, 0x01	; 1
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	Serial.println("set ip dhcp 0"); uart.flush();
    2f36:	8b e1       	ldi	r24, 0x1B	; 27
    2f38:	96 e0       	ldi	r25, 0x06	; 6
    2f3a:	6a ed       	ldi	r22, 0xDA	; 218
    2f3c:	71 e0       	ldi	r23, 0x01	; 1
    2f3e:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2f42:	ce 01       	movw	r24, r28
    2f44:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
	uart.println("set ip dhcp 0"); delay(delayW);
    2f48:	ce 01       	movw	r24, r28
    2f4a:	6a ed       	ldi	r22, 0xDA	; 218
    2f4c:	71 e0       	ldi	r23, 0x01	; 1
    2f4e:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2f52:	64 ef       	ldi	r22, 0xF4	; 244
    2f54:	71 e0       	ldi	r23, 0x01	; 1
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	Serial.println("set ip proto 2"); uart.flush();
    2f5e:	8b e1       	ldi	r24, 0x1B	; 27
    2f60:	96 e0       	ldi	r25, 0x06	; 6
    2f62:	68 ee       	ldi	r22, 0xE8	; 232
    2f64:	71 e0       	ldi	r23, 0x01	; 1
    2f66:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2f6a:	ce 01       	movw	r24, r28
    2f6c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
	uart.println("set ip proto 2"); delay(delayW);
    2f70:	ce 01       	movw	r24, r28
    2f72:	68 ee       	ldi	r22, 0xE8	; 232
    2f74:	71 e0       	ldi	r23, 0x01	; 1
    2f76:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2f7a:	64 ef       	ldi	r22, 0xF4	; 244
    2f7c:	71 e0       	ldi	r23, 0x01	; 1
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	Serial.println("set wlan ssid WiRED"); uart.flush();
    2f86:	8b e1       	ldi	r24, 0x1B	; 27
    2f88:	96 e0       	ldi	r25, 0x06	; 6
    2f8a:	67 ef       	ldi	r22, 0xF7	; 247
    2f8c:	71 e0       	ldi	r23, 0x01	; 1
    2f8e:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2f92:	ce 01       	movw	r24, r28
    2f94:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
	uart.println("set wlan ssid WiRED"); delay(delayW);
    2f98:	ce 01       	movw	r24, r28
    2f9a:	67 ef       	ldi	r22, 0xF7	; 247
    2f9c:	71 e0       	ldi	r23, 0x01	; 1
    2f9e:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2fa2:	64 ef       	ldi	r22, 0xF4	; 244
    2fa4:	71 e0       	ldi	r23, 0x01	; 1
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	90 e0       	ldi	r25, 0x00	; 0
    2faa:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	Serial.println("set wlan channel 1"); uart.flush();
    2fae:	8b e1       	ldi	r24, 0x1B	; 27
    2fb0:	96 e0       	ldi	r25, 0x06	; 6
    2fb2:	6b e0       	ldi	r22, 0x0B	; 11
    2fb4:	72 e0       	ldi	r23, 0x02	; 2
    2fb6:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2fba:	ce 01       	movw	r24, r28
    2fbc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
	uart.println("set wlan channel 1"); delay(delayW);
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	6b e0       	ldi	r22, 0x0B	; 11
    2fc4:	72 e0       	ldi	r23, 0x02	; 2
    2fc6:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2fca:	64 ef       	ldi	r22, 0xF4	; 244
    2fcc:	71 e0       	ldi	r23, 0x01	; 1
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>

	// Create adhoc network
	Serial.println("set wlan join 4"); uart.flush();
    2fd6:	8b e1       	ldi	r24, 0x1B	; 27
    2fd8:	96 e0       	ldi	r25, 0x06	; 6
    2fda:	6e e1       	ldi	r22, 0x1E	; 30
    2fdc:	72 e0       	ldi	r23, 0x02	; 2
    2fde:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2fe2:	ce 01       	movw	r24, r28
    2fe4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
	uart.println("set wlan join 4"); delay(delayW);
    2fe8:	ce 01       	movw	r24, r28
    2fea:	6e e1       	ldi	r22, 0x1E	; 30
    2fec:	72 e0       	ldi	r23, 0x02	; 2
    2fee:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    2ff2:	64 ef       	ldi	r22, 0xF4	; 244
    2ff4:	71 e0       	ldi	r23, 0x01	; 1
    2ff6:	80 e0       	ldi	r24, 0x00	; 0
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	Serial.println("save"); uart.flush();
    2ffe:	8b e1       	ldi	r24, 0x1B	; 27
    3000:	96 e0       	ldi	r25, 0x06	; 6
    3002:	6e e2       	ldi	r22, 0x2E	; 46
    3004:	72 e0       	ldi	r23, 0x02	; 2
    3006:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    300a:	ce 01       	movw	r24, r28
    300c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
	uart.println("save"); delay(delayW);
    3010:	ce 01       	movw	r24, r28
    3012:	6e e2       	ldi	r22, 0x2E	; 46
    3014:	72 e0       	ldi	r23, 0x02	; 2
    3016:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    301a:	64 ef       	ldi	r22, 0xF4	; 244
    301c:	71 e0       	ldi	r23, 0x01	; 1
    301e:	80 e0       	ldi	r24, 0x00	; 0
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	Serial.println("reboot"); uart.flush();
    3026:	8b e1       	ldi	r24, 0x1B	; 27
    3028:	96 e0       	ldi	r25, 0x06	; 6
    302a:	63 e3       	ldi	r22, 0x33	; 51
    302c:	72 e0       	ldi	r23, 0x02	; 2
    302e:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    3032:	ce 01       	movw	r24, r28
    3034:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
	uart.println("reboot"); delay(delayW);
    3038:	ce 01       	movw	r24, r28
    303a:	63 e3       	ldi	r22, 0x33	; 51
    303c:	72 e0       	ldi	r23, 0x02	; 2
    303e:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
    3042:	64 ef       	ldi	r22, 0xF4	; 244
    3044:	71 e0       	ldi	r23, 0x01	; 1
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	delay(2000);
    304e:	60 ed       	ldi	r22, 0xD0	; 208
    3050:	77 e0       	ldi	r23, 0x07	; 7
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	
	inCommandMode=false;
    305a:	1f aa       	sts	0x9f, r17
	
	uart.flush();
    305c:	ce 01       	movw	r24, r28
    305e:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
	Serial.println("Done AdHoc");
    3062:	8b e1       	ldi	r24, 0x1B	; 27
    3064:	96 e0       	ldi	r25, 0x06	; 6
    3066:	6a e3       	ldi	r22, 0x3A	; 58
    3068:	72 e0       	ldi	r23, 0x02	; 2
    306a:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
}
    306e:	df 91       	pop	r29
    3070:	cf 91       	pop	r28
    3072:	08 95       	ret

00003074 <_ZN9WiFlyRNXV14AdHocConnectedEv>:
		return false;
	}
}
*/

boolean WiFlyRNXV::AdHocConnected(){
    3074:	0f 93       	push	r16
    3076:	1f 93       	push	r17
    3078:	cf 93       	push	r28
    307a:	df 93       	push	r29
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	27 97       	sbiw	r28, 0x07	; 7
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	cd bf       	out	0x3d, r28	; 61
    308c:	8c 01       	movw	r16, r24
	boolean check=false;
	if(uart.available()) check=checkBufferResponse("Connected",TIMEOUT_TIME);
    308e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN14SoftwareSerial9availableEv>
    3092:	00 97       	sbiw	r24, 0x00	; 0
    3094:	b1 f0       	breq	.+44     	; 0x30c2 <_ZN9WiFlyRNXV14AdHocConnectedEv+0x4e>
    3096:	ce 01       	movw	r24, r28
    3098:	01 96       	adiw	r24, 0x01	; 1
    309a:	65 e4       	ldi	r22, 0x45	; 69
    309c:	72 e0       	ldi	r23, 0x02	; 2
    309e:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    30a2:	c8 01       	movw	r24, r16
    30a4:	be 01       	movw	r22, r28
    30a6:	6f 5f       	subi	r22, 0xFF	; 255
    30a8:	7f 4f       	sbci	r23, 0xFF	; 255
    30aa:	48 eb       	ldi	r20, 0xB8	; 184
    30ac:	5b e0       	ldi	r21, 0x0B	; 11
    30ae:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi>
    30b2:	08 2f       	mov	r16, r24
    30b4:	ce 01       	movw	r24, r28
    30b6:	01 96       	adiw	r24, 0x01	; 1
    30b8:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
		return false;
	}
}
*/

boolean WiFlyRNXV::AdHocConnected(){
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	00 23       	and	r16, r16
    30c0:	09 f4       	brne	.+2      	; 0x30c4 <_ZN9WiFlyRNXV14AdHocConnectedEv+0x50>
	boolean check=false;
	if(uart.available()) check=checkBufferResponse("Connected",TIMEOUT_TIME);
	if(check)
	return true;
	else
	return false;
    30c2:	80 e0       	ldi	r24, 0x00	; 0
}
    30c4:	27 96       	adiw	r28, 0x07	; 7
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	08 95       	ret

000030da <_ZN9WiFlyRNXV10AdHocEndedEv>:

boolean WiFlyRNXV::AdHocEnded(){
    30da:	cf 93       	push	r28
    30dc:	df 93       	push	r29
    30de:	d8 2f       	mov	r29, r24
    30e0:	c9 2f       	mov	r28, r25
	boolean check=false;
	if(uart.available()){
    30e2:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN14SoftwareSerial9availableEv>
    30e6:	00 97       	sbiw	r24, 0x00	; 0
    30e8:	61 f0       	breq	.+24     	; 0x3102 <_ZN9WiFlyRNXV10AdHocEndedEv+0x28>
		check=true;
		Serial.println("Data Received..Rebooting");
    30ea:	8b e1       	ldi	r24, 0x1B	; 27
    30ec:	96 e0       	ldi	r25, 0x06	; 6
    30ee:	6f e4       	ldi	r22, 0x4F	; 79
    30f0:	72 e0       	ldi	r23, 0x02	; 2
    30f2:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
		uart.flush();
    30f6:	8d 2f       	mov	r24, r29
    30f8:	9c 2f       	mov	r25, r28
    30fa:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
}

boolean WiFlyRNXV::AdHocEnded(){
	boolean check=false;
	if(uart.available()){
		check=true;
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	01 c0       	rjmp	.+2      	; 0x3104 <_ZN9WiFlyRNXV10AdHocEndedEv+0x2a>
	else
	return false;
}

boolean WiFlyRNXV::AdHocEnded(){
	boolean check=false;
    3102:	80 e0       	ldi	r24, 0x00	; 0
		Serial.println("Data Received..Rebooting");
		uart.flush();
	}
	
	return check;
}
    3104:	df 91       	pop	r29
    3106:	cf 91       	pop	r28
    3108:	08 95       	ret

0000310a <_ZN9WiFlyRNXV11getDataTypeER6Stringi>:


boolean WiFlyRNXV::getDataType(String& fillBuff,int action){
    310a:	2f 92       	push	r2
    310c:	3f 92       	push	r3
    310e:	4f 92       	push	r4
    3110:	5f 92       	push	r5
    3112:	6f 92       	push	r6
    3114:	7f 92       	push	r7
    3116:	8f 92       	push	r8
    3118:	9f 92       	push	r9
    311a:	af 92       	push	r10
    311c:	bf 92       	push	r11
    311e:	cf 92       	push	r12
    3120:	df 92       	push	r13
    3122:	ef 92       	push	r14
    3124:	ff 92       	push	r15
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	cf 93       	push	r28
    312c:	df 93       	push	r29
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	a3 97       	sbiw	r28, 0x23	; 35
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	de bf       	out	0x3e, r29	; 62
    313a:	0f be       	out	0x3f, r0	; 63
    313c:	cd bf       	out	0x3d, r28	; 61
    313e:	7c 01       	movw	r14, r24
    3140:	4b 01       	movw	r8, r22
    3142:	8a 01       	movw	r16, r20
	initializeString(fillBuff,SHORT_STRING);
    3144:	cb 01       	movw	r24, r22
    3146:	61 e0       	ldi	r22, 0x01	; 1
    3148:	70 e0       	ldi	r23, 0x00	; 0
    314a:	0e 94 45 14 	call	0x288a	; 0x288a <initializeString>
	
	if(!inCommandMode)	EnterCommandMode();
    314e:	f7 01       	movw	r30, r14
    3150:	87 a9       	sts	0x47, r24
    3152:	88 23       	and	r24, r24
    3154:	19 f4       	brne	.+6      	; 0x315c <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0x52>
    3156:	c7 01       	movw	r24, r14
    3158:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <_ZN9WiFlyRNXV16EnterCommandModeEv>
	
	String delimit;
    315c:	ce 01       	movw	r24, r28
    315e:	4d 96       	adiw	r24, 0x1d	; 29
    3160:	69 e7       	ldi	r22, 0x79	; 121
    3162:	71 e0       	ldi	r23, 0x01	; 1
    3164:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
	if(action==GET_IP){
    3168:	01 15       	cp	r16, r1
    316a:	11 05       	cpc	r17, r1
    316c:	51 f4       	brne	.+20     	; 0x3182 <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0x78>
		delimit="IP=";
    316e:	ce 01       	movw	r24, r28
    3170:	4d 96       	adiw	r24, 0x1d	; 29
    3172:	68 e6       	ldi	r22, 0x68	; 104
    3174:	72 e0       	ldi	r23, 0x02	; 2
    3176:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN6StringaSEPKc>
		uart.println("get ip");
    317a:	c7 01       	movw	r24, r14
    317c:	6c e6       	ldi	r22, 0x6C	; 108
    317e:	72 e0       	ldi	r23, 0x02	; 2
    3180:	0c c0       	rjmp	.+24     	; 0x319a <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0x90>
	}else if(action==GET_DEVID){
    3182:	01 30       	cpi	r16, 0x01	; 1
    3184:	11 05       	cpc	r17, r1
    3186:	59 f4       	brne	.+22     	; 0x319e <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0x94>
		delimit="d=";
    3188:	ce 01       	movw	r24, r28
    318a:	4d 96       	adiw	r24, 0x1d	; 29
    318c:	63 e7       	ldi	r22, 0x73	; 115
    318e:	72 e0       	ldi	r23, 0x02	; 2
    3190:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN6StringaSEPKc>
		uart.println("show deviceid");
    3194:	c7 01       	movw	r24, r14
    3196:	66 e7       	ldi	r22, 0x76	; 118
    3198:	72 e0       	ldi	r23, 0x02	; 2
    319a:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
	char chResponse = 'A';										//Initial character response
	boolean compareSuccess=false;								//Compare Success
	int timeout=5000;											//Timeout value fixed

	//Fill the buffer
	unsigned long startTime = millis();
    319e:	0e 94 b9 21 	call	0x4372	; 0x4372 <millis>
    31a2:	2b 01       	movw	r4, r22
    31a4:	3c 01       	movw	r6, r24
	}		
	
	boolean bufRead = true;										//Finish Reading
	boolean ipReadMode = false;									//Ready to write in IP
	boolean ipReadOver = false;									//Finished writing IP
	int  bufpos = 0;											//Buffer position
    31a6:	cc 24       	eor	r12, r12
    31a8:	dd 24       	eor	r13, r13
		delimit="d=";
		uart.println("show deviceid");
	}		
	
	boolean bufRead = true;										//Finish Reading
	boolean ipReadMode = false;									//Ready to write in IP
    31aa:	10 e0       	ldi	r17, 0x00	; 0
	//Fill the buffer
	unsigned long startTime = millis();
	while(bufRead){
		
		//Start getting values
		if(uart.available()){
    31ac:	be 2c       	mov	r11, r14
    31ae:	af 2c       	mov	r10, r15
				ipReadOver=true;
				break;
			}

			if(ipReadMode==false){
				responseBuffer[bufpos]=chResponse;
    31b0:	40 e3       	ldi	r20, 0x30	; 48
    31b2:	24 2e       	mov	r2, r20
    31b4:	31 2c       	mov	r3, r1
    31b6:	2e 0c       	add	r2, r14
    31b8:	3f 1c       	adc	r3, r15
    31ba:	03 c0       	rjmp	.+6      	; 0x31c2 <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0xb8>
		}

		//Check for existence of the comparison string, or if timeout stop
		if(checkForString(delimit,responseBuffer) && ipReadMode==false){
			ipReadMode=true;
			bufpos=0;
    31bc:	cc 24       	eor	r12, r12
    31be:	dd 24       	eor	r13, r13
			
		}

		//Check for existence of the comparison string, or if timeout stop
		if(checkForString(delimit,responseBuffer) && ipReadMode==false){
			ipReadMode=true;
    31c0:	11 e0       	ldi	r17, 0x01	; 1
	//Fill the buffer
	unsigned long startTime = millis();
	while(bufRead){
		
		//Start getting values
		if(uart.available()){
    31c2:	8b 2d       	mov	r24, r11
    31c4:	9a 2d       	mov	r25, r10
    31c6:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN14SoftwareSerial9availableEv>
    31ca:	00 97       	sbiw	r24, 0x00	; 0
    31cc:	a9 f0       	breq	.+42     	; 0x31f8 <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0xee>
			chResponse = uart.read();
    31ce:	8b 2d       	mov	r24, r11
    31d0:	9a 2d       	mov	r25, r10
    31d2:	0e 94 13 11 	call	0x2226	; 0x2226 <_ZN14SoftwareSerial4readEv>
    31d6:	08 2f       	mov	r16, r24
			//Serial.print(chResponse);
			
			//Stop at character :
			if(chResponse==':'){
    31d8:	8a 33       	cpi	r24, 0x3A	; 58
    31da:	09 f4       	brne	.+2      	; 0x31de <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0xd4>
    31dc:	43 c0       	rjmp	.+134    	; 0x3264 <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0x15a>
				ipReadOver=true;
				break;
			}

			if(ipReadMode==false){
    31de:	11 23       	and	r17, r17
    31e0:	11 f4       	brne	.+4      	; 0x31e6 <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0xdc>
				responseBuffer[bufpos]=chResponse;
    31e2:	c1 01       	movw	r24, r2
    31e4:	01 c0       	rjmp	.+2      	; 0x31e8 <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0xde>
			}else{
				fillBuff[bufpos]=chResponse;
    31e6:	c4 01       	movw	r24, r8
    31e8:	b6 01       	movw	r22, r12
    31ea:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <_ZN6StringixEj>
    31ee:	fc 01       	movw	r30, r24
    31f0:	00 83       	st	Z, r16
			}
			bufpos++;
    31f2:	08 94       	sec
    31f4:	c1 1c       	adc	r12, r1
    31f6:	d1 1c       	adc	r13, r1
			
		}

		//Check for existence of the comparison string, or if timeout stop
		if(checkForString(delimit,responseBuffer) && ipReadMode==false){
    31f8:	ce 01       	movw	r24, r28
    31fa:	46 96       	adiw	r24, 0x16	; 22
    31fc:	be 01       	movw	r22, r28
    31fe:	63 5e       	subi	r22, 0xE3	; 227
    3200:	7f 4f       	sbci	r23, 0xFF	; 255
    3202:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN6StringC1ERKS_>
    3206:	ce 01       	movw	r24, r28
    3208:	0f 96       	adiw	r24, 0x0f	; 15
    320a:	b1 01       	movw	r22, r2
    320c:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN6StringC1ERKS_>
    3210:	ce 01       	movw	r24, r28
    3212:	46 96       	adiw	r24, 0x16	; 22
    3214:	be 01       	movw	r22, r28
    3216:	61 5f       	subi	r22, 0xF1	; 241
    3218:	7f 4f       	sbci	r23, 0xFF	; 255
    321a:	0e 94 3a 14 	call	0x2874	; 0x2874 <checkForString>
    321e:	88 23       	and	r24, r24
    3220:	11 f0       	breq	.+4      	; 0x3226 <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0x11c>
	
	return check;
}


boolean WiFlyRNXV::getDataType(String& fillBuff,int action){
    3222:	01 e0       	ldi	r16, 0x01	; 1
    3224:	11 11       	cpse	r17, r1
			bufpos++;
			
		}

		//Check for existence of the comparison string, or if timeout stop
		if(checkForString(delimit,responseBuffer) && ipReadMode==false){
    3226:	00 e0       	ldi	r16, 0x00	; 0
    3228:	ce 01       	movw	r24, r28
    322a:	0f 96       	adiw	r24, 0x0f	; 15
    322c:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    3230:	ce 01       	movw	r24, r28
    3232:	46 96       	adiw	r24, 0x16	; 22
    3234:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    3238:	00 23       	and	r16, r16
    323a:	09 f0       	breq	.+2      	; 0x323e <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0x134>
    323c:	bf cf       	rjmp	.-130    	; 0x31bc <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0xb2>
			ipReadMode=true;
			bufpos=0;
		}else if((millis()-startTime)>timeout){
    323e:	0e 94 b9 21 	call	0x4372	; 0x4372 <millis>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	84 19       	sub	r24, r4
    3248:	95 09       	sbc	r25, r5
    324a:	a6 09       	sbc	r26, r6
    324c:	b7 09       	sbc	r27, r7
	boolean compareSuccess=false;								//Compare Success
	int timeout=5000;											//Timeout value fixed

	//Fill the buffer
	unsigned long startTime = millis();
	while(bufRead){
    324e:	89 38       	cpi	r24, 0x89	; 137
    3250:	f3 e1       	ldi	r31, 0x13	; 19
    3252:	9f 07       	cpc	r25, r31
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	af 07       	cpc	r26, r31
    3258:	f0 e0       	ldi	r31, 0x00	; 0
    325a:	bf 07       	cpc	r27, r31
    325c:	08 f4       	brcc	.+2      	; 0x3260 <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0x156>
    325e:	b1 cf       	rjmp	.-158    	; 0x31c2 <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0xb8>
    3260:	10 e0       	ldi	r17, 0x00	; 0
    3262:	33 c0       	rjmp	.+102    	; 0x32ca <_ZN9WiFlyRNXV11getDataTypeER6Stringi+0x1c0>
		}
	}
	
	if(ipReadOver==true){
		//ipValue.trim();
		ipValue.replace(" ","");
    3264:	ce 01       	movw	r24, r28
    3266:	08 96       	adiw	r24, 0x08	; 8
    3268:	64 e8       	ldi	r22, 0x84	; 132
    326a:	72 e0       	ldi	r23, 0x02	; 2
    326c:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    3270:	ce 01       	movw	r24, r28
    3272:	01 96       	adiw	r24, 0x01	; 1
    3274:	69 e7       	ldi	r22, 0x79	; 121
    3276:	71 e0       	ldi	r23, 0x01	; 1
    3278:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    327c:	c7 01       	movw	r24, r14
    327e:	c9 96       	adiw	r24, 0x39	; 57
    3280:	be 01       	movw	r22, r28
    3282:	68 5f       	subi	r22, 0xF8	; 248
    3284:	7f 4f       	sbci	r23, 0xFF	; 255
    3286:	ae 01       	movw	r20, r28
    3288:	4f 5f       	subi	r20, 0xFF	; 255
    328a:	5f 4f       	sbci	r21, 0xFF	; 255
    328c:	0e 94 a0 28 	call	0x5140	; 0x5140 <_ZN6String7replaceERKS_S1_>
    3290:	ce 01       	movw	r24, r28
    3292:	01 96       	adiw	r24, 0x01	; 1
    3294:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    3298:	ce 01       	movw	r24, r28
    329a:	08 96       	adiw	r24, 0x08	; 8
    329c:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
		Serial.print("IPVAL:");
    32a0:	8b e1       	ldi	r24, 0x1B	; 27
    32a2:	96 e0       	ldi	r25, 0x06	; 6
    32a4:	66 e8       	ldi	r22, 0x86	; 134
    32a6:	72 e0       	ldi	r23, 0x02	; 2
    32a8:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <_ZN5Print5printEPKc>
		Serial.println(fillBuff);
    32ac:	8b e1       	ldi	r24, 0x1B	; 27
    32ae:	96 e0       	ldi	r25, 0x06	; 6
    32b0:	b4 01       	movw	r22, r8
    32b2:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <_ZN5Print7printlnERK6String>
		compareSuccess=true;
		delay(200);
    32b6:	68 ec       	ldi	r22, 0xC8	; 200
    32b8:	70 e0       	ldi	r23, 0x00	; 0
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
		ExitCommandMode();
    32c2:	c7 01       	movw	r24, r14
    32c4:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <_ZN9WiFlyRNXV15ExitCommandModeEv>
	if(ipReadOver==true){
		//ipValue.trim();
		ipValue.replace(" ","");
		Serial.print("IPVAL:");
		Serial.println(fillBuff);
		compareSuccess=true;
    32c8:	11 e0       	ldi	r17, 0x01	; 1
		delay(200);
		ExitCommandMode();
	}
	
	uart.flush();
    32ca:	8b 2d       	mov	r24, r11
    32cc:	9a 2d       	mov	r25, r10
    32ce:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
boolean WiFlyRNXV::getDataType(String& fillBuff,int action){
	initializeString(fillBuff,SHORT_STRING);
	
	if(!inCommandMode)	EnterCommandMode();
	
	String delimit;
    32d2:	ce 01       	movw	r24, r28
    32d4:	4d 96       	adiw	r24, 0x1d	; 29
    32d6:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
		ExitCommandMode();
	}
	
	uart.flush();
	return compareSuccess;	
}
    32da:	81 2f       	mov	r24, r17
    32dc:	a3 96       	adiw	r28, 0x23	; 35
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	de bf       	out	0x3e, r29	; 62
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	cd bf       	out	0x3d, r28	; 61
    32e8:	df 91       	pop	r29
    32ea:	cf 91       	pop	r28
    32ec:	1f 91       	pop	r17
    32ee:	0f 91       	pop	r16
    32f0:	ff 90       	pop	r15
    32f2:	ef 90       	pop	r14
    32f4:	df 90       	pop	r13
    32f6:	cf 90       	pop	r12
    32f8:	bf 90       	pop	r11
    32fa:	af 90       	pop	r10
    32fc:	9f 90       	pop	r9
    32fe:	8f 90       	pop	r8
    3300:	7f 90       	pop	r7
    3302:	6f 90       	pop	r6
    3304:	5f 90       	pop	r5
    3306:	4f 90       	pop	r4
    3308:	3f 90       	pop	r3
    330a:	2f 90       	pop	r2
    330c:	08 95       	ret

0000330e <_ZN9WiFlyRNXV9setHostIPEv>:

boolean WiFlyRNXV::setHostIP(){
    330e:	0f 93       	push	r16
    3310:	1f 93       	push	r17
    3312:	cf 93       	push	r28
    3314:	df 93       	push	r29
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	65 97       	sbiw	r28, 0x15	; 21
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	8c 01       	movw	r16, r24
	String hostIP;
    3328:	ce 01       	movw	r24, r28
    332a:	0f 96       	adiw	r24, 0x0f	; 15
    332c:	69 e7       	ldi	r22, 0x79	; 121
    332e:	71 e0       	ldi	r23, 0x01	; 1
    3330:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
	boolean getBool=getDataType(hostIP,GET_DEVID);
    3334:	c8 01       	movw	r24, r16
    3336:	be 01       	movw	r22, r28
    3338:	61 5f       	subi	r22, 0xF1	; 241
    333a:	7f 4f       	sbci	r23, 0xFF	; 255
    333c:	41 e0       	ldi	r20, 0x01	; 1
    333e:	50 e0       	ldi	r21, 0x00	; 0
    3340:	0e 94 85 18 	call	0x310a	; 0x310a <_ZN9WiFlyRNXV11getDataTypeER6Stringi>
	if(getBool){
    3344:	88 23       	and	r24, r24
    3346:	09 f4       	brne	.+2      	; 0x334a <_ZN9WiFlyRNXV9setHostIPEv+0x3c>
    3348:	46 c0       	rjmp	.+140    	; 0x33d6 <_ZN9WiFlyRNXV9setHostIPEv+0xc8>
		EnterCommandMode();
    334a:	c8 01       	movw	r24, r16
    334c:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <_ZN9WiFlyRNXV16EnterCommandModeEv>
		delay(500);
    3350:	64 ef       	ldi	r22, 0xF4	; 244
    3352:	71 e0       	ldi	r23, 0x01	; 1
    3354:	80 e0       	ldi	r24, 0x00	; 0
    3356:	90 e0       	ldi	r25, 0x00	; 0
    3358:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    335c:	ce 01       	movw	r24, r28
    335e:	01 96       	adiw	r24, 0x01	; 1
    3360:	6d e8       	ldi	r22, 0x8D	; 141
    3362:	72 e0       	ldi	r23, 0x02	; 2
    3364:	0e 94 85 2a 	call	0x550a	; 0x550a <_ZN6StringC2EPKc>
		String finalString="set ip host "+hostIP;
    3368:	ce 01       	movw	r24, r28
    336a:	01 96       	adiw	r24, 0x01	; 1
    336c:	be 01       	movw	r22, r28
    336e:	61 5f       	subi	r22, 0xF1	; 241
    3370:	7f 4f       	sbci	r23, 0xFF	; 255
    3372:	0e 94 34 2a 	call	0x5468	; 0x5468 <_ZplRK15StringSumHelperRK6String>
    3376:	bc 01       	movw	r22, r24
    3378:	ce 01       	movw	r24, r28
    337a:	08 96       	adiw	r24, 0x08	; 8
    337c:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN6StringC1ERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3380:	ce 01       	movw	r24, r28
    3382:	01 96       	adiw	r24, 0x01	; 1
    3384:	0e 94 df 2b 	call	0x57be	; 0x57be <_ZN6StringD2Ev>
		Serial.println(finalString);
    3388:	8b e1       	ldi	r24, 0x1B	; 27
    338a:	96 e0       	ldi	r25, 0x06	; 6
    338c:	be 01       	movw	r22, r28
    338e:	68 5f       	subi	r22, 0xF8	; 248
    3390:	7f 4f       	sbci	r23, 0xFF	; 255
    3392:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <_ZN5Print7printlnERK6String>
		uart.println(finalString);
    3396:	c8 01       	movw	r24, r16
    3398:	be 01       	movw	r22, r28
    339a:	68 5f       	subi	r22, 0xF8	; 248
    339c:	7f 4f       	sbci	r23, 0xFF	; 255
    339e:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <_ZN5Print7printlnERK6String>
		delay(500);
    33a2:	64 ef       	ldi	r22, 0xF4	; 244
    33a4:	71 e0       	ldi	r23, 0x01	; 1
    33a6:	80 e0       	ldi	r24, 0x00	; 0
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
		uart.println("save");
    33ae:	c8 01       	movw	r24, r16
    33b0:	6e e2       	ldi	r22, 0x2E	; 46
    33b2:	72 e0       	ldi	r23, 0x02	; 2
    33b4:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
		delay(500);
    33b8:	64 ef       	ldi	r22, 0xF4	; 244
    33ba:	71 e0       	ldi	r23, 0x01	; 1
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
		ExitCommandMode();
    33c4:	c8 01       	movw	r24, r16
    33c6:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <_ZN9WiFlyRNXV15ExitCommandModeEv>
	String hostIP;
	boolean getBool=getDataType(hostIP,GET_DEVID);
	if(getBool){
		EnterCommandMode();
		delay(500);
		String finalString="set ip host "+hostIP;
    33ca:	ce 01       	movw	r24, r28
    33cc:	08 96       	adiw	r24, 0x08	; 8
    33ce:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
		uart.println(finalString);
		delay(500);
		uart.println("save");
		delay(500);
		ExitCommandMode();
		return true;
    33d2:	11 e0       	ldi	r17, 0x01	; 1
    33d4:	01 c0       	rjmp	.+2      	; 0x33d8 <_ZN9WiFlyRNXV9setHostIPEv+0xca>
	}else{
		return false;
    33d6:	10 e0       	ldi	r17, 0x00	; 0
	uart.flush();
	return compareSuccess;	
}

boolean WiFlyRNXV::setHostIP(){
	String hostIP;
    33d8:	ce 01       	movw	r24, r28
    33da:	0f 96       	adiw	r24, 0x0f	; 15
    33dc:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
		ExitCommandMode();
		return true;
	}else{
		return false;
	}
}
    33e0:	81 2f       	mov	r24, r17
    33e2:	65 96       	adiw	r28, 0x15	; 21
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	df 91       	pop	r29
    33f0:	cf 91       	pop	r28
    33f2:	1f 91       	pop	r17
    33f4:	0f 91       	pop	r16
    33f6:	08 95       	ret

000033f8 <_ZN9WiFlyRNXV19getIPValueFromWiFlyEv>:

boolean WiFlyRNXV::getIPValueFromWiFly(){
	return getDataType(ipValue,GET_IP);
    33f8:	bc 01       	movw	r22, r24
    33fa:	67 5c       	subi	r22, 0xC7	; 199
    33fc:	7f 4f       	sbci	r23, 0xFF	; 255
    33fe:	40 e0       	ldi	r20, 0x00	; 0
    3400:	50 e0       	ldi	r21, 0x00	; 0
    3402:	0e 94 85 18 	call	0x310a	; 0x310a <_ZN9WiFlyRNXV11getDataTypeER6Stringi>
}
    3406:	08 95       	ret

00003408 <_ZN9WiFlyRNXV15processResponseEb>:


uint8_t WiFlyRNXV::processResponse(bool removeOpen){
    3408:	df 92       	push	r13
    340a:	ef 92       	push	r14
    340c:	ff 92       	push	r15
    340e:	0f 93       	push	r16
    3410:	1f 93       	push	r17
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	a3 97       	sbiw	r28, 0x23	; 35
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	7c 01       	movw	r14, r24
	if(removeOpen) responseBuffer.replace("*OPEN*","");
    3428:	66 23       	and	r22, r22
    342a:	f1 f0       	breq	.+60     	; 0x3468 <_ZN9WiFlyRNXV15processResponseEb+0x60>
    342c:	ce 01       	movw	r24, r28
    342e:	4d 96       	adiw	r24, 0x1d	; 29
    3430:	6a e9       	ldi	r22, 0x9A	; 154
    3432:	72 e0       	ldi	r23, 0x02	; 2
    3434:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    3438:	ce 01       	movw	r24, r28
    343a:	46 96       	adiw	r24, 0x16	; 22
    343c:	69 e7       	ldi	r22, 0x79	; 121
    343e:	71 e0       	ldi	r23, 0x01	; 1
    3440:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    3444:	c7 01       	movw	r24, r14
    3446:	c0 96       	adiw	r24, 0x30	; 48
    3448:	be 01       	movw	r22, r28
    344a:	63 5e       	subi	r22, 0xE3	; 227
    344c:	7f 4f       	sbci	r23, 0xFF	; 255
    344e:	ae 01       	movw	r20, r28
    3450:	4a 5e       	subi	r20, 0xEA	; 234
    3452:	5f 4f       	sbci	r21, 0xFF	; 255
    3454:	0e 94 a0 28 	call	0x5140	; 0x5140 <_ZN6String7replaceERKS_S1_>
    3458:	ce 01       	movw	r24, r28
    345a:	46 96       	adiw	r24, 0x16	; 22
    345c:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    3460:	ce 01       	movw	r24, r28
    3462:	4d 96       	adiw	r24, 0x1d	; 29
    3464:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
	responseBuffer=getValue(responseBuffer,'\n',0);
    3468:	87 01       	movw	r16, r14
    346a:	00 5d       	subi	r16, 0xD0	; 208
    346c:	1f 4f       	sbci	r17, 0xFF	; 255
    346e:	ce 01       	movw	r24, r28
    3470:	0f 96       	adiw	r24, 0x0f	; 15
    3472:	b8 01       	movw	r22, r16
    3474:	4a e0       	ldi	r20, 0x0A	; 10
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <getValue>
    347e:	c8 01       	movw	r24, r16
    3480:	be 01       	movw	r22, r28
    3482:	61 5f       	subi	r22, 0xF1	; 241
    3484:	7f 4f       	sbci	r23, 0xFF	; 255
    3486:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN6StringaSERKS_>
    348a:	ce 01       	movw	r24, r28
    348c:	0f 96       	adiw	r24, 0x0f	; 15
    348e:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
	String commandStr=responseBuffer.substring(0,1);
    3492:	ce 01       	movw	r24, r28
    3494:	08 96       	adiw	r24, 0x08	; 8
    3496:	b8 01       	movw	r22, r16
    3498:	40 e0       	ldi	r20, 0x00	; 0
    349a:	50 e0       	ldi	r21, 0x00	; 0
    349c:	21 e0       	ldi	r18, 0x01	; 1
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	0e 94 65 2b 	call	0x56ca	; 0x56ca <_ZNK6String9substringEjj>
	uint8_t command=commandStr.toInt();
    34a4:	ce 01       	movw	r24, r28
    34a6:	08 96       	adiw	r24, 0x08	; 8
    34a8:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZNK6String5toIntEv>
    34ac:	d6 2e       	mov	r13, r22
	responseBuffer=responseBuffer.substring(2,responseBuffer.length());
    34ae:	f7 01       	movw	r30, r14
    34b0:	24 a9       	sts	0x44, r18
    34b2:	35 a9       	sts	0x45, r19
    34b4:	ce 01       	movw	r24, r28
    34b6:	01 96       	adiw	r24, 0x01	; 1
    34b8:	b8 01       	movw	r22, r16
    34ba:	42 e0       	ldi	r20, 0x02	; 2
    34bc:	50 e0       	ldi	r21, 0x00	; 0
    34be:	0e 94 65 2b 	call	0x56ca	; 0x56ca <_ZNK6String9substringEjj>
    34c2:	c8 01       	movw	r24, r16
    34c4:	be 01       	movw	r22, r28
    34c6:	6f 5f       	subi	r22, 0xFF	; 255
    34c8:	7f 4f       	sbci	r23, 0xFF	; 255
    34ca:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN6StringaSERKS_>
    34ce:	ce 01       	movw	r24, r28
    34d0:	01 96       	adiw	r24, 0x01	; 1
    34d2:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>


uint8_t WiFlyRNXV::processResponse(bool removeOpen){
	if(removeOpen) responseBuffer.replace("*OPEN*","");
	responseBuffer=getValue(responseBuffer,'\n',0);
	String commandStr=responseBuffer.substring(0,1);
    34d6:	ce 01       	movw	r24, r28
    34d8:	08 96       	adiw	r24, 0x08	; 8
    34da:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
	uint8_t command=commandStr.toInt();
	responseBuffer=responseBuffer.substring(2,responseBuffer.length());
	return command;
}
    34de:	8d 2d       	mov	r24, r13
    34e0:	a3 96       	adiw	r28, 0x23	; 35
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	df 91       	pop	r29
    34ee:	cf 91       	pop	r28
    34f0:	1f 91       	pop	r17
    34f2:	0f 91       	pop	r16
    34f4:	ff 90       	pop	r15
    34f6:	ef 90       	pop	r14
    34f8:	df 90       	pop	r13
    34fa:	08 95       	ret

000034fc <_ZN9WiFlyRNXV13sendTCPStringE6Stringh>:

//ResponseBuffer will be updated
uint8_t WiFlyRNXV::sendTCPString(String data,uint8_t command){
    34fc:	af 92       	push	r10
    34fe:	bf 92       	push	r11
    3500:	cf 92       	push	r12
    3502:	df 92       	push	r13
    3504:	ef 92       	push	r14
    3506:	ff 92       	push	r15
    3508:	0f 93       	push	r16
    350a:	1f 93       	push	r17
    350c:	cf 93       	push	r28
    350e:	df 93       	push	r29
    3510:	cd b7       	in	r28, 0x3d	; 61
    3512:	de b7       	in	r29, 0x3e	; 62
    3514:	2e 97       	sbiw	r28, 0x0e	; 14
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	de bf       	out	0x3e, r29	; 62
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	cd bf       	out	0x3d, r28	; 61
    3520:	8c 01       	movw	r16, r24
    3522:	7b 01       	movw	r14, r22
    3524:	b4 2e       	mov	r11, r20
	
	bool status=false;
	uint8_t resp=0;
	
	initializeString(responseBuffer,LONG_STRING);
    3526:	50 e3       	ldi	r21, 0x30	; 48
    3528:	c5 2e       	mov	r12, r21
    352a:	d1 2c       	mov	r13, r1
    352c:	c8 0e       	add	r12, r24
    352e:	d9 1e       	adc	r13, r25
    3530:	c6 01       	movw	r24, r12
    3532:	60 e0       	ldi	r22, 0x00	; 0
    3534:	70 e0       	ldi	r23, 0x00	; 0
    3536:	0e 94 45 14 	call	0x288a	; 0x288a <initializeString>
	
	Serial.print("SEND:");
    353a:	8b e1       	ldi	r24, 0x1B	; 27
    353c:	96 e0       	ldi	r25, 0x06	; 6
    353e:	61 ea       	ldi	r22, 0xA1	; 161
    3540:	72 e0       	ldi	r23, 0x02	; 2
    3542:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <_ZN5Print5printEPKc>
	Serial.println(data);
    3546:	8b e1       	ldi	r24, 0x1B	; 27
    3548:	96 e0       	ldi	r25, 0x06	; 6
    354a:	b7 01       	movw	r22, r14
    354c:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <_ZN5Print7printlnERK6String>
	
	if(!inCommandMode)	EnterCommandMode();
    3550:	f8 01       	movw	r30, r16
    3552:	87 a9       	sts	0x47, r24
    3554:	88 23       	and	r24, r24
    3556:	19 f4       	brne	.+6      	; 0x355e <_ZN9WiFlyRNXV13sendTCPStringE6Stringh+0x62>
    3558:	c8 01       	movw	r24, r16
    355a:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <_ZN9WiFlyRNXV16EnterCommandModeEv>
	
	delay(500);
    355e:	64 ef       	ldi	r22, 0xF4	; 244
    3560:	71 e0       	ldi	r23, 0x01	; 1
    3562:	80 e0       	ldi	r24, 0x00	; 0
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	uart.println("open");
    356a:	c8 01       	movw	r24, r16
    356c:	67 ea       	ldi	r22, 0xA7	; 167
    356e:	72 e0       	ldi	r23, 0x02	; 2
    3570:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
	
	if(checkBufferResponse("*OPEN*",5000)){
    3574:	ce 01       	movw	r24, r28
    3576:	08 96       	adiw	r24, 0x08	; 8
    3578:	6a e9       	ldi	r22, 0x9A	; 154
    357a:	72 e0       	ldi	r23, 0x02	; 2
    357c:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    3580:	c8 01       	movw	r24, r16
    3582:	be 01       	movw	r22, r28
    3584:	68 5f       	subi	r22, 0xF8	; 248
    3586:	7f 4f       	sbci	r23, 0xFF	; 255
    3588:	48 e8       	ldi	r20, 0x88	; 136
    358a:	53 e1       	ldi	r21, 0x13	; 19
    358c:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi>
    3590:	a8 2e       	mov	r10, r24
    3592:	ce 01       	movw	r24, r28
    3594:	08 96       	adiw	r24, 0x08	; 8
    3596:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    359a:	aa 20       	and	r10, r10
    359c:	a9 f0       	breq	.+42     	; 0x35c8 <_ZN9WiFlyRNXV13sendTCPStringE6Stringh+0xcc>
		delay(300);
    359e:	6c e2       	ldi	r22, 0x2C	; 44
    35a0:	71 e0       	ldi	r23, 0x01	; 1
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
		uart.print(command,DEC);
    35aa:	c8 01       	movw	r24, r16
    35ac:	6b 2d       	mov	r22, r11
    35ae:	4a e0       	ldi	r20, 0x0A	; 10
    35b0:	50 e0       	ldi	r21, 0x00	; 0
    35b2:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <_ZN5Print5printEhi>
		uart.print(":");
    35b6:	c8 01       	movw	r24, r16
    35b8:	6c ea       	ldi	r22, 0xAC	; 172
    35ba:	72 e0       	ldi	r23, 0x02	; 2
    35bc:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <_ZN5Print5printEPKc>
		uart.println(data);
    35c0:	c8 01       	movw	r24, r16
    35c2:	b7 01       	movw	r22, r14
    35c4:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <_ZN5Print7printlnERK6String>
	}
	
	if(checkBufferResponse("*CLOS*",5000)){
    35c8:	ce 01       	movw	r24, r28
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	6e ea       	ldi	r22, 0xAE	; 174
    35ce:	72 e0       	ldi	r23, 0x02	; 2
    35d0:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    35d4:	c8 01       	movw	r24, r16
    35d6:	be 01       	movw	r22, r28
    35d8:	6f 5f       	subi	r22, 0xFF	; 255
    35da:	7f 4f       	sbci	r23, 0xFF	; 255
    35dc:	48 e8       	ldi	r20, 0x88	; 136
    35de:	53 e1       	ldi	r21, 0x13	; 19
    35e0:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi>
    35e4:	e8 2e       	mov	r14, r24
    35e6:	ce 01       	movw	r24, r28
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    35ee:	ee 20       	and	r14, r14
    35f0:	f1 f0       	breq	.+60     	; 0x362e <_ZN9WiFlyRNXV13sendTCPStringE6Stringh+0x132>
		Serial.print("RESP:");
    35f2:	8b e1       	ldi	r24, 0x1B	; 27
    35f4:	96 e0       	ldi	r25, 0x06	; 6
    35f6:	65 eb       	ldi	r22, 0xB5	; 181
    35f8:	72 e0       	ldi	r23, 0x02	; 2
    35fa:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <_ZN5Print5printEPKc>
		//Serial.println("TEST: "+responseBuffer);
		resp=processResponse(false);
    35fe:	c8 01       	movw	r24, r16
    3600:	60 e0       	ldi	r22, 0x00	; 0
    3602:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN9WiFlyRNXV15processResponseEb>
    3606:	e8 2e       	mov	r14, r24
		Serial.println(resp,DEC);
    3608:	8b e1       	ldi	r24, 0x1B	; 27
    360a:	96 e0       	ldi	r25, 0x06	; 6
    360c:	6e 2d       	mov	r22, r14
    360e:	4a e0       	ldi	r20, 0x0A	; 10
    3610:	50 e0       	ldi	r21, 0x00	; 0
    3612:	0e 94 75 26 	call	0x4cea	; 0x4cea <_ZN5Print7printlnEhi>
		Serial.print("RECV:");
    3616:	8b e1       	ldi	r24, 0x1B	; 27
    3618:	96 e0       	ldi	r25, 0x06	; 6
    361a:	6b eb       	ldi	r22, 0xBB	; 187
    361c:	72 e0       	ldi	r23, 0x02	; 2
    361e:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <_ZN5Print5printEPKc>
		Serial.println(responseBuffer);
    3622:	8b e1       	ldi	r24, 0x1B	; 27
    3624:	96 e0       	ldi	r25, 0x06	; 6
    3626:	b6 01       	movw	r22, r12
    3628:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <_ZN5Print7printlnERK6String>
    362c:	01 c0       	rjmp	.+2      	; 0x3630 <_ZN9WiFlyRNXV13sendTCPStringE6Stringh+0x134>

//ResponseBuffer will be updated
uint8_t WiFlyRNXV::sendTCPString(String data,uint8_t command){
	
	bool status=false;
	uint8_t resp=0;
    362e:	ee 24       	eor	r14, r14
	}else{
		status=false;
	}
	
	//delete data;
	inCommandMode=false;
    3630:	f8 01       	movw	r30, r16
    3632:	17 aa       	sts	0x97, r17
	return resp;
}
    3634:	8e 2d       	mov	r24, r14
    3636:	2e 96       	adiw	r28, 0x0e	; 14
    3638:	0f b6       	in	r0, 0x3f	; 63
    363a:	f8 94       	cli
    363c:	de bf       	out	0x3e, r29	; 62
    363e:	0f be       	out	0x3f, r0	; 63
    3640:	cd bf       	out	0x3d, r28	; 61
    3642:	df 91       	pop	r29
    3644:	cf 91       	pop	r28
    3646:	1f 91       	pop	r17
    3648:	0f 91       	pop	r16
    364a:	ff 90       	pop	r15
    364c:	ef 90       	pop	r14
    364e:	df 90       	pop	r13
    3650:	cf 90       	pop	r12
    3652:	bf 90       	pop	r11
    3654:	af 90       	pop	r10
    3656:	08 95       	ret

00003658 <_ZN9WiFlyRNXV12updateServerEh>:

boolean WiFlyRNXV::updateServer(uint8_t command){
    3658:	ef 92       	push	r14
    365a:	ff 92       	push	r15
    365c:	0f 93       	push	r16
    365e:	1f 93       	push	r17
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
    3664:	cd b7       	in	r28, 0x3d	; 61
    3666:	de b7       	in	r29, 0x3e	; 62
    3668:	2e 97       	sbiw	r28, 0x0e	; 14
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	8c 01       	movw	r16, r24
	boolean returnBool=false;
	switch(command){
    3676:	66 23       	and	r22, r22
    3678:	21 f0       	breq	.+8      	; 0x3682 <_ZN9WiFlyRNXV12updateServerEh+0x2a>
    367a:	61 30       	cpi	r22, 0x01	; 1
    367c:	09 f0       	breq	.+2      	; 0x3680 <_ZN9WiFlyRNXV12updateServerEh+0x28>
    367e:	44 c0       	rjmp	.+136    	; 0x3708 <_ZN9WiFlyRNXV12updateServerEh+0xb0>
    3680:	1d c0       	rjmp	.+58     	; 0x36bc <_ZN9WiFlyRNXV12updateServerEh+0x64>
		case SEND_REGISTER:{
			Serial.println("Sending server register");
    3682:	8b e1       	ldi	r24, 0x1B	; 27
    3684:	96 e0       	ldi	r25, 0x06	; 6
    3686:	61 ec       	ldi	r22, 0xC1	; 193
    3688:	72 e0       	ldi	r23, 0x02	; 2
    368a:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
			uint8_t resp=sendTCPString(ipValue,SEND_REGISTER);
    368e:	b8 01       	movw	r22, r16
    3690:	67 5c       	subi	r22, 0xC7	; 199
    3692:	7f 4f       	sbci	r23, 0xFF	; 255
    3694:	ce 01       	movw	r24, r28
    3696:	08 96       	adiw	r24, 0x08	; 8
    3698:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN6StringC1ERKS_>
    369c:	c8 01       	movw	r24, r16
    369e:	be 01       	movw	r22, r28
    36a0:	68 5f       	subi	r22, 0xF8	; 248
    36a2:	7f 4f       	sbci	r23, 0xFF	; 255
    36a4:	40 e0       	ldi	r20, 0x00	; 0
    36a6:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <_ZN9WiFlyRNXV13sendTCPStringE6Stringh>
    36aa:	18 2f       	mov	r17, r24
    36ac:	ce 01       	movw	r24, r28
    36ae:	08 96       	adiw	r24, 0x08	; 8
    36b0:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
	inCommandMode=false;
	return resp;
}

boolean WiFlyRNXV::updateServer(uint8_t command){
	boolean returnBool=false;
    36b4:	01 e0       	ldi	r16, 0x01	; 1
    36b6:	11 30       	cpi	r17, 0x01	; 1
    36b8:	39 f5       	brne	.+78     	; 0x3708 <_ZN9WiFlyRNXV12updateServerEh+0xb0>
    36ba:	27 c0       	rjmp	.+78     	; 0x370a <_ZN9WiFlyRNXV12updateServerEh+0xb2>
			if(resp==REC_REGISTERED) returnBool=true;
			else returnBool=false;
			break;
		}
		case SEND_UPDATE:{
			Serial.println("Sending server update");
    36bc:	8b e1       	ldi	r24, 0x1B	; 27
    36be:	96 e0       	ldi	r25, 0x06	; 6
    36c0:	69 ed       	ldi	r22, 0xD9	; 217
    36c2:	72 e0       	ldi	r23, 0x02	; 2
    36c4:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
			uint8_t resp=sendTCPString(ipValue,SEND_UPDATE);
    36c8:	e9 e3       	ldi	r30, 0x39	; 57
    36ca:	ee 2e       	mov	r14, r30
    36cc:	f1 2c       	mov	r15, r1
    36ce:	e0 0e       	add	r14, r16
    36d0:	f1 1e       	adc	r15, r17
    36d2:	ce 01       	movw	r24, r28
    36d4:	01 96       	adiw	r24, 0x01	; 1
    36d6:	b7 01       	movw	r22, r14
    36d8:	0e 94 c3 2b 	call	0x5786	; 0x5786 <_ZN6StringC1ERKS_>
    36dc:	c8 01       	movw	r24, r16
    36de:	be 01       	movw	r22, r28
    36e0:	6f 5f       	subi	r22, 0xFF	; 255
    36e2:	7f 4f       	sbci	r23, 0xFF	; 255
    36e4:	41 e0       	ldi	r20, 0x01	; 1
    36e6:	0e 94 7e 1a 	call	0x34fc	; 0x34fc <_ZN9WiFlyRNXV13sendTCPStringE6Stringh>
    36ea:	18 2f       	mov	r17, r24
    36ec:	ce 01       	movw	r24, r28
    36ee:	01 96       	adiw	r24, 0x01	; 1
    36f0:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
			if(resp==REC_UPDATED) returnBool=true;
    36f4:	01 e0       	ldi	r16, 0x01	; 1
    36f6:	12 30       	cpi	r17, 0x02	; 2
    36f8:	09 f0       	breq	.+2      	; 0x36fc <_ZN9WiFlyRNXV12updateServerEh+0xa4>
    36fa:	00 e0       	ldi	r16, 0x00	; 0
			else returnBool=false;
			ipValue="";
    36fc:	c7 01       	movw	r24, r14
    36fe:	69 e7       	ldi	r22, 0x79	; 121
    3700:	71 e0       	ldi	r23, 0x01	; 1
    3702:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN6StringaSEPKc>
			break;
    3706:	01 c0       	rjmp	.+2      	; 0x370a <_ZN9WiFlyRNXV12updateServerEh+0xb2>
	inCommandMode=false;
	return resp;
}

boolean WiFlyRNXV::updateServer(uint8_t command){
	boolean returnBool=false;
    3708:	00 e0       	ldi	r16, 0x00	; 0
			break;
		}
	}
	
	return returnBool;
}
    370a:	80 2f       	mov	r24, r16
    370c:	2e 96       	adiw	r28, 0x0e	; 14
    370e:	0f b6       	in	r0, 0x3f	; 63
    3710:	f8 94       	cli
    3712:	de bf       	out	0x3e, r29	; 62
    3714:	0f be       	out	0x3f, r0	; 63
    3716:	cd bf       	out	0x3d, r28	; 61
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	ff 90       	pop	r15
    3722:	ef 90       	pop	r14
    3724:	08 95       	ret

00003726 <_ZN9WiFlyRNXV21processActualResponseEh>:

String WiFlyRNXV::processActualResponse(uint8_t receivedCmd){
    3726:	6f 92       	push	r6
    3728:	7f 92       	push	r7
    372a:	8f 92       	push	r8
    372c:	9f 92       	push	r9
    372e:	bf 92       	push	r11
    3730:	cf 92       	push	r12
    3732:	df 92       	push	r13
    3734:	ef 92       	push	r14
    3736:	ff 92       	push	r15
    3738:	0f 93       	push	r16
    373a:	1f 93       	push	r17
    373c:	cf 93       	push	r28
    373e:	df 93       	push	r29
    3740:	cd b7       	in	r28, 0x3d	; 61
    3742:	de b7       	in	r29, 0x3e	; 62
    3744:	a4 97       	sbiw	r28, 0x24	; 36
    3746:	0f b6       	in	r0, 0x3f	; 63
    3748:	f8 94       	cli
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	0f be       	out	0x3f, r0	; 63
    374e:	cd bf       	out	0x3d, r28	; 61
    3750:	6c 01       	movw	r12, r24
    3752:	8b 01       	movw	r16, r22
	String finalString;
    3754:	69 e7       	ldi	r22, 0x79	; 121
    3756:	71 e0       	ldi	r23, 0x01	; 1
    3758:	4c a3       	lds	r20, 0x5c
    375a:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
	switch(receivedCmd){
    375e:	4c a1       	lds	r20, 0x4c
    3760:	44 30       	cpi	r20, 0x04	; 4
    3762:	49 f1       	breq	.+82     	; 0x37b6 <_ZN9WiFlyRNXV21processActualResponseEh+0x90>
    3764:	45 30       	cpi	r20, 0x05	; 5
    3766:	09 f4       	brne	.+2      	; 0x376a <_ZN9WiFlyRNXV21processActualResponseEh+0x44>
    3768:	98 c0       	rjmp	.+304    	; 0x389a <_ZN9WiFlyRNXV21processActualResponseEh+0x174>
    376a:	43 30       	cpi	r20, 0x03	; 3
    376c:	09 f0       	breq	.+2      	; 0x3770 <_ZN9WiFlyRNXV21processActualResponseEh+0x4a>
    376e:	ca c0       	rjmp	.+404    	; 0x3904 <_ZN9WiFlyRNXV21processActualResponseEh+0x1de>
		case REC_INITSEND:{
			String cmdString=String(SEND_INITREC);
    3770:	ce 01       	movw	r24, r28
    3772:	4d 96       	adiw	r24, 0x1d	; 29
    3774:	62 e0       	ldi	r22, 0x02	; 2
    3776:	70 e0       	ldi	r23, 0x00	; 0
    3778:	4a e0       	ldi	r20, 0x0A	; 10
    377a:	0e 94 1b 2b 	call	0x5636	; 0x5636 <_ZN6StringC1Eih>
			LEDFlasher.quickFlash();
    377e:	80 ef       	ldi	r24, 0xF0	; 240
    3780:	94 e0       	ldi	r25, 0x04	; 4
    3782:	0e 94 79 10 	call	0x20f2	; 0x20f2 <_ZN8LEDTimer10quickFlashEv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    3786:	ce 01       	movw	r24, r28
    3788:	46 96       	adiw	r24, 0x16	; 22
    378a:	be 01       	movw	r22, r28
    378c:	63 5e       	subi	r22, 0xE3	; 227
    378e:	7f 4f       	sbci	r23, 0xFF	; 255
    3790:	0e 94 ce 2b 	call	0x579c	; 0x579c <_ZN6StringC2ERKS_>
			finalString=cmdString+":"+"Verified";
    3794:	ce 01       	movw	r24, r28
    3796:	46 96       	adiw	r24, 0x16	; 22
    3798:	6c ea       	ldi	r22, 0xAC	; 172
    379a:	72 e0       	ldi	r23, 0x02	; 2
    379c:	0e 94 18 2a 	call	0x5430	; 0x5430 <_ZplRK15StringSumHelperPKc>
    37a0:	6f ee       	ldi	r22, 0xEF	; 239
    37a2:	72 e0       	ldi	r23, 0x02	; 2
    37a4:	0e 94 18 2a 	call	0x5430	; 0x5430 <_ZplRK15StringSumHelperPKc>
    37a8:	bc 01       	movw	r22, r24
    37aa:	c6 01       	movw	r24, r12
    37ac:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN6StringaSERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    37b0:	ce 01       	movw	r24, r28
    37b2:	46 96       	adiw	r24, 0x16	; 22
    37b4:	a1 c0       	rjmp	.+322    	; 0x38f8 <_ZN9WiFlyRNXV21processActualResponseEh+0x1d2>
			break;
		}			
		
		case REC_RCVMODE:{
			String cmdString=String(SEND_RCVCAPTD);
    37b6:	fd e1       	ldi	r31, 0x1D	; 29
    37b8:	8f 2e       	mov	r8, r31
    37ba:	91 2c       	mov	r9, r1
    37bc:	8c 0e       	add	r8, r28
    37be:	9d 1e       	adc	r9, r29
    37c0:	c4 01       	movw	r24, r8
    37c2:	63 e0       	ldi	r22, 0x03	; 3
    37c4:	70 e0       	ldi	r23, 0x00	; 0
    37c6:	4a e0       	ldi	r20, 0x0A	; 10
    37c8:	0e 94 1b 2b 	call	0x5636	; 0x5636 <_ZN6StringC1Eih>
			
			boolean keepChecking=true;
			responseBuffer="";
    37cc:	a0 e3       	ldi	r26, 0x30	; 48
    37ce:	ea 2e       	mov	r14, r26
    37d0:	f1 2c       	mov	r15, r1
    37d2:	e0 0e       	add	r14, r16
    37d4:	f1 1e       	adc	r15, r17
    37d6:	c7 01       	movw	r24, r14
    37d8:	69 e7       	ldi	r22, 0x79	; 121
    37da:	71 e0       	ldi	r23, 0x01	; 1
    37dc:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN6StringaSEPKc>
			irSystem.startTime=millis();
    37e0:	0e 94 b9 21 	call	0x4372	; 0x4372 <millis>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	f8 01       	movw	r30, r16
    37ea:	84 a7       	lds	r24, 0x74
    37ec:	95 a7       	lds	r25, 0x75
    37ee:	a6 a7       	lds	r26, 0x76
    37f0:	b7 a7       	lds	r27, 0x77
			LEDFlasher.quickFlash();
    37f2:	80 ef       	ldi	r24, 0xF0	; 240
    37f4:	94 e0       	ldi	r25, 0x04	; 4
    37f6:	0e 94 79 10 	call	0x20f2	; 0x20f2 <_ZN8LEDTimer10quickFlashEv>
			while(keepChecking){
				uint8_t type=irSystem.startReceiver(responseBuffer);
    37fa:	2c e1       	ldi	r18, 0x1C	; 28
    37fc:	62 2e       	mov	r6, r18
    37fe:	71 2c       	mov	r7, r1
    3800:	60 0e       	add	r6, r16
    3802:	71 1e       	adc	r7, r17
				if(type==IR_DATACAP) keepChecking=false;
				else if(type==IR_DATINV) keepChecking=true;
				else if(type==IR_TIMEOUT){
					cmdString=String(SEND_IRTIMEOUT);
    3804:	b8 2c       	mov	r11, r8
    3806:	09 2d       	mov	r16, r9
			boolean keepChecking=true;
			responseBuffer="";
			irSystem.startTime=millis();
			LEDFlasher.quickFlash();
			while(keepChecking){
				uint8_t type=irSystem.startReceiver(responseBuffer);
    3808:	c3 01       	movw	r24, r6
    380a:	b7 01       	movw	r22, r14
    380c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <_ZN8IRSystem13startReceiverER6String>
				if(type==IR_DATACAP) keepChecking=false;
    3810:	88 23       	and	r24, r24
    3812:	d9 f0       	breq	.+54     	; 0x384a <_ZN9WiFlyRNXV21processActualResponseEh+0x124>
				else if(type==IR_DATINV) keepChecking=true;
    3814:	81 30       	cpi	r24, 0x01	; 1
    3816:	d9 f0       	breq	.+54     	; 0x384e <_ZN9WiFlyRNXV21processActualResponseEh+0x128>
				else if(type==IR_TIMEOUT){
    3818:	82 30       	cpi	r24, 0x02	; 2
    381a:	c9 f4       	brne	.+50     	; 0x384e <_ZN9WiFlyRNXV21processActualResponseEh+0x128>
					cmdString=String(SEND_IRTIMEOUT);
    381c:	ce 01       	movw	r24, r28
    381e:	0f 96       	adiw	r24, 0x0f	; 15
    3820:	65 e0       	ldi	r22, 0x05	; 5
    3822:	70 e0       	ldi	r23, 0x00	; 0
    3824:	4a e0       	ldi	r20, 0x0A	; 10
    3826:	0e 94 1b 2b 	call	0x5636	; 0x5636 <_ZN6StringC1Eih>
    382a:	8b 2d       	mov	r24, r11
    382c:	90 2f       	mov	r25, r16
    382e:	be 01       	movw	r22, r28
    3830:	61 5f       	subi	r22, 0xF1	; 241
    3832:	7f 4f       	sbci	r23, 0xFF	; 255
    3834:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN6StringaSERKS_>
    3838:	ce 01       	movw	r24, r28
    383a:	0f 96       	adiw	r24, 0x0f	; 15
    383c:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
					responseBuffer="Timeout";
    3840:	c7 01       	movw	r24, r14
    3842:	68 ef       	ldi	r22, 0xF8	; 248
    3844:	72 e0       	ldi	r23, 0x02	; 2
    3846:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN6StringaSEPKc>
			responseBuffer="";
			irSystem.startTime=millis();
			LEDFlasher.quickFlash();
			while(keepChecking){
				uint8_t type=irSystem.startReceiver(responseBuffer);
				if(type==IR_DATACAP) keepChecking=false;
    384a:	10 e0       	ldi	r17, 0x00	; 0
    384c:	01 c0       	rjmp	.+2      	; 0x3850 <_ZN9WiFlyRNXV21processActualResponseEh+0x12a>
				else if(type==IR_DATINV) keepChecking=true;
				else if(type==IR_TIMEOUT){
    384e:	11 e0       	ldi	r17, 0x01	; 1
					cmdString=String(SEND_IRTIMEOUT);
					responseBuffer="Timeout";
					keepChecking=false;
				}

				delay(100);
    3850:	64 e6       	ldi	r22, 0x64	; 100
    3852:	70 e0       	ldi	r23, 0x00	; 0
    3854:	80 e0       	ldi	r24, 0x00	; 0
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
			
			boolean keepChecking=true;
			responseBuffer="";
			irSystem.startTime=millis();
			LEDFlasher.quickFlash();
			while(keepChecking){
    385c:	11 23       	and	r17, r17
    385e:	a1 f6       	brne	.-88     	; 0x3808 <_ZN9WiFlyRNXV21processActualResponseEh+0xe2>
					keepChecking=false;
				}

				delay(100);
			}
			Serial.println("done");
    3860:	8b e1       	ldi	r24, 0x1B	; 27
    3862:	96 e0       	ldi	r25, 0x06	; 6
    3864:	60 e0       	ldi	r22, 0x00	; 0
    3866:	73 e0       	ldi	r23, 0x03	; 3
    3868:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    386c:	ce 01       	movw	r24, r28
    386e:	08 96       	adiw	r24, 0x08	; 8
    3870:	be 01       	movw	r22, r28
    3872:	63 5e       	subi	r22, 0xE3	; 227
    3874:	7f 4f       	sbci	r23, 0xFF	; 255
    3876:	0e 94 ce 2b 	call	0x579c	; 0x579c <_ZN6StringC2ERKS_>
			finalString=cmdString+":"+responseBuffer;
    387a:	ce 01       	movw	r24, r28
    387c:	08 96       	adiw	r24, 0x08	; 8
    387e:	6c ea       	ldi	r22, 0xAC	; 172
    3880:	72 e0       	ldi	r23, 0x02	; 2
    3882:	0e 94 18 2a 	call	0x5430	; 0x5430 <_ZplRK15StringSumHelperPKc>
    3886:	b7 01       	movw	r22, r14
    3888:	0e 94 34 2a 	call	0x5468	; 0x5468 <_ZplRK15StringSumHelperRK6String>
    388c:	bc 01       	movw	r22, r24
    388e:	c6 01       	movw	r24, r12
    3890:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN6StringaSERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    3894:	ce 01       	movw	r24, r28
    3896:	08 96       	adiw	r24, 0x08	; 8
    3898:	2f c0       	rjmp	.+94     	; 0x38f8 <_ZN9WiFlyRNXV21processActualResponseEh+0x1d2>
			break;
		}
		
		case REC_SNDMODE:{
			String cmdString=String(SEND_SENT);
    389a:	ce 01       	movw	r24, r28
    389c:	4d 96       	adiw	r24, 0x1d	; 29
    389e:	64 e0       	ldi	r22, 0x04	; 4
    38a0:	70 e0       	ldi	r23, 0x00	; 0
    38a2:	4a e0       	ldi	r20, 0x0A	; 10
    38a4:	0e 94 1b 2b 	call	0x5636	; 0x5636 <_ZN6StringC1Eih>
			LEDFlasher.quickFlash();
    38a8:	80 ef       	ldi	r24, 0xF0	; 240
    38aa:	94 e0       	ldi	r25, 0x04	; 4
    38ac:	0e 94 79 10 	call	0x20f2	; 0x20f2 <_ZN8LEDTimer10quickFlashEv>
			Serial.println("Sending..");
    38b0:	8b e1       	ldi	r24, 0x1B	; 27
    38b2:	96 e0       	ldi	r25, 0x06	; 6
    38b4:	65 e0       	ldi	r22, 0x05	; 5
    38b6:	73 e0       	ldi	r23, 0x03	; 3
    38b8:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
			irSystem.processAndExecuteString(responseBuffer);
    38bc:	b8 01       	movw	r22, r16
    38be:	60 5d       	subi	r22, 0xD0	; 208
    38c0:	7f 4f       	sbci	r23, 0xFF	; 255
    38c2:	c8 01       	movw	r24, r16
    38c4:	4c 96       	adiw	r24, 0x1c	; 28
    38c6:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <_ZN8IRSystem23processAndExecuteStringER6String>
{
public:
	StringSumHelper(const String &s) : String(s) {}
    38ca:	ce 01       	movw	r24, r28
    38cc:	01 96       	adiw	r24, 0x01	; 1
    38ce:	be 01       	movw	r22, r28
    38d0:	63 5e       	subi	r22, 0xE3	; 227
    38d2:	7f 4f       	sbci	r23, 0xFF	; 255
    38d4:	0e 94 ce 2b 	call	0x579c	; 0x579c <_ZN6StringC2ERKS_>
			finalString=cmdString+":"+"Sent";
    38d8:	ce 01       	movw	r24, r28
    38da:	01 96       	adiw	r24, 0x01	; 1
    38dc:	6c ea       	ldi	r22, 0xAC	; 172
    38de:	72 e0       	ldi	r23, 0x02	; 2
    38e0:	0e 94 18 2a 	call	0x5430	; 0x5430 <_ZplRK15StringSumHelperPKc>
    38e4:	6f e0       	ldi	r22, 0x0F	; 15
    38e6:	73 e0       	ldi	r23, 0x03	; 3
    38e8:	0e 94 18 2a 	call	0x5430	; 0x5430 <_ZplRK15StringSumHelperPKc>
    38ec:	bc 01       	movw	r22, r24
    38ee:	c6 01       	movw	r24, r12
    38f0:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN6StringaSERKS_>
	#ifdef __GXX_EXPERIMENTAL_CXX0X__
	void move(String &rhs);
	#endif
};

class StringSumHelper : public String
    38f4:	ce 01       	movw	r24, r28
    38f6:	01 96       	adiw	r24, 0x01	; 1
    38f8:	0e 94 df 2b 	call	0x57be	; 0x57be <_ZN6StringD2Ev>
			finalString=cmdString+":"+responseBuffer;
			break;
		}
		
		case REC_SNDMODE:{
			String cmdString=String(SEND_SENT);
    38fc:	ce 01       	movw	r24, r28
    38fe:	4d 96       	adiw	r24, 0x1d	; 29
    3900:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
			finalString=cmdString+":"+"Sent";
			break;
		}
	}
	return finalString;
}
    3904:	c6 01       	movw	r24, r12
    3906:	a4 96       	adiw	r28, 0x24	; 36
    3908:	0f b6       	in	r0, 0x3f	; 63
    390a:	f8 94       	cli
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	0f be       	out	0x3f, r0	; 63
    3910:	cd bf       	out	0x3d, r28	; 61
    3912:	df 91       	pop	r29
    3914:	cf 91       	pop	r28
    3916:	1f 91       	pop	r17
    3918:	0f 91       	pop	r16
    391a:	ff 90       	pop	r15
    391c:	ef 90       	pop	r14
    391e:	df 90       	pop	r13
    3920:	cf 90       	pop	r12
    3922:	bf 90       	pop	r11
    3924:	9f 90       	pop	r9
    3926:	8f 90       	pop	r8
    3928:	7f 90       	pop	r7
    392a:	6f 90       	pop	r6
    392c:	08 95       	ret

0000392e <_ZN9WiFlyRNXV16listenAndProcessEv>:


void WiFlyRNXV::listenAndProcess(){
    392e:	df 92       	push	r13
    3930:	ef 92       	push	r14
    3932:	ff 92       	push	r15
    3934:	0f 93       	push	r16
    3936:	1f 93       	push	r17
    3938:	cf 93       	push	r28
    393a:	df 93       	push	r29
    393c:	cd b7       	in	r28, 0x3d	; 61
    393e:	de b7       	in	r29, 0x3e	; 62
    3940:	65 97       	sbiw	r28, 0x15	; 21
    3942:	0f b6       	in	r0, 0x3f	; 63
    3944:	f8 94       	cli
    3946:	de bf       	out	0x3e, r29	; 62
    3948:	0f be       	out	0x3f, r0	; 63
    394a:	cd bf       	out	0x3d, r28	; 61
    394c:	7c 01       	movw	r14, r24
	uint8_t resp=0;
	
	if(uart.available()){
    394e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <_ZN14SoftwareSerial9availableEv>
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	09 f4       	brne	.+2      	; 0x3958 <_ZN9WiFlyRNXV16listenAndProcessEv+0x2a>
    3956:	6a c0       	rjmp	.+212    	; 0x3a2c <_ZN9WiFlyRNXV16listenAndProcessEv+0xfe>
		if(checkBufferResponse(NULL,5000)){
    3958:	ce 01       	movw	r24, r28
    395a:	0f 96       	adiw	r24, 0x0f	; 15
    395c:	60 e0       	ldi	r22, 0x00	; 0
    395e:	70 e0       	ldi	r23, 0x00	; 0
    3960:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    3964:	c7 01       	movw	r24, r14
    3966:	be 01       	movw	r22, r28
    3968:	61 5f       	subi	r22, 0xF1	; 241
    396a:	7f 4f       	sbci	r23, 0xFF	; 255
    396c:	48 e8       	ldi	r20, 0x88	; 136
    396e:	53 e1       	ldi	r21, 0x13	; 19
    3970:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi>
    3974:	08 2f       	mov	r16, r24
    3976:	ce 01       	movw	r24, r28
    3978:	0f 96       	adiw	r24, 0x0f	; 15
    397a:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    397e:	00 23       	and	r16, r16
    3980:	09 f4       	brne	.+2      	; 0x3984 <_ZN9WiFlyRNXV16listenAndProcessEv+0x56>
    3982:	54 c0       	rjmp	.+168    	; 0x3a2c <_ZN9WiFlyRNXV16listenAndProcessEv+0xfe>
			Serial.println("TCP OPEN");
    3984:	8b e1       	ldi	r24, 0x1B	; 27
    3986:	96 e0       	ldi	r25, 0x06	; 6
    3988:	64 e1       	ldi	r22, 0x14	; 20
    398a:	73 e0       	ldi	r23, 0x03	; 3
    398c:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
			Serial.print("RESP:");
    3990:	8b e1       	ldi	r24, 0x1B	; 27
    3992:	96 e0       	ldi	r25, 0x06	; 6
    3994:	65 eb       	ldi	r22, 0xB5	; 181
    3996:	72 e0       	ldi	r23, 0x02	; 2
    3998:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <_ZN5Print5printEPKc>
			resp=processResponse(true);
    399c:	c7 01       	movw	r24, r14
    399e:	61 e0       	ldi	r22, 0x01	; 1
    39a0:	0e 94 04 1a 	call	0x3408	; 0x3408 <_ZN9WiFlyRNXV15processResponseEb>
    39a4:	d8 2e       	mov	r13, r24
			Serial.println(resp,DEC);
    39a6:	8b e1       	ldi	r24, 0x1B	; 27
    39a8:	96 e0       	ldi	r25, 0x06	; 6
    39aa:	6d 2d       	mov	r22, r13
    39ac:	4a e0       	ldi	r20, 0x0A	; 10
    39ae:	50 e0       	ldi	r21, 0x00	; 0
    39b0:	0e 94 75 26 	call	0x4cea	; 0x4cea <_ZN5Print7printlnEhi>
			Serial.print("RECV:");
    39b4:	8b e1       	ldi	r24, 0x1B	; 27
    39b6:	96 e0       	ldi	r25, 0x06	; 6
    39b8:	6b eb       	ldi	r22, 0xBB	; 187
    39ba:	72 e0       	ldi	r23, 0x02	; 2
    39bc:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <_ZN5Print5printEPKc>
			responseBuffer.trim();
    39c0:	87 01       	movw	r16, r14
    39c2:	00 5d       	subi	r16, 0xD0	; 208
    39c4:	1f 4f       	sbci	r17, 0xFF	; 255
    39c6:	c8 01       	movw	r24, r16
    39c8:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <_ZN6String4trimEv>
			Serial.println(responseBuffer);
    39cc:	8b e1       	ldi	r24, 0x1B	; 27
    39ce:	96 e0       	ldi	r25, 0x06	; 6
    39d0:	b8 01       	movw	r22, r16
    39d2:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <_ZN5Print7printlnERK6String>
			
			//Send some data
			uart.println(processActualResponse(resp));
    39d6:	ce 01       	movw	r24, r28
    39d8:	08 96       	adiw	r24, 0x08	; 8
    39da:	b7 01       	movw	r22, r14
    39dc:	4d 2d       	mov	r20, r13
    39de:	0e 94 93 1b 	call	0x3726	; 0x3726 <_ZN9WiFlyRNXV21processActualResponseEh>
    39e2:	c7 01       	movw	r24, r14
    39e4:	be 01       	movw	r22, r28
    39e6:	68 5f       	subi	r22, 0xF8	; 248
    39e8:	7f 4f       	sbci	r23, 0xFF	; 255
    39ea:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <_ZN5Print7printlnERK6String>
    39ee:	ce 01       	movw	r24, r28
    39f0:	08 96       	adiw	r24, 0x08	; 8
    39f2:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
			
			if(checkBufferResponse("*CLOS*",5000)){
    39f6:	ce 01       	movw	r24, r28
    39f8:	01 96       	adiw	r24, 0x01	; 1
    39fa:	6e ea       	ldi	r22, 0xAE	; 174
    39fc:	72 e0       	ldi	r23, 0x02	; 2
    39fe:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    3a02:	c7 01       	movw	r24, r14
    3a04:	be 01       	movw	r22, r28
    3a06:	6f 5f       	subi	r22, 0xFF	; 255
    3a08:	7f 4f       	sbci	r23, 0xFF	; 255
    3a0a:	48 e8       	ldi	r20, 0x88	; 136
    3a0c:	53 e1       	ldi	r21, 0x13	; 19
    3a0e:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <_ZN9WiFlyRNXV19checkBufferResponseE6Stringi>
    3a12:	08 2f       	mov	r16, r24
    3a14:	ce 01       	movw	r24, r28
    3a16:	01 96       	adiw	r24, 0x01	; 1
    3a18:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    3a1c:	00 23       	and	r16, r16
    3a1e:	31 f0       	breq	.+12     	; 0x3a2c <_ZN9WiFlyRNXV16listenAndProcessEv+0xfe>
				Serial.println("TCP CLOSE");
    3a20:	8b e1       	ldi	r24, 0x1B	; 27
    3a22:	96 e0       	ldi	r25, 0x06	; 6
    3a24:	6d e1       	ldi	r22, 0x1D	; 29
    3a26:	73 e0       	ldi	r23, 0x03	; 3
    3a28:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
		}
		
	}
	
	
}
    3a2c:	65 96       	adiw	r28, 0x15	; 21
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	f8 94       	cli
    3a32:	de bf       	out	0x3e, r29	; 62
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	cd bf       	out	0x3d, r28	; 61
    3a38:	df 91       	pop	r29
    3a3a:	cf 91       	pop	r28
    3a3c:	1f 91       	pop	r17
    3a3e:	0f 91       	pop	r16
    3a40:	ff 90       	pop	r15
    3a42:	ef 90       	pop	r14
    3a44:	df 90       	pop	r13
    3a46:	08 95       	ret

00003a48 <_Z14interruptAdHocv>:
		Serial.println("Ready to roll");
	}
}

//Interrupt
void interruptAdHoc(){
    3a48:	0f 93       	push	r16
    3a4a:	1f 93       	push	r17
	static unsigned long last_interrupt_time = 0;
	unsigned long interrupt_time = millis();
    3a4c:	0e 94 b9 21 	call	0x4372	; 0x4372 <millis>
    3a50:	dc 01       	movw	r26, r24
    3a52:	cb 01       	movw	r24, r22
	// If interrupts come faster than 200ms, assume it's a bounce and ignore
	if (interrupt_time - last_interrupt_time > 200){
    3a54:	40 91 82 05 	lds	r20, 0x0582
    3a58:	50 91 83 05 	lds	r21, 0x0583
    3a5c:	60 91 84 05 	lds	r22, 0x0584
    3a60:	70 91 85 05 	lds	r23, 0x0585
    3a64:	8c 01       	movw	r16, r24
    3a66:	9d 01       	movw	r18, r26
    3a68:	04 1b       	sub	r16, r20
    3a6a:	15 0b       	sbc	r17, r21
    3a6c:	26 0b       	sbc	r18, r22
    3a6e:	37 0b       	sbc	r19, r23
    3a70:	09 3c       	cpi	r16, 0xC9	; 201
    3a72:	11 05       	cpc	r17, r1
    3a74:	21 05       	cpc	r18, r1
    3a76:	31 05       	cpc	r19, r1
    3a78:	18 f0       	brcs	.+6      	; 0x3a80 <_Z14interruptAdHocv+0x38>
		interrupted=true;
    3a7a:	21 e0       	ldi	r18, 0x01	; 1
    3a7c:	20 93 40 05 	sts	0x0540, r18
	}
	last_interrupt_time = interrupt_time;
    3a80:	80 93 82 05 	sts	0x0582, r24
    3a84:	90 93 83 05 	sts	0x0583, r25
    3a88:	a0 93 84 05 	sts	0x0584, r26
    3a8c:	b0 93 85 05 	sts	0x0585, r27
}
    3a90:	1f 91       	pop	r17
    3a92:	0f 91       	pop	r16
    3a94:	08 95       	ret

00003a96 <_Z41__static_initialization_and_destruction_0ii.constprop.2>:
	while(wifly.uart.available()){
		Serial.print(wifly.uart.read());
	}
	*/
	
    3a96:	81 30       	cpi	r24, 0x01	; 1
    3a98:	91 05       	cpc	r25, r1
    3a9a:	39 f4       	brne	.+14     	; 0x3aaa <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x14>
	UNKNOWNS			//Unknown state, currently no handle
};
State state=UNKNOWNS;

/* Objects and Variables */
WiFlyRNXV wiFly(WIFLYTX, WIFLYRX);
    3a9c:	82 e4       	ldi	r24, 0x42	; 66
    3a9e:	95 e0       	ldi	r25, 0x05	; 5
    3aa0:	65 e0       	ldi	r22, 0x05	; 5
    3aa2:	44 e0       	ldi	r20, 0x04	; 4
    3aa4:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <_ZN9WiFlyRNXVC1Ehh>
    3aa8:	08 95       	ret
    3aaa:	00 97       	sbiw	r24, 0x00	; 0
    3aac:	61 f4       	brne	.+24     	; 0x3ac6 <_Z41__static_initialization_and_destruction_0ii.constprop.2+0x30>
#define GET_IP			0
#define GET_DEVID		1

using namespace std;

class WiFlyRNXV{
    3aae:	8b e7       	ldi	r24, 0x7B	; 123
    3ab0:	95 e0       	ldi	r25, 0x05	; 5
    3ab2:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    3ab6:	82 e7       	ldi	r24, 0x72	; 114
    3ab8:	95 e0       	ldi	r25, 0x05	; 5
    3aba:	0e 94 d9 2b 	call	0x57b2	; 0x57b2 <_ZN6StringD1Ev>
    3abe:	82 e4       	ldi	r24, 0x42	; 66
    3ac0:	95 e0       	ldi	r25, 0x05	; 5
    3ac2:	0e 94 32 14 	call	0x2864	; 0x2864 <_ZN14SoftwareSerialD1Ev>
    3ac6:	08 95       	ret

00003ac8 <_Z10updateWiFiv>:
void setup();
void loop();
void updateWiFi();

//Check WiFi Status
void updateWiFi(){
    3ac8:	cf 93       	push	r28
	State startState=CONNECTED1;
	LEDFlasher.setState(LEDBLINK,LEDOFF);
    3aca:	80 ef       	ldi	r24, 0xF0	; 240
    3acc:	94 e0       	ldi	r25, 0x04	; 4
    3ace:	61 e0       	ldi	r22, 0x01	; 1
    3ad0:	40 e0       	ldi	r20, 0x00	; 0
    3ad2:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN8LEDTimer8setStateEhh>
	bool wiFiStatus=wiFly.CheckWiFiStatus();
    3ad6:	82 e4       	ldi	r24, 0x42	; 66
    3ad8:	95 e0       	ldi	r25, 0x05	; 5
    3ada:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <_ZN9WiFlyRNXV15CheckWiFiStatusEv>
    3ade:	c1 e0       	ldi	r28, 0x01	; 1
    3ae0:	88 23       	and	r24, r24
    3ae2:	29 f4       	brne	.+10     	; 0x3aee <_Z10updateWiFiv+0x26>
    3ae4:	c0 e0       	ldi	r28, 0x00	; 0
	if(wiFiStatus)
		state=startState;
	else
		state=DISCONNECTED;
    3ae6:	83 e0       	ldi	r24, 0x03	; 3
    3ae8:	80 93 c9 03 	sts	0x03C9, r24
    3aec:	02 c0       	rjmp	.+4      	; 0x3af2 <_Z10updateWiFiv+0x2a>
void updateWiFi(){
	State startState=CONNECTED1;
	LEDFlasher.setState(LEDBLINK,LEDOFF);
	bool wiFiStatus=wiFly.CheckWiFiStatus();
	if(wiFiStatus)
		state=startState;
    3aee:	10 92 c9 03 	sts	0x03C9, r1
	else
		state=DISCONNECTED;

	Serial.print("WiFi: ");
    3af2:	8b e1       	ldi	r24, 0x1B	; 27
    3af4:	96 e0       	ldi	r25, 0x06	; 6
    3af6:	67 e2       	ldi	r22, 0x27	; 39
    3af8:	73 e0       	ldi	r23, 0x03	; 3
    3afa:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <_ZN5Print5printEPKc>
	Serial.println(wiFiStatus);
    3afe:	8b e1       	ldi	r24, 0x1B	; 27
    3b00:	96 e0       	ldi	r25, 0x06	; 6
    3b02:	6c 2f       	mov	r22, r28
    3b04:	70 e0       	ldi	r23, 0x00	; 0
    3b06:	4a e0       	ldi	r20, 0x0A	; 10
    3b08:	50 e0       	ldi	r21, 0x00	; 0
    3b0a:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN5Print7printlnEii>
	
	if(state==startState){
    3b0e:	80 91 c9 03 	lds	r24, 0x03C9
    3b12:	88 23       	and	r24, r24
    3b14:	61 f4       	brne	.+24     	; 0x3b2e <_Z10updateWiFiv+0x66>
		delay(4000);
    3b16:	60 ea       	ldi	r22, 0xA0	; 160
    3b18:	7f e0       	ldi	r23, 0x0F	; 15
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
		//wiFly.uart.flush();
		Serial.println("Ready to roll");
    3b22:	8b e1       	ldi	r24, 0x1B	; 27
    3b24:	96 e0       	ldi	r25, 0x06	; 6
    3b26:	6e e2       	ldi	r22, 0x2E	; 46
    3b28:	73 e0       	ldi	r23, 0x03	; 3
    3b2a:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
	}
}
    3b2e:	cf 91       	pop	r28
    3b30:	08 95       	ret

00003b32 <setup>:
		interrupted=true;
	}
	last_interrupt_time = interrupt_time;
}

void setup() {
    3b32:	cf 93       	push	r28
    3b34:	df 93       	push	r29
	pinMode(13, OUTPUT);
    3b36:	8d e0       	ldi	r24, 0x0D	; 13
    3b38:	61 e0       	ldi	r22, 0x01	; 1
    3b3a:	0e 94 65 22 	call	0x44ca	; 0x44ca <pinMode>
	LEDFlasher.setLED(LED1,LED2);
    3b3e:	c0 ef       	ldi	r28, 0xF0	; 240
    3b40:	d4 e0       	ldi	r29, 0x04	; 4
    3b42:	ce 01       	movw	r24, r28
    3b44:	66 e0       	ldi	r22, 0x06	; 6
    3b46:	47 e0       	ldi	r20, 0x07	; 7
    3b48:	0e 94 27 10 	call	0x204e	; 0x204e <_ZN8LEDTimer6setLEDEhh>
	LEDFlasher.setState(LEDOFF,LEDOFF);
    3b4c:	ce 01       	movw	r24, r28
    3b4e:	60 e0       	ldi	r22, 0x00	; 0
    3b50:	40 e0       	ldi	r20, 0x00	; 0
    3b52:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN8LEDTimer8setStateEhh>
	LEDFlasher.start();
    3b56:	ce 01       	movw	r24, r28
    3b58:	0e 94 39 10 	call	0x2072	; 0x2072 <_ZN8LEDTimer5startEv>
	
	Serial.begin(9600);
    3b5c:	cb e1       	ldi	r28, 0x1B	; 27
    3b5e:	d6 e0       	ldi	r29, 0x06	; 6
    3b60:	ce 01       	movw	r24, r28
    3b62:	40 e8       	ldi	r20, 0x80	; 128
    3b64:	55 e2       	ldi	r21, 0x25	; 37
    3b66:	60 e0       	ldi	r22, 0x00	; 0
    3b68:	70 e0       	ldi	r23, 0x00	; 0
    3b6a:	0e 94 ce 23 	call	0x479c	; 0x479c <_ZN14HardwareSerial5beginEm>
	Serial.println("Starting System..");
    3b6e:	ce 01       	movw	r24, r28
    3b70:	6c e3       	ldi	r22, 0x3C	; 60
    3b72:	73 e0       	ldi	r23, 0x03	; 3
    3b74:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
	
	wiFly.start();
    3b78:	c2 e4       	ldi	r28, 0x42	; 66
    3b7a:	d5 e0       	ldi	r29, 0x05	; 5
    3b7c:	ce 01       	movw	r24, r28
    3b7e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <_ZN9WiFlyRNXV5startEv>
	delay(2000);
    3b82:	60 ed       	ldi	r22, 0xD0	; 208
    3b84:	77 e0       	ldi	r23, 0x07	; 7
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
	wiFly.ExitCommandMode();
    3b8e:	ce 01       	movw	r24, r28
    3b90:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <_ZN9WiFlyRNXV15ExitCommandModeEv>
	wiFly.RebootWiFly();
    3b94:	ce 01       	movw	r24, r28
    3b96:	0e 94 03 17 	call	0x2e06	; 0x2e06 <_ZN9WiFlyRNXV11RebootWiFlyEv>
	updateWiFi();
    3b9a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <_Z10updateWiFiv>
	
	attachInterrupt(ADHOCPIN2, interruptAdHoc, RISING);
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	64 e2       	ldi	r22, 0x24	; 36
    3ba2:	7d e1       	ldi	r23, 0x1D	; 29
    3ba4:	43 e0       	ldi	r20, 0x03	; 3
    3ba6:	50 e0       	ldi	r21, 0x00	; 0
    3ba8:	0e 94 f4 20 	call	0x41e8	; 0x41e8 <attachInterrupt>
}
    3bac:	df 91       	pop	r29
    3bae:	cf 91       	pop	r28
    3bb0:	08 95       	ret

00003bb2 <loop>:

void loop() {
	
	if(interrupted){
    3bb2:	80 91 40 05 	lds	r24, 0x0540
    3bb6:	88 23       	and	r24, r24
    3bb8:	21 f1       	breq	.+72     	; 0x3c02 <loop+0x50>
		LEDFlasher.setState(LEDOFF,LEDBLINK);
    3bba:	80 ef       	ldi	r24, 0xF0	; 240
    3bbc:	94 e0       	ldi	r25, 0x04	; 4
    3bbe:	60 e0       	ldi	r22, 0x00	; 0
    3bc0:	41 e0       	ldi	r20, 0x01	; 1
    3bc2:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN8LEDTimer8setStateEhh>
		interrupted=false;
    3bc6:	10 92 40 05 	sts	0x0540, r1
		Serial.println("Adhoc made activating..");
    3bca:	8b e1       	ldi	r24, 0x1B	; 27
    3bcc:	96 e0       	ldi	r25, 0x06	; 6
    3bce:	6e e4       	ldi	r22, 0x4E	; 78
    3bd0:	73 e0       	ldi	r23, 0x03	; 3
    3bd2:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
		wiFly.EnterAdHoc();
    3bd6:	82 e4       	ldi	r24, 0x42	; 66
    3bd8:	95 e0       	ldi	r25, 0x05	; 5
    3bda:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <_ZN9WiFlyRNXV10EnterAdHocEv>
		Serial.println("Adhoc active");
    3bde:	8b e1       	ldi	r24, 0x1B	; 27
    3be0:	96 e0       	ldi	r25, 0x06	; 6
    3be2:	66 e6       	ldi	r22, 0x66	; 102
    3be4:	73 e0       	ldi	r23, 0x03	; 3
    3be6:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
		state=ADHOCCONNECT;
    3bea:	84 e0       	ldi	r24, 0x04	; 4
    3bec:	80 93 c9 03 	sts	0x03C9, r24
		LEDFlasher.setState(LEDOFF,LEDON);
    3bf0:	80 ef       	ldi	r24, 0xF0	; 240
    3bf2:	94 e0       	ldi	r25, 0x04	; 4
    3bf4:	60 e0       	ldi	r22, 0x00	; 0
    3bf6:	42 e0       	ldi	r20, 0x02	; 2
    3bf8:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN8LEDTimer8setStateEhh>
		adhocsetbefore=true;
    3bfc:	81 e0       	ldi	r24, 0x01	; 1
    3bfe:	80 93 3f 05 	sts	0x053F, r24
	}
	
	switch(state){
    3c02:	80 91 c9 03 	lds	r24, 0x03C9
    3c06:	82 30       	cpi	r24, 0x02	; 2
    3c08:	09 f4       	brne	.+2      	; 0x3c0c <loop+0x5a>
    3c0a:	c8 c0       	rjmp	.+400    	; 0x3d9c <loop+0x1ea>
    3c0c:	83 30       	cpi	r24, 0x03	; 3
    3c0e:	38 f4       	brcc	.+14     	; 0x3c1e <loop+0x6c>
    3c10:	88 23       	and	r24, r24
    3c12:	09 f4       	brne	.+2      	; 0x3c16 <loop+0x64>
    3c14:	3f c0       	rjmp	.+126    	; 0x3c94 <loop+0xe2>
    3c16:	81 30       	cpi	r24, 0x01	; 1
    3c18:	09 f0       	breq	.+2      	; 0x3c1c <loop+0x6a>
    3c1a:	c4 c0       	rjmp	.+392    	; 0x3da4 <loop+0x1f2>
    3c1c:	77 c0       	rjmp	.+238    	; 0x3d0c <loop+0x15a>
    3c1e:	84 30       	cpi	r24, 0x04	; 4
    3c20:	49 f0       	breq	.+18     	; 0x3c34 <loop+0x82>
    3c22:	84 30       	cpi	r24, 0x04	; 4
    3c24:	20 f0       	brcs	.+8      	; 0x3c2e <loop+0x7c>
    3c26:	85 30       	cpi	r24, 0x05	; 5
    3c28:	09 f0       	breq	.+2      	; 0x3c2c <loop+0x7a>
    3c2a:	bc c0       	rjmp	.+376    	; 0x3da4 <loop+0x1f2>
    3c2c:	22 c0       	rjmp	.+68     	; 0x3c72 <loop+0xc0>
		case DISCONNECTED:
			updateWiFi();
    3c2e:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <_Z10updateWiFiv>
			break;
    3c32:	08 95       	ret
			
		case ADHOCCONNECT:{
			if(wiFly.AdHocConnected()){
    3c34:	82 e4       	ldi	r24, 0x42	; 66
    3c36:	95 e0       	ldi	r25, 0x05	; 5
    3c38:	0e 94 3a 18 	call	0x3074	; 0x3074 <_ZN9WiFlyRNXV14AdHocConnectedEv>
    3c3c:	88 23       	and	r24, r24
    3c3e:	09 f4       	brne	.+2      	; 0x3c42 <loop+0x90>
    3c40:	b1 c0       	rjmp	.+354    	; 0x3da4 <loop+0x1f2>
				state=ADHOCON;
    3c42:	85 e0       	ldi	r24, 0x05	; 5
    3c44:	80 93 c9 03 	sts	0x03C9, r24
				delay(3000);
    3c48:	68 eb       	ldi	r22, 0xB8	; 184
    3c4a:	7b e0       	ldi	r23, 0x0B	; 11
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
				wiFly.uart.flush();
    3c54:	82 e4       	ldi	r24, 0x42	; 66
    3c56:	95 e0       	ldi	r25, 0x05	; 5
    3c58:	0e 94 52 11 	call	0x22a4	; 0x22a4 <_ZN14SoftwareSerial5flushEv>
				Serial.println("Ready for Android/iOS");
    3c5c:	8b e1       	ldi	r24, 0x1B	; 27
    3c5e:	96 e0       	ldi	r25, 0x06	; 6
    3c60:	63 e7       	ldi	r22, 0x73	; 115
    3c62:	73 e0       	ldi	r23, 0x03	; 3
    3c64:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
				LEDFlasher.setState(LEDON,LEDON);
    3c68:	80 ef       	ldi	r24, 0xF0	; 240
    3c6a:	94 e0       	ldi	r25, 0x04	; 4
    3c6c:	62 e0       	ldi	r22, 0x02	; 2
    3c6e:	42 e0       	ldi	r20, 0x02	; 2
    3c70:	4a c0       	rjmp	.+148    	; 0x3d06 <loop+0x154>
			}
			break;
		}
		
		case ADHOCON:{
			if(wiFly.AdHocEnded()){
    3c72:	82 e4       	ldi	r24, 0x42	; 66
    3c74:	95 e0       	ldi	r25, 0x05	; 5
    3c76:	0e 94 6d 18 	call	0x30da	; 0x30da <_ZN9WiFlyRNXV10AdHocEndedEv>
    3c7a:	88 23       	and	r24, r24
    3c7c:	09 f4       	brne	.+2      	; 0x3c80 <loop+0xce>
    3c7e:	92 c0       	rjmp	.+292    	; 0x3da4 <loop+0x1f2>
				LEDFlasher.setState(LEDOFF,LEDOFF);
    3c80:	80 ef       	ldi	r24, 0xF0	; 240
    3c82:	94 e0       	ldi	r25, 0x04	; 4
    3c84:	60 e0       	ldi	r22, 0x00	; 0
    3c86:	40 e0       	ldi	r20, 0x00	; 0
    3c88:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN8LEDTimer8setStateEhh>
				state=DISCONNECTED;
    3c8c:	83 e0       	ldi	r24, 0x03	; 3
    3c8e:	80 93 c9 03 	sts	0x03C9, r24
				break;
    3c92:	08 95       	ret
			}
			break;
		}			
		
		case CONNECTED1:{
			delay(3000);
    3c94:	68 eb       	ldi	r22, 0xB8	; 184
    3c96:	7b e0       	ldi	r23, 0x0B	; 11
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
			if(wiFly.getIPValueFromWiFly())
    3ca0:	82 e4       	ldi	r24, 0x42	; 66
    3ca2:	95 e0       	ldi	r25, 0x05	; 5
    3ca4:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <_ZN9WiFlyRNXV19getIPValueFromWiFlyEv>
    3ca8:	88 23       	and	r24, r24
    3caa:	29 f0       	breq	.+10     	; 0x3cb6 <loop+0x104>
				Serial.println("Got IP");
    3cac:	8b e1       	ldi	r24, 0x1B	; 27
    3cae:	96 e0       	ldi	r25, 0x06	; 6
    3cb0:	69 e8       	ldi	r22, 0x89	; 137
    3cb2:	73 e0       	ldi	r23, 0x03	; 3
    3cb4:	04 c0       	rjmp	.+8      	; 0x3cbe <loop+0x10c>
			else
				Serial.println("Failed IP");
    3cb6:	8b e1       	ldi	r24, 0x1B	; 27
    3cb8:	96 e0       	ldi	r25, 0x06	; 6
    3cba:	60 e9       	ldi	r22, 0x90	; 144
    3cbc:	73 e0       	ldi	r23, 0x03	; 3
    3cbe:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
				
			if(adhocsetbefore){
    3cc2:	80 91 3f 05 	lds	r24, 0x053F
    3cc6:	88 23       	and	r24, r24
    3cc8:	b9 f0       	breq	.+46     	; 0x3cf8 <loop+0x146>
				delay(1000);
    3cca:	68 ee       	ldi	r22, 0xE8	; 232
    3ccc:	73 e0       	ldi	r23, 0x03	; 3
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	90 e0       	ldi	r25, 0x00	; 0
    3cd2:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
				if(wiFly.setHostIP())
    3cd6:	82 e4       	ldi	r24, 0x42	; 66
    3cd8:	95 e0       	ldi	r25, 0x05	; 5
    3cda:	0e 94 87 19 	call	0x330e	; 0x330e <_ZN9WiFlyRNXV9setHostIPEv>
    3cde:	88 23       	and	r24, r24
    3ce0:	29 f0       	breq	.+10     	; 0x3cec <loop+0x13a>
					Serial.println("Host IP Set");
    3ce2:	8b e1       	ldi	r24, 0x1B	; 27
    3ce4:	96 e0       	ldi	r25, 0x06	; 6
    3ce6:	6a e9       	ldi	r22, 0x9A	; 154
    3ce8:	73 e0       	ldi	r23, 0x03	; 3
    3cea:	04 c0       	rjmp	.+8      	; 0x3cf4 <loop+0x142>
				else
					Serial.println("Failed to set host IP");
    3cec:	8b e1       	ldi	r24, 0x1B	; 27
    3cee:	96 e0       	ldi	r25, 0x06	; 6
    3cf0:	66 ea       	ldi	r22, 0xA6	; 166
    3cf2:	73 e0       	ldi	r23, 0x03	; 3
    3cf4:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
			}				
			
			state=CONNECTED2;
    3cf8:	81 e0       	ldi	r24, 0x01	; 1
    3cfa:	80 93 c9 03 	sts	0x03C9, r24
			LEDFlasher.setState(LEDON,LEDBLINK);
    3cfe:	80 ef       	ldi	r24, 0xF0	; 240
    3d00:	94 e0       	ldi	r25, 0x04	; 4
    3d02:	62 e0       	ldi	r22, 0x02	; 2
    3d04:	41 e0       	ldi	r20, 0x01	; 1
    3d06:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN8LEDTimer8setStateEhh>
			break;
    3d0a:	08 95       	ret
		}			
		
		case CONNECTED2:{
			delay(3000);
    3d0c:	68 eb       	ldi	r22, 0xB8	; 184
    3d0e:	7b e0       	ldi	r23, 0x0B	; 11
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
			if(adhocsetbefore){
    3d18:	80 91 3f 05 	lds	r24, 0x053F
    3d1c:	88 23       	and	r24, r24
    3d1e:	31 f0       	breq	.+12     	; 0x3d2c <loop+0x17a>
				adhocsetbefore=false;
    3d20:	10 92 3f 05 	sts	0x053F, r1
				if(wiFly.updateServer(SEND_REGISTER)){
    3d24:	82 e4       	ldi	r24, 0x42	; 66
    3d26:	95 e0       	ldi	r25, 0x05	; 5
    3d28:	60 e0       	ldi	r22, 0x00	; 0
    3d2a:	03 c0       	rjmp	.+6      	; 0x3d32 <loop+0x180>
					Serial.println("FAIL");
					LEDFlasher.setState(LEDBLINK,LEDBLINK);
					state=UNKNOWNS;					
				}				
			}else{
				if(wiFly.updateServer(SEND_UPDATE)){
    3d2c:	82 e4       	ldi	r24, 0x42	; 66
    3d2e:	95 e0       	ldi	r25, 0x05	; 5
    3d30:	61 e0       	ldi	r22, 0x01	; 1
    3d32:	0e 94 2c 1b 	call	0x3658	; 0x3658 <_ZN9WiFlyRNXV12updateServerEh>
    3d36:	88 23       	and	r24, r24
    3d38:	91 f0       	breq	.+36     	; 0x3d5e <loop+0x1ac>
					Serial.println("SUCCESS");
    3d3a:	8b e1       	ldi	r24, 0x1B	; 27
    3d3c:	96 e0       	ldi	r25, 0x06	; 6
    3d3e:	6c eb       	ldi	r22, 0xBC	; 188
    3d40:	73 e0       	ldi	r23, 0x03	; 3
    3d42:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
					LEDFlasher.setState(LEDON,LEDON);
    3d46:	80 ef       	ldi	r24, 0xF0	; 240
    3d48:	94 e0       	ldi	r25, 0x04	; 4
    3d4a:	62 e0       	ldi	r22, 0x02	; 2
    3d4c:	42 e0       	ldi	r20, 0x02	; 2
    3d4e:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN8LEDTimer8setStateEhh>
					LEDFlasher.stop();
    3d52:	80 ef       	ldi	r24, 0xF0	; 240
    3d54:	94 e0       	ldi	r25, 0x04	; 4
    3d56:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_ZN8LEDTimer4stopEv>
					state=CONNECTED3;
    3d5a:	82 e0       	ldi	r24, 0x02	; 2
    3d5c:	0d c0       	rjmp	.+26     	; 0x3d78 <loop+0x1c6>
				}else{
					Serial.println("FAIL");
    3d5e:	8b e1       	ldi	r24, 0x1B	; 27
    3d60:	96 e0       	ldi	r25, 0x06	; 6
    3d62:	64 ec       	ldi	r22, 0xC4	; 196
    3d64:	73 e0       	ldi	r23, 0x03	; 3
    3d66:	0e 94 f5 26 	call	0x4dea	; 0x4dea <_ZN5Print7printlnEPKc>
					LEDFlasher.setState(LEDBLINK,LEDBLINK);
    3d6a:	80 ef       	ldi	r24, 0xF0	; 240
    3d6c:	94 e0       	ldi	r25, 0x04	; 4
    3d6e:	61 e0       	ldi	r22, 0x01	; 1
    3d70:	41 e0       	ldi	r20, 0x01	; 1
    3d72:	0e 94 ba 10 	call	0x2174	; 0x2174 <_ZN8LEDTimer8setStateEhh>
					state=UNKNOWNS;					
    3d76:	87 e0       	ldi	r24, 0x07	; 7
    3d78:	80 93 c9 03 	sts	0x03C9, r24
				}					
			}
			
			delay(1000);
    3d7c:	68 ee       	ldi	r22, 0xE8	; 232
    3d7e:	73 e0       	ldi	r23, 0x03	; 3
    3d80:	80 e0       	ldi	r24, 0x00	; 0
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	0e 94 c7 21 	call	0x438e	; 0x438e <delay>
			Serial.println(freeMemory());
    3d88:	0e 94 ed 10 	call	0x21da	; 0x21da <freeMemory>
    3d8c:	bc 01       	movw	r22, r24
    3d8e:	8b e1       	ldi	r24, 0x1B	; 27
    3d90:	96 e0       	ldi	r25, 0x06	; 6
    3d92:	4a e0       	ldi	r20, 0x0A	; 10
    3d94:	50 e0       	ldi	r21, 0x00	; 0
    3d96:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <_ZN5Print7printlnEii>
			break;
    3d9a:	08 95       	ret
		}		
		
		case CONNECTED3:{
			wiFly.listenAndProcess();
    3d9c:	82 e4       	ldi	r24, 0x42	; 66
    3d9e:	95 e0       	ldi	r25, 0x05	; 5
    3da0:	0e 94 97 1c 	call	0x392e	; 0x392e <_ZN9WiFlyRNXV16listenAndProcessEv>
    3da4:	08 95       	ret

00003da6 <_GLOBAL__sub_I_state>:
	while(wifly.uart.available()){
		Serial.print(wifly.uart.read());
	}
	*/
	
    3da6:	81 e0       	ldi	r24, 0x01	; 1
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <_Z41__static_initialization_and_destruction_0ii.constprop.2>
    3dae:	08 95       	ret

00003db0 <_GLOBAL__sub_D_state>:
    3db0:	80 e0       	ldi	r24, 0x00	; 0
    3db2:	90 e0       	ldi	r25, 0x00	; 0
    3db4:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <_Z41__static_initialization_and_destruction_0ii.constprop.2>
    3db8:	08 95       	ret

00003dba <__subsf3>:
    3dba:	50 58       	subi	r21, 0x80	; 128

00003dbc <__addsf3>:
    3dbc:	bb 27       	eor	r27, r27
    3dbe:	aa 27       	eor	r26, r26
    3dc0:	0e d0       	rcall	.+28     	; 0x3dde <__addsf3x>
    3dc2:	75 c1       	rjmp	.+746    	; 0x40ae <__fp_round>
    3dc4:	66 d1       	rcall	.+716    	; 0x4092 <__fp_pscA>
    3dc6:	30 f0       	brcs	.+12     	; 0x3dd4 <__addsf3+0x18>
    3dc8:	6b d1       	rcall	.+726    	; 0x40a0 <__fp_pscB>
    3dca:	20 f0       	brcs	.+8      	; 0x3dd4 <__addsf3+0x18>
    3dcc:	31 f4       	brne	.+12     	; 0x3dda <__addsf3+0x1e>
    3dce:	9f 3f       	cpi	r25, 0xFF	; 255
    3dd0:	11 f4       	brne	.+4      	; 0x3dd6 <__addsf3+0x1a>
    3dd2:	1e f4       	brtc	.+6      	; 0x3dda <__addsf3+0x1e>
    3dd4:	5b c1       	rjmp	.+694    	; 0x408c <__fp_nan>
    3dd6:	0e f4       	brtc	.+2      	; 0x3dda <__addsf3+0x1e>
    3dd8:	e0 95       	com	r30
    3dda:	e7 fb       	bst	r30, 7
    3ddc:	51 c1       	rjmp	.+674    	; 0x4080 <__fp_inf>

00003dde <__addsf3x>:
    3dde:	e9 2f       	mov	r30, r25
    3de0:	77 d1       	rcall	.+750    	; 0x40d0 <__fp_split3>
    3de2:	80 f3       	brcs	.-32     	; 0x3dc4 <__addsf3+0x8>
    3de4:	ba 17       	cp	r27, r26
    3de6:	62 07       	cpc	r22, r18
    3de8:	73 07       	cpc	r23, r19
    3dea:	84 07       	cpc	r24, r20
    3dec:	95 07       	cpc	r25, r21
    3dee:	18 f0       	brcs	.+6      	; 0x3df6 <__addsf3x+0x18>
    3df0:	71 f4       	brne	.+28     	; 0x3e0e <__addsf3x+0x30>
    3df2:	9e f5       	brtc	.+102    	; 0x3e5a <__addsf3x+0x7c>
    3df4:	8f c1       	rjmp	.+798    	; 0x4114 <__fp_zero>
    3df6:	0e f4       	brtc	.+2      	; 0x3dfa <__addsf3x+0x1c>
    3df8:	e0 95       	com	r30
    3dfa:	0b 2e       	mov	r0, r27
    3dfc:	ba 2f       	mov	r27, r26
    3dfe:	a0 2d       	mov	r26, r0
    3e00:	0b 01       	movw	r0, r22
    3e02:	b9 01       	movw	r22, r18
    3e04:	90 01       	movw	r18, r0
    3e06:	0c 01       	movw	r0, r24
    3e08:	ca 01       	movw	r24, r20
    3e0a:	a0 01       	movw	r20, r0
    3e0c:	11 24       	eor	r1, r1
    3e0e:	ff 27       	eor	r31, r31
    3e10:	59 1b       	sub	r21, r25
    3e12:	99 f0       	breq	.+38     	; 0x3e3a <__addsf3x+0x5c>
    3e14:	59 3f       	cpi	r21, 0xF9	; 249
    3e16:	50 f4       	brcc	.+20     	; 0x3e2c <__addsf3x+0x4e>
    3e18:	50 3e       	cpi	r21, 0xE0	; 224
    3e1a:	68 f1       	brcs	.+90     	; 0x3e76 <__addsf3x+0x98>
    3e1c:	1a 16       	cp	r1, r26
    3e1e:	f0 40       	sbci	r31, 0x00	; 0
    3e20:	a2 2f       	mov	r26, r18
    3e22:	23 2f       	mov	r18, r19
    3e24:	34 2f       	mov	r19, r20
    3e26:	44 27       	eor	r20, r20
    3e28:	58 5f       	subi	r21, 0xF8	; 248
    3e2a:	f3 cf       	rjmp	.-26     	; 0x3e12 <__addsf3x+0x34>
    3e2c:	46 95       	lsr	r20
    3e2e:	37 95       	ror	r19
    3e30:	27 95       	ror	r18
    3e32:	a7 95       	ror	r26
    3e34:	f0 40       	sbci	r31, 0x00	; 0
    3e36:	53 95       	inc	r21
    3e38:	c9 f7       	brne	.-14     	; 0x3e2c <__addsf3x+0x4e>
    3e3a:	7e f4       	brtc	.+30     	; 0x3e5a <__addsf3x+0x7c>
    3e3c:	1f 16       	cp	r1, r31
    3e3e:	ba 0b       	sbc	r27, r26
    3e40:	62 0b       	sbc	r22, r18
    3e42:	73 0b       	sbc	r23, r19
    3e44:	84 0b       	sbc	r24, r20
    3e46:	ba f0       	brmi	.+46     	; 0x3e76 <__addsf3x+0x98>
    3e48:	91 50       	subi	r25, 0x01	; 1
    3e4a:	a1 f0       	breq	.+40     	; 0x3e74 <__addsf3x+0x96>
    3e4c:	ff 0f       	add	r31, r31
    3e4e:	bb 1f       	adc	r27, r27
    3e50:	66 1f       	adc	r22, r22
    3e52:	77 1f       	adc	r23, r23
    3e54:	88 1f       	adc	r24, r24
    3e56:	c2 f7       	brpl	.-16     	; 0x3e48 <__addsf3x+0x6a>
    3e58:	0e c0       	rjmp	.+28     	; 0x3e76 <__addsf3x+0x98>
    3e5a:	ba 0f       	add	r27, r26
    3e5c:	62 1f       	adc	r22, r18
    3e5e:	73 1f       	adc	r23, r19
    3e60:	84 1f       	adc	r24, r20
    3e62:	48 f4       	brcc	.+18     	; 0x3e76 <__addsf3x+0x98>
    3e64:	87 95       	ror	r24
    3e66:	77 95       	ror	r23
    3e68:	67 95       	ror	r22
    3e6a:	b7 95       	ror	r27
    3e6c:	f7 95       	ror	r31
    3e6e:	9e 3f       	cpi	r25, 0xFE	; 254
    3e70:	08 f0       	brcs	.+2      	; 0x3e74 <__addsf3x+0x96>
    3e72:	b3 cf       	rjmp	.-154    	; 0x3dda <__addsf3+0x1e>
    3e74:	93 95       	inc	r25
    3e76:	88 0f       	add	r24, r24
    3e78:	08 f0       	brcs	.+2      	; 0x3e7c <__addsf3x+0x9e>
    3e7a:	99 27       	eor	r25, r25
    3e7c:	ee 0f       	add	r30, r30
    3e7e:	97 95       	ror	r25
    3e80:	87 95       	ror	r24
    3e82:	08 95       	ret

00003e84 <__cmpsf2>:
    3e84:	d9 d0       	rcall	.+434    	; 0x4038 <__fp_cmp>
    3e86:	08 f4       	brcc	.+2      	; 0x3e8a <__cmpsf2+0x6>
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	08 95       	ret

00003e8c <__divsf3>:
    3e8c:	0c d0       	rcall	.+24     	; 0x3ea6 <__divsf3x>
    3e8e:	0f c1       	rjmp	.+542    	; 0x40ae <__fp_round>
    3e90:	07 d1       	rcall	.+526    	; 0x40a0 <__fp_pscB>
    3e92:	40 f0       	brcs	.+16     	; 0x3ea4 <__divsf3+0x18>
    3e94:	fe d0       	rcall	.+508    	; 0x4092 <__fp_pscA>
    3e96:	30 f0       	brcs	.+12     	; 0x3ea4 <__divsf3+0x18>
    3e98:	21 f4       	brne	.+8      	; 0x3ea2 <__divsf3+0x16>
    3e9a:	5f 3f       	cpi	r21, 0xFF	; 255
    3e9c:	19 f0       	breq	.+6      	; 0x3ea4 <__divsf3+0x18>
    3e9e:	f0 c0       	rjmp	.+480    	; 0x4080 <__fp_inf>
    3ea0:	51 11       	cpse	r21, r1
    3ea2:	39 c1       	rjmp	.+626    	; 0x4116 <__fp_szero>
    3ea4:	f3 c0       	rjmp	.+486    	; 0x408c <__fp_nan>

00003ea6 <__divsf3x>:
    3ea6:	14 d1       	rcall	.+552    	; 0x40d0 <__fp_split3>
    3ea8:	98 f3       	brcs	.-26     	; 0x3e90 <__divsf3+0x4>

00003eaa <__divsf3_pse>:
    3eaa:	99 23       	and	r25, r25
    3eac:	c9 f3       	breq	.-14     	; 0x3ea0 <__divsf3+0x14>
    3eae:	55 23       	and	r21, r21
    3eb0:	b1 f3       	breq	.-20     	; 0x3e9e <__divsf3+0x12>
    3eb2:	95 1b       	sub	r25, r21
    3eb4:	55 0b       	sbc	r21, r21
    3eb6:	bb 27       	eor	r27, r27
    3eb8:	aa 27       	eor	r26, r26
    3eba:	62 17       	cp	r22, r18
    3ebc:	73 07       	cpc	r23, r19
    3ebe:	84 07       	cpc	r24, r20
    3ec0:	38 f0       	brcs	.+14     	; 0x3ed0 <__divsf3_pse+0x26>
    3ec2:	9f 5f       	subi	r25, 0xFF	; 255
    3ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ec6:	22 0f       	add	r18, r18
    3ec8:	33 1f       	adc	r19, r19
    3eca:	44 1f       	adc	r20, r20
    3ecc:	aa 1f       	adc	r26, r26
    3ece:	a9 f3       	breq	.-22     	; 0x3eba <__divsf3_pse+0x10>
    3ed0:	33 d0       	rcall	.+102    	; 0x3f38 <__divsf3_pse+0x8e>
    3ed2:	0e 2e       	mov	r0, r30
    3ed4:	3a f0       	brmi	.+14     	; 0x3ee4 <__divsf3_pse+0x3a>
    3ed6:	e0 e8       	ldi	r30, 0x80	; 128
    3ed8:	30 d0       	rcall	.+96     	; 0x3f3a <__divsf3_pse+0x90>
    3eda:	91 50       	subi	r25, 0x01	; 1
    3edc:	50 40       	sbci	r21, 0x00	; 0
    3ede:	e6 95       	lsr	r30
    3ee0:	00 1c       	adc	r0, r0
    3ee2:	ca f7       	brpl	.-14     	; 0x3ed6 <__divsf3_pse+0x2c>
    3ee4:	29 d0       	rcall	.+82     	; 0x3f38 <__divsf3_pse+0x8e>
    3ee6:	fe 2f       	mov	r31, r30
    3ee8:	27 d0       	rcall	.+78     	; 0x3f38 <__divsf3_pse+0x8e>
    3eea:	66 0f       	add	r22, r22
    3eec:	77 1f       	adc	r23, r23
    3eee:	88 1f       	adc	r24, r24
    3ef0:	bb 1f       	adc	r27, r27
    3ef2:	26 17       	cp	r18, r22
    3ef4:	37 07       	cpc	r19, r23
    3ef6:	48 07       	cpc	r20, r24
    3ef8:	ab 07       	cpc	r26, r27
    3efa:	b0 e8       	ldi	r27, 0x80	; 128
    3efc:	09 f0       	breq	.+2      	; 0x3f00 <__divsf3_pse+0x56>
    3efe:	bb 0b       	sbc	r27, r27
    3f00:	80 2d       	mov	r24, r0
    3f02:	bf 01       	movw	r22, r30
    3f04:	ff 27       	eor	r31, r31
    3f06:	93 58       	subi	r25, 0x83	; 131
    3f08:	5f 4f       	sbci	r21, 0xFF	; 255
    3f0a:	2a f0       	brmi	.+10     	; 0x3f16 <__divsf3_pse+0x6c>
    3f0c:	9e 3f       	cpi	r25, 0xFE	; 254
    3f0e:	51 05       	cpc	r21, r1
    3f10:	68 f0       	brcs	.+26     	; 0x3f2c <__divsf3_pse+0x82>
    3f12:	b6 c0       	rjmp	.+364    	; 0x4080 <__fp_inf>
    3f14:	00 c1       	rjmp	.+512    	; 0x4116 <__fp_szero>
    3f16:	5f 3f       	cpi	r21, 0xFF	; 255
    3f18:	ec f3       	brlt	.-6      	; 0x3f14 <__divsf3_pse+0x6a>
    3f1a:	98 3e       	cpi	r25, 0xE8	; 232
    3f1c:	dc f3       	brlt	.-10     	; 0x3f14 <__divsf3_pse+0x6a>
    3f1e:	86 95       	lsr	r24
    3f20:	77 95       	ror	r23
    3f22:	67 95       	ror	r22
    3f24:	b7 95       	ror	r27
    3f26:	f7 95       	ror	r31
    3f28:	9f 5f       	subi	r25, 0xFF	; 255
    3f2a:	c9 f7       	brne	.-14     	; 0x3f1e <__divsf3_pse+0x74>
    3f2c:	88 0f       	add	r24, r24
    3f2e:	91 1d       	adc	r25, r1
    3f30:	96 95       	lsr	r25
    3f32:	87 95       	ror	r24
    3f34:	97 f9       	bld	r25, 7
    3f36:	08 95       	ret
    3f38:	e1 e0       	ldi	r30, 0x01	; 1
    3f3a:	66 0f       	add	r22, r22
    3f3c:	77 1f       	adc	r23, r23
    3f3e:	88 1f       	adc	r24, r24
    3f40:	bb 1f       	adc	r27, r27
    3f42:	62 17       	cp	r22, r18
    3f44:	73 07       	cpc	r23, r19
    3f46:	84 07       	cpc	r24, r20
    3f48:	ba 07       	cpc	r27, r26
    3f4a:	20 f0       	brcs	.+8      	; 0x3f54 <__divsf3_pse+0xaa>
    3f4c:	62 1b       	sub	r22, r18
    3f4e:	73 0b       	sbc	r23, r19
    3f50:	84 0b       	sbc	r24, r20
    3f52:	ba 0b       	sbc	r27, r26
    3f54:	ee 1f       	adc	r30, r30
    3f56:	88 f7       	brcc	.-30     	; 0x3f3a <__divsf3_pse+0x90>
    3f58:	e0 95       	com	r30
    3f5a:	08 95       	ret

00003f5c <__fixsfsi>:
    3f5c:	04 d0       	rcall	.+8      	; 0x3f66 <__fixunssfsi>
    3f5e:	68 94       	set
    3f60:	b1 11       	cpse	r27, r1
    3f62:	d9 c0       	rjmp	.+434    	; 0x4116 <__fp_szero>
    3f64:	08 95       	ret

00003f66 <__fixunssfsi>:
    3f66:	bc d0       	rcall	.+376    	; 0x40e0 <__fp_splitA>
    3f68:	88 f0       	brcs	.+34     	; 0x3f8c <__fixunssfsi+0x26>
    3f6a:	9f 57       	subi	r25, 0x7F	; 127
    3f6c:	90 f0       	brcs	.+36     	; 0x3f92 <__fixunssfsi+0x2c>
    3f6e:	b9 2f       	mov	r27, r25
    3f70:	99 27       	eor	r25, r25
    3f72:	b7 51       	subi	r27, 0x17	; 23
    3f74:	a0 f0       	brcs	.+40     	; 0x3f9e <__fixunssfsi+0x38>
    3f76:	d1 f0       	breq	.+52     	; 0x3fac <__fixunssfsi+0x46>
    3f78:	66 0f       	add	r22, r22
    3f7a:	77 1f       	adc	r23, r23
    3f7c:	88 1f       	adc	r24, r24
    3f7e:	99 1f       	adc	r25, r25
    3f80:	1a f0       	brmi	.+6      	; 0x3f88 <__fixunssfsi+0x22>
    3f82:	ba 95       	dec	r27
    3f84:	c9 f7       	brne	.-14     	; 0x3f78 <__fixunssfsi+0x12>
    3f86:	12 c0       	rjmp	.+36     	; 0x3fac <__fixunssfsi+0x46>
    3f88:	b1 30       	cpi	r27, 0x01	; 1
    3f8a:	81 f0       	breq	.+32     	; 0x3fac <__fixunssfsi+0x46>
    3f8c:	c3 d0       	rcall	.+390    	; 0x4114 <__fp_zero>
    3f8e:	b1 e0       	ldi	r27, 0x01	; 1
    3f90:	08 95       	ret
    3f92:	c0 c0       	rjmp	.+384    	; 0x4114 <__fp_zero>
    3f94:	67 2f       	mov	r22, r23
    3f96:	78 2f       	mov	r23, r24
    3f98:	88 27       	eor	r24, r24
    3f9a:	b8 5f       	subi	r27, 0xF8	; 248
    3f9c:	39 f0       	breq	.+14     	; 0x3fac <__fixunssfsi+0x46>
    3f9e:	b9 3f       	cpi	r27, 0xF9	; 249
    3fa0:	cc f3       	brlt	.-14     	; 0x3f94 <__fixunssfsi+0x2e>
    3fa2:	86 95       	lsr	r24
    3fa4:	77 95       	ror	r23
    3fa6:	67 95       	ror	r22
    3fa8:	b3 95       	inc	r27
    3faa:	d9 f7       	brne	.-10     	; 0x3fa2 <__fixunssfsi+0x3c>
    3fac:	3e f4       	brtc	.+14     	; 0x3fbc <__fixunssfsi+0x56>
    3fae:	90 95       	com	r25
    3fb0:	80 95       	com	r24
    3fb2:	70 95       	com	r23
    3fb4:	61 95       	neg	r22
    3fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb8:	8f 4f       	sbci	r24, 0xFF	; 255
    3fba:	9f 4f       	sbci	r25, 0xFF	; 255
    3fbc:	08 95       	ret

00003fbe <__floatunsisf>:
    3fbe:	e8 94       	clt
    3fc0:	09 c0       	rjmp	.+18     	; 0x3fd4 <__floatsisf+0x12>

00003fc2 <__floatsisf>:
    3fc2:	97 fb       	bst	r25, 7
    3fc4:	3e f4       	brtc	.+14     	; 0x3fd4 <__floatsisf+0x12>
    3fc6:	90 95       	com	r25
    3fc8:	80 95       	com	r24
    3fca:	70 95       	com	r23
    3fcc:	61 95       	neg	r22
    3fce:	7f 4f       	sbci	r23, 0xFF	; 255
    3fd0:	8f 4f       	sbci	r24, 0xFF	; 255
    3fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd4:	99 23       	and	r25, r25
    3fd6:	a9 f0       	breq	.+42     	; 0x4002 <__floatsisf+0x40>
    3fd8:	f9 2f       	mov	r31, r25
    3fda:	96 e9       	ldi	r25, 0x96	; 150
    3fdc:	bb 27       	eor	r27, r27
    3fde:	93 95       	inc	r25
    3fe0:	f6 95       	lsr	r31
    3fe2:	87 95       	ror	r24
    3fe4:	77 95       	ror	r23
    3fe6:	67 95       	ror	r22
    3fe8:	b7 95       	ror	r27
    3fea:	f1 11       	cpse	r31, r1
    3fec:	f8 cf       	rjmp	.-16     	; 0x3fde <__floatsisf+0x1c>
    3fee:	fa f4       	brpl	.+62     	; 0x402e <__floatsisf+0x6c>
    3ff0:	bb 0f       	add	r27, r27
    3ff2:	11 f4       	brne	.+4      	; 0x3ff8 <__floatsisf+0x36>
    3ff4:	60 ff       	sbrs	r22, 0
    3ff6:	1b c0       	rjmp	.+54     	; 0x402e <__floatsisf+0x6c>
    3ff8:	6f 5f       	subi	r22, 0xFF	; 255
    3ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    3ffc:	8f 4f       	sbci	r24, 0xFF	; 255
    3ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    4000:	16 c0       	rjmp	.+44     	; 0x402e <__floatsisf+0x6c>
    4002:	88 23       	and	r24, r24
    4004:	11 f0       	breq	.+4      	; 0x400a <__floatsisf+0x48>
    4006:	96 e9       	ldi	r25, 0x96	; 150
    4008:	11 c0       	rjmp	.+34     	; 0x402c <__floatsisf+0x6a>
    400a:	77 23       	and	r23, r23
    400c:	21 f0       	breq	.+8      	; 0x4016 <__floatsisf+0x54>
    400e:	9e e8       	ldi	r25, 0x8E	; 142
    4010:	87 2f       	mov	r24, r23
    4012:	76 2f       	mov	r23, r22
    4014:	05 c0       	rjmp	.+10     	; 0x4020 <__floatsisf+0x5e>
    4016:	66 23       	and	r22, r22
    4018:	71 f0       	breq	.+28     	; 0x4036 <__floatsisf+0x74>
    401a:	96 e8       	ldi	r25, 0x86	; 134
    401c:	86 2f       	mov	r24, r22
    401e:	70 e0       	ldi	r23, 0x00	; 0
    4020:	60 e0       	ldi	r22, 0x00	; 0
    4022:	2a f0       	brmi	.+10     	; 0x402e <__floatsisf+0x6c>
    4024:	9a 95       	dec	r25
    4026:	66 0f       	add	r22, r22
    4028:	77 1f       	adc	r23, r23
    402a:	88 1f       	adc	r24, r24
    402c:	da f7       	brpl	.-10     	; 0x4024 <__floatsisf+0x62>
    402e:	88 0f       	add	r24, r24
    4030:	96 95       	lsr	r25
    4032:	87 95       	ror	r24
    4034:	97 f9       	bld	r25, 7
    4036:	08 95       	ret

00004038 <__fp_cmp>:
    4038:	99 0f       	add	r25, r25
    403a:	00 08       	sbc	r0, r0
    403c:	55 0f       	add	r21, r21
    403e:	aa 0b       	sbc	r26, r26
    4040:	e0 e8       	ldi	r30, 0x80	; 128
    4042:	fe ef       	ldi	r31, 0xFE	; 254
    4044:	16 16       	cp	r1, r22
    4046:	17 06       	cpc	r1, r23
    4048:	e8 07       	cpc	r30, r24
    404a:	f9 07       	cpc	r31, r25
    404c:	c0 f0       	brcs	.+48     	; 0x407e <__fp_cmp+0x46>
    404e:	12 16       	cp	r1, r18
    4050:	13 06       	cpc	r1, r19
    4052:	e4 07       	cpc	r30, r20
    4054:	f5 07       	cpc	r31, r21
    4056:	98 f0       	brcs	.+38     	; 0x407e <__fp_cmp+0x46>
    4058:	62 1b       	sub	r22, r18
    405a:	73 0b       	sbc	r23, r19
    405c:	84 0b       	sbc	r24, r20
    405e:	95 0b       	sbc	r25, r21
    4060:	39 f4       	brne	.+14     	; 0x4070 <__fp_cmp+0x38>
    4062:	0a 26       	eor	r0, r26
    4064:	61 f0       	breq	.+24     	; 0x407e <__fp_cmp+0x46>
    4066:	23 2b       	or	r18, r19
    4068:	24 2b       	or	r18, r20
    406a:	25 2b       	or	r18, r21
    406c:	21 f4       	brne	.+8      	; 0x4076 <__fp_cmp+0x3e>
    406e:	08 95       	ret
    4070:	0a 26       	eor	r0, r26
    4072:	09 f4       	brne	.+2      	; 0x4076 <__fp_cmp+0x3e>
    4074:	a1 40       	sbci	r26, 0x01	; 1
    4076:	a6 95       	lsr	r26
    4078:	8f ef       	ldi	r24, 0xFF	; 255
    407a:	81 1d       	adc	r24, r1
    407c:	81 1d       	adc	r24, r1
    407e:	08 95       	ret

00004080 <__fp_inf>:
    4080:	97 f9       	bld	r25, 7
    4082:	9f 67       	ori	r25, 0x7F	; 127
    4084:	80 e8       	ldi	r24, 0x80	; 128
    4086:	70 e0       	ldi	r23, 0x00	; 0
    4088:	60 e0       	ldi	r22, 0x00	; 0
    408a:	08 95       	ret

0000408c <__fp_nan>:
    408c:	9f ef       	ldi	r25, 0xFF	; 255
    408e:	80 ec       	ldi	r24, 0xC0	; 192
    4090:	08 95       	ret

00004092 <__fp_pscA>:
    4092:	00 24       	eor	r0, r0
    4094:	0a 94       	dec	r0
    4096:	16 16       	cp	r1, r22
    4098:	17 06       	cpc	r1, r23
    409a:	18 06       	cpc	r1, r24
    409c:	09 06       	cpc	r0, r25
    409e:	08 95       	ret

000040a0 <__fp_pscB>:
    40a0:	00 24       	eor	r0, r0
    40a2:	0a 94       	dec	r0
    40a4:	12 16       	cp	r1, r18
    40a6:	13 06       	cpc	r1, r19
    40a8:	14 06       	cpc	r1, r20
    40aa:	05 06       	cpc	r0, r21
    40ac:	08 95       	ret

000040ae <__fp_round>:
    40ae:	09 2e       	mov	r0, r25
    40b0:	03 94       	inc	r0
    40b2:	00 0c       	add	r0, r0
    40b4:	11 f4       	brne	.+4      	; 0x40ba <__fp_round+0xc>
    40b6:	88 23       	and	r24, r24
    40b8:	52 f0       	brmi	.+20     	; 0x40ce <__fp_round+0x20>
    40ba:	bb 0f       	add	r27, r27
    40bc:	40 f4       	brcc	.+16     	; 0x40ce <__fp_round+0x20>
    40be:	bf 2b       	or	r27, r31
    40c0:	11 f4       	brne	.+4      	; 0x40c6 <__fp_round+0x18>
    40c2:	60 ff       	sbrs	r22, 0
    40c4:	04 c0       	rjmp	.+8      	; 0x40ce <__fp_round+0x20>
    40c6:	6f 5f       	subi	r22, 0xFF	; 255
    40c8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ca:	8f 4f       	sbci	r24, 0xFF	; 255
    40cc:	9f 4f       	sbci	r25, 0xFF	; 255
    40ce:	08 95       	ret

000040d0 <__fp_split3>:
    40d0:	57 fd       	sbrc	r21, 7
    40d2:	90 58       	subi	r25, 0x80	; 128
    40d4:	44 0f       	add	r20, r20
    40d6:	55 1f       	adc	r21, r21
    40d8:	59 f0       	breq	.+22     	; 0x40f0 <__fp_splitA+0x10>
    40da:	5f 3f       	cpi	r21, 0xFF	; 255
    40dc:	71 f0       	breq	.+28     	; 0x40fa <__fp_splitA+0x1a>
    40de:	47 95       	ror	r20

000040e0 <__fp_splitA>:
    40e0:	88 0f       	add	r24, r24
    40e2:	97 fb       	bst	r25, 7
    40e4:	99 1f       	adc	r25, r25
    40e6:	61 f0       	breq	.+24     	; 0x4100 <__fp_splitA+0x20>
    40e8:	9f 3f       	cpi	r25, 0xFF	; 255
    40ea:	79 f0       	breq	.+30     	; 0x410a <__fp_splitA+0x2a>
    40ec:	87 95       	ror	r24
    40ee:	08 95       	ret
    40f0:	12 16       	cp	r1, r18
    40f2:	13 06       	cpc	r1, r19
    40f4:	14 06       	cpc	r1, r20
    40f6:	55 1f       	adc	r21, r21
    40f8:	f2 cf       	rjmp	.-28     	; 0x40de <__fp_split3+0xe>
    40fa:	46 95       	lsr	r20
    40fc:	f1 df       	rcall	.-30     	; 0x40e0 <__fp_splitA>
    40fe:	08 c0       	rjmp	.+16     	; 0x4110 <__fp_splitA+0x30>
    4100:	16 16       	cp	r1, r22
    4102:	17 06       	cpc	r1, r23
    4104:	18 06       	cpc	r1, r24
    4106:	99 1f       	adc	r25, r25
    4108:	f1 cf       	rjmp	.-30     	; 0x40ec <__fp_splitA+0xc>
    410a:	86 95       	lsr	r24
    410c:	71 05       	cpc	r23, r1
    410e:	61 05       	cpc	r22, r1
    4110:	08 94       	sec
    4112:	08 95       	ret

00004114 <__fp_zero>:
    4114:	e8 94       	clt

00004116 <__fp_szero>:
    4116:	bb 27       	eor	r27, r27
    4118:	66 27       	eor	r22, r22
    411a:	77 27       	eor	r23, r23
    411c:	cb 01       	movw	r24, r22
    411e:	97 f9       	bld	r25, 7
    4120:	08 95       	ret

00004122 <__mulsf3>:
    4122:	0b d0       	rcall	.+22     	; 0x413a <__mulsf3x>
    4124:	c4 cf       	rjmp	.-120    	; 0x40ae <__fp_round>
    4126:	b5 df       	rcall	.-150    	; 0x4092 <__fp_pscA>
    4128:	28 f0       	brcs	.+10     	; 0x4134 <__mulsf3+0x12>
    412a:	ba df       	rcall	.-140    	; 0x40a0 <__fp_pscB>
    412c:	18 f0       	brcs	.+6      	; 0x4134 <__mulsf3+0x12>
    412e:	95 23       	and	r25, r21
    4130:	09 f0       	breq	.+2      	; 0x4134 <__mulsf3+0x12>
    4132:	a6 cf       	rjmp	.-180    	; 0x4080 <__fp_inf>
    4134:	ab cf       	rjmp	.-170    	; 0x408c <__fp_nan>
    4136:	11 24       	eor	r1, r1
    4138:	ee cf       	rjmp	.-36     	; 0x4116 <__fp_szero>

0000413a <__mulsf3x>:
    413a:	ca df       	rcall	.-108    	; 0x40d0 <__fp_split3>
    413c:	a0 f3       	brcs	.-24     	; 0x4126 <__mulsf3+0x4>

0000413e <__mulsf3_pse>:
    413e:	95 9f       	mul	r25, r21
    4140:	d1 f3       	breq	.-12     	; 0x4136 <__mulsf3+0x14>
    4142:	95 0f       	add	r25, r21
    4144:	50 e0       	ldi	r21, 0x00	; 0
    4146:	55 1f       	adc	r21, r21
    4148:	62 9f       	mul	r22, r18
    414a:	f0 01       	movw	r30, r0
    414c:	72 9f       	mul	r23, r18
    414e:	bb 27       	eor	r27, r27
    4150:	f0 0d       	add	r31, r0
    4152:	b1 1d       	adc	r27, r1
    4154:	63 9f       	mul	r22, r19
    4156:	aa 27       	eor	r26, r26
    4158:	f0 0d       	add	r31, r0
    415a:	b1 1d       	adc	r27, r1
    415c:	aa 1f       	adc	r26, r26
    415e:	64 9f       	mul	r22, r20
    4160:	66 27       	eor	r22, r22
    4162:	b0 0d       	add	r27, r0
    4164:	a1 1d       	adc	r26, r1
    4166:	66 1f       	adc	r22, r22
    4168:	82 9f       	mul	r24, r18
    416a:	22 27       	eor	r18, r18
    416c:	b0 0d       	add	r27, r0
    416e:	a1 1d       	adc	r26, r1
    4170:	62 1f       	adc	r22, r18
    4172:	73 9f       	mul	r23, r19
    4174:	b0 0d       	add	r27, r0
    4176:	a1 1d       	adc	r26, r1
    4178:	62 1f       	adc	r22, r18
    417a:	83 9f       	mul	r24, r19
    417c:	a0 0d       	add	r26, r0
    417e:	61 1d       	adc	r22, r1
    4180:	22 1f       	adc	r18, r18
    4182:	74 9f       	mul	r23, r20
    4184:	33 27       	eor	r19, r19
    4186:	a0 0d       	add	r26, r0
    4188:	61 1d       	adc	r22, r1
    418a:	23 1f       	adc	r18, r19
    418c:	84 9f       	mul	r24, r20
    418e:	60 0d       	add	r22, r0
    4190:	21 1d       	adc	r18, r1
    4192:	82 2f       	mov	r24, r18
    4194:	76 2f       	mov	r23, r22
    4196:	6a 2f       	mov	r22, r26
    4198:	11 24       	eor	r1, r1
    419a:	9f 57       	subi	r25, 0x7F	; 127
    419c:	50 40       	sbci	r21, 0x00	; 0
    419e:	8a f0       	brmi	.+34     	; 0x41c2 <__mulsf3_pse+0x84>
    41a0:	e1 f0       	breq	.+56     	; 0x41da <__mulsf3_pse+0x9c>
    41a2:	88 23       	and	r24, r24
    41a4:	4a f0       	brmi	.+18     	; 0x41b8 <__mulsf3_pse+0x7a>
    41a6:	ee 0f       	add	r30, r30
    41a8:	ff 1f       	adc	r31, r31
    41aa:	bb 1f       	adc	r27, r27
    41ac:	66 1f       	adc	r22, r22
    41ae:	77 1f       	adc	r23, r23
    41b0:	88 1f       	adc	r24, r24
    41b2:	91 50       	subi	r25, 0x01	; 1
    41b4:	50 40       	sbci	r21, 0x00	; 0
    41b6:	a9 f7       	brne	.-22     	; 0x41a2 <__mulsf3_pse+0x64>
    41b8:	9e 3f       	cpi	r25, 0xFE	; 254
    41ba:	51 05       	cpc	r21, r1
    41bc:	70 f0       	brcs	.+28     	; 0x41da <__mulsf3_pse+0x9c>
    41be:	60 cf       	rjmp	.-320    	; 0x4080 <__fp_inf>
    41c0:	aa cf       	rjmp	.-172    	; 0x4116 <__fp_szero>
    41c2:	5f 3f       	cpi	r21, 0xFF	; 255
    41c4:	ec f3       	brlt	.-6      	; 0x41c0 <__mulsf3_pse+0x82>
    41c6:	98 3e       	cpi	r25, 0xE8	; 232
    41c8:	dc f3       	brlt	.-10     	; 0x41c0 <__mulsf3_pse+0x82>
    41ca:	86 95       	lsr	r24
    41cc:	77 95       	ror	r23
    41ce:	67 95       	ror	r22
    41d0:	b7 95       	ror	r27
    41d2:	f7 95       	ror	r31
    41d4:	e7 95       	ror	r30
    41d6:	9f 5f       	subi	r25, 0xFF	; 255
    41d8:	c1 f7       	brne	.-16     	; 0x41ca <__mulsf3_pse+0x8c>
    41da:	fe 2b       	or	r31, r30
    41dc:	88 0f       	add	r24, r24
    41de:	91 1d       	adc	r25, r1
    41e0:	96 95       	lsr	r25
    41e2:	87 95       	ror	r24
    41e4:	97 f9       	bld	r25, 7
    41e6:	08 95       	ret

000041e8 <attachInterrupt>:
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
    41e8:	82 30       	cpi	r24, 0x02	; 2
    41ea:	00 f5       	brcc	.+64     	; 0x422c <attachInterrupt+0x44>
    41ec:	e8 2f       	mov	r30, r24
    41ee:	f0 e0       	ldi	r31, 0x00	; 0
    41f0:	ee 0f       	add	r30, r30
    41f2:	ff 1f       	adc	r31, r31
    41f4:	ea 57       	subi	r30, 0x7A	; 122
    41f6:	fa 4f       	sbci	r31, 0xFA	; 250
    41f8:	71 83       	std	Z+1, r23	; 0x01
    41fa:	60 83       	st	Z, r22
    41fc:	88 23       	and	r24, r24
    41fe:	19 f0       	breq	.+6      	; 0x4206 <attachInterrupt+0x1e>
    4200:	81 30       	cpi	r24, 0x01	; 1
    4202:	a1 f4       	brne	.+40     	; 0x422c <attachInterrupt+0x44>
    4204:	08 c0       	rjmp	.+16     	; 0x4216 <attachInterrupt+0x2e>
    4206:	80 91 69 00 	lds	r24, 0x0069
    420a:	8c 7f       	andi	r24, 0xFC	; 252
    420c:	84 2b       	or	r24, r20
    420e:	80 93 69 00 	sts	0x0069, r24
    4212:	e8 9a       	sbi	0x1d, 0	; 29
    4214:	08 95       	ret
    4216:	80 91 69 00 	lds	r24, 0x0069
    421a:	44 0f       	add	r20, r20
    421c:	55 1f       	adc	r21, r21
    421e:	44 0f       	add	r20, r20
    4220:	55 1f       	adc	r21, r21
    4222:	83 7f       	andi	r24, 0xF3	; 243
    4224:	84 2b       	or	r24, r20
    4226:	80 93 69 00 	sts	0x0069, r24
    422a:	e9 9a       	sbi	0x1d, 1	; 29
    422c:	08 95       	ret

0000422e <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
    422e:	1f 92       	push	r1
    4230:	0f 92       	push	r0
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	0f 92       	push	r0
    4236:	11 24       	eor	r1, r1
    4238:	2f 93       	push	r18
    423a:	3f 93       	push	r19
    423c:	4f 93       	push	r20
    423e:	5f 93       	push	r21
    4240:	6f 93       	push	r22
    4242:	7f 93       	push	r23
    4244:	8f 93       	push	r24
    4246:	9f 93       	push	r25
    4248:	af 93       	push	r26
    424a:	bf 93       	push	r27
    424c:	ef 93       	push	r30
    424e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    4250:	80 91 86 05 	lds	r24, 0x0586
    4254:	90 91 87 05 	lds	r25, 0x0587
    4258:	89 2b       	or	r24, r25
    425a:	29 f0       	breq	.+10     	; 0x4266 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
    425c:	e0 91 86 05 	lds	r30, 0x0586
    4260:	f0 91 87 05 	lds	r31, 0x0587
    4264:	09 95       	icall
}
    4266:	ff 91       	pop	r31
    4268:	ef 91       	pop	r30
    426a:	bf 91       	pop	r27
    426c:	af 91       	pop	r26
    426e:	9f 91       	pop	r25
    4270:	8f 91       	pop	r24
    4272:	7f 91       	pop	r23
    4274:	6f 91       	pop	r22
    4276:	5f 91       	pop	r21
    4278:	4f 91       	pop	r20
    427a:	3f 91       	pop	r19
    427c:	2f 91       	pop	r18
    427e:	0f 90       	pop	r0
    4280:	0f be       	out	0x3f, r0	; 63
    4282:	0f 90       	pop	r0
    4284:	1f 90       	pop	r1
    4286:	18 95       	reti

00004288 <__vector_2>:

SIGNAL(INT1_vect) {
    4288:	1f 92       	push	r1
    428a:	0f 92       	push	r0
    428c:	0f b6       	in	r0, 0x3f	; 63
    428e:	0f 92       	push	r0
    4290:	11 24       	eor	r1, r1
    4292:	2f 93       	push	r18
    4294:	3f 93       	push	r19
    4296:	4f 93       	push	r20
    4298:	5f 93       	push	r21
    429a:	6f 93       	push	r22
    429c:	7f 93       	push	r23
    429e:	8f 93       	push	r24
    42a0:	9f 93       	push	r25
    42a2:	af 93       	push	r26
    42a4:	bf 93       	push	r27
    42a6:	ef 93       	push	r30
    42a8:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    42aa:	80 91 88 05 	lds	r24, 0x0588
    42ae:	90 91 89 05 	lds	r25, 0x0589
    42b2:	89 2b       	or	r24, r25
    42b4:	29 f0       	breq	.+10     	; 0x42c0 <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
    42b6:	e0 91 88 05 	lds	r30, 0x0588
    42ba:	f0 91 89 05 	lds	r31, 0x0589
    42be:	09 95       	icall
}
    42c0:	ff 91       	pop	r31
    42c2:	ef 91       	pop	r30
    42c4:	bf 91       	pop	r27
    42c6:	af 91       	pop	r26
    42c8:	9f 91       	pop	r25
    42ca:	8f 91       	pop	r24
    42cc:	7f 91       	pop	r23
    42ce:	6f 91       	pop	r22
    42d0:	5f 91       	pop	r21
    42d2:	4f 91       	pop	r20
    42d4:	3f 91       	pop	r19
    42d6:	2f 91       	pop	r18
    42d8:	0f 90       	pop	r0
    42da:	0f be       	out	0x3f, r0	; 63
    42dc:	0f 90       	pop	r0
    42de:	1f 90       	pop	r1
    42e0:	18 95       	reti

000042e2 <__vector_16>:
#endif

	SREG = oldSREG;
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
    42e2:	1f 92       	push	r1
    42e4:	0f 92       	push	r0
    42e6:	0f b6       	in	r0, 0x3f	; 63
    42e8:	0f 92       	push	r0
    42ea:	11 24       	eor	r1, r1
    42ec:	2f 93       	push	r18
    42ee:	3f 93       	push	r19
    42f0:	8f 93       	push	r24
    42f2:	9f 93       	push	r25
    42f4:	af 93       	push	r26
    42f6:	bf 93       	push	r27
    42f8:	80 91 8e 05 	lds	r24, 0x058E
    42fc:	90 91 8f 05 	lds	r25, 0x058F
    4300:	a0 91 90 05 	lds	r26, 0x0590
    4304:	b0 91 91 05 	lds	r27, 0x0591
    4308:	30 91 92 05 	lds	r19, 0x0592
    430c:	01 96       	adiw	r24, 0x01	; 1
    430e:	a1 1d       	adc	r26, r1
    4310:	b1 1d       	adc	r27, r1
    4312:	23 2f       	mov	r18, r19
    4314:	2d 5f       	subi	r18, 0xFD	; 253
    4316:	2d 37       	cpi	r18, 0x7D	; 125
    4318:	20 f0       	brcs	.+8      	; 0x4322 <__vector_16+0x40>
    431a:	2d 57       	subi	r18, 0x7D	; 125
    431c:	01 96       	adiw	r24, 0x01	; 1
    431e:	a1 1d       	adc	r26, r1
    4320:	b1 1d       	adc	r27, r1
    4322:	20 93 92 05 	sts	0x0592, r18
    4326:	80 93 8e 05 	sts	0x058E, r24
    432a:	90 93 8f 05 	sts	0x058F, r25
    432e:	a0 93 90 05 	sts	0x0590, r26
    4332:	b0 93 91 05 	sts	0x0591, r27
    4336:	80 91 8a 05 	lds	r24, 0x058A
    433a:	90 91 8b 05 	lds	r25, 0x058B
    433e:	a0 91 8c 05 	lds	r26, 0x058C
    4342:	b0 91 8d 05 	lds	r27, 0x058D
    4346:	01 96       	adiw	r24, 0x01	; 1
    4348:	a1 1d       	adc	r26, r1
    434a:	b1 1d       	adc	r27, r1
    434c:	80 93 8a 05 	sts	0x058A, r24
    4350:	90 93 8b 05 	sts	0x058B, r25
    4354:	a0 93 8c 05 	sts	0x058C, r26
    4358:	b0 93 8d 05 	sts	0x058D, r27
    435c:	bf 91       	pop	r27
    435e:	af 91       	pop	r26
    4360:	9f 91       	pop	r25
    4362:	8f 91       	pop	r24
    4364:	3f 91       	pop	r19
    4366:	2f 91       	pop	r18
    4368:	0f 90       	pop	r0
    436a:	0f be       	out	0x3f, r0	; 63
    436c:	0f 90       	pop	r0
    436e:	1f 90       	pop	r1
    4370:	18 95       	reti

00004372 <millis>:
    4372:	8f b7       	in	r24, 0x3f	; 63
    4374:	f8 94       	cli
    4376:	20 91 8e 05 	lds	r18, 0x058E
    437a:	30 91 8f 05 	lds	r19, 0x058F
    437e:	40 91 90 05 	lds	r20, 0x0590
    4382:	50 91 91 05 	lds	r21, 0x0591
    4386:	8f bf       	out	0x3f, r24	; 63
    4388:	b9 01       	movw	r22, r18
    438a:	ca 01       	movw	r24, r20
    438c:	08 95       	ret

0000438e <delay>:

void delay(unsigned long ms)
{
    438e:	9b 01       	movw	r18, r22
    4390:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    4392:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
    4394:	f8 94       	cli
	m = timer0_overflow_count;
    4396:	80 91 8a 05 	lds	r24, 0x058A
    439a:	90 91 8b 05 	lds	r25, 0x058B
    439e:	a0 91 8c 05 	lds	r26, 0x058C
    43a2:	b0 91 8d 05 	lds	r27, 0x058D
#if defined(TCNT0)
	t = TCNT0;
    43a6:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    43a8:	a8 9b       	sbis	0x15, 0	; 21
    43aa:	05 c0       	rjmp	.+10     	; 0x43b6 <delay+0x28>
    43ac:	6f 3f       	cpi	r22, 0xFF	; 255
    43ae:	19 f0       	breq	.+6      	; 0x43b6 <delay+0x28>
		m++;
    43b0:	01 96       	adiw	r24, 0x01	; 1
    43b2:	a1 1d       	adc	r26, r1
    43b4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    43b6:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
    43b8:	ba 2f       	mov	r27, r26
    43ba:	a9 2f       	mov	r26, r25
    43bc:	98 2f       	mov	r25, r24
    43be:	88 27       	eor	r24, r24
    43c0:	86 0f       	add	r24, r22
    43c2:	91 1d       	adc	r25, r1
    43c4:	a1 1d       	adc	r26, r1
    43c6:	b1 1d       	adc	r27, r1
    43c8:	62 e0       	ldi	r22, 0x02	; 2
    43ca:	88 0f       	add	r24, r24
    43cc:	99 1f       	adc	r25, r25
    43ce:	aa 1f       	adc	r26, r26
    43d0:	bb 1f       	adc	r27, r27
    43d2:	6a 95       	dec	r22
    43d4:	d1 f7       	brne	.-12     	; 0x43ca <delay+0x3c>
    43d6:	bc 01       	movw	r22, r24
    43d8:	2d c0       	rjmp	.+90     	; 0x4434 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    43da:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
    43dc:	f8 94       	cli
	m = timer0_overflow_count;
    43de:	80 91 8a 05 	lds	r24, 0x058A
    43e2:	90 91 8b 05 	lds	r25, 0x058B
    43e6:	a0 91 8c 05 	lds	r26, 0x058C
    43ea:	b0 91 8d 05 	lds	r27, 0x058D
#if defined(TCNT0)
	t = TCNT0;
    43ee:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    43f0:	a8 9b       	sbis	0x15, 0	; 21
    43f2:	05 c0       	rjmp	.+10     	; 0x43fe <delay+0x70>
    43f4:	ef 3f       	cpi	r30, 0xFF	; 255
    43f6:	19 f0       	breq	.+6      	; 0x43fe <delay+0x70>
		m++;
    43f8:	01 96       	adiw	r24, 0x01	; 1
    43fa:	a1 1d       	adc	r26, r1
    43fc:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    43fe:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    4400:	ba 2f       	mov	r27, r26
    4402:	a9 2f       	mov	r26, r25
    4404:	98 2f       	mov	r25, r24
    4406:	88 27       	eor	r24, r24
    4408:	8e 0f       	add	r24, r30
    440a:	91 1d       	adc	r25, r1
    440c:	a1 1d       	adc	r26, r1
    440e:	b1 1d       	adc	r27, r1
    4410:	e2 e0       	ldi	r30, 0x02	; 2
    4412:	88 0f       	add	r24, r24
    4414:	99 1f       	adc	r25, r25
    4416:	aa 1f       	adc	r26, r26
    4418:	bb 1f       	adc	r27, r27
    441a:	ea 95       	dec	r30
    441c:	d1 f7       	brne	.-12     	; 0x4412 <delay+0x84>
    441e:	86 1b       	sub	r24, r22
    4420:	97 0b       	sbc	r25, r23
    4422:	88 5e       	subi	r24, 0xE8	; 232
    4424:	93 40       	sbci	r25, 0x03	; 3
    4426:	c8 f2       	brcs	.-78     	; 0x43da <delay+0x4c>
			ms--;
    4428:	21 50       	subi	r18, 0x01	; 1
    442a:	30 40       	sbci	r19, 0x00	; 0
    442c:	40 40       	sbci	r20, 0x00	; 0
    442e:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
    4430:	68 51       	subi	r22, 0x18	; 24
    4432:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    4434:	21 15       	cp	r18, r1
    4436:	31 05       	cpc	r19, r1
    4438:	41 05       	cpc	r20, r1
    443a:	51 05       	cpc	r21, r1
    443c:	71 f6       	brne	.-100    	; 0x43da <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    443e:	08 95       	ret

00004440 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    4440:	01 97       	sbiw	r24, 0x01	; 1
    4442:	39 f0       	breq	.+14     	; 0x4452 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    4444:	88 0f       	add	r24, r24
    4446:	99 1f       	adc	r25, r25
    4448:	88 0f       	add	r24, r24
    444a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    444c:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    444e:	01 97       	sbiw	r24, 0x01	; 1
    4450:	f1 f7       	brne	.-4      	; 0x444e <delayMicroseconds+0xe>
    4452:	08 95       	ret

00004454 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    4454:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    4456:	84 b5       	in	r24, 0x24	; 36
    4458:	82 60       	ori	r24, 0x02	; 2
    445a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    445c:	84 b5       	in	r24, 0x24	; 36
    445e:	81 60       	ori	r24, 0x01	; 1
    4460:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    4462:	85 b5       	in	r24, 0x25	; 37
    4464:	82 60       	ori	r24, 0x02	; 2
    4466:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    4468:	85 b5       	in	r24, 0x25	; 37
    446a:	81 60       	ori	r24, 0x01	; 1
    446c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    446e:	ee e6       	ldi	r30, 0x6E	; 110
    4470:	f0 e0       	ldi	r31, 0x00	; 0
    4472:	80 81       	ld	r24, Z
    4474:	81 60       	ori	r24, 0x01	; 1
    4476:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    4478:	e1 e8       	ldi	r30, 0x81	; 129
    447a:	f0 e0       	ldi	r31, 0x00	; 0
    447c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    447e:	80 81       	ld	r24, Z
    4480:	82 60       	ori	r24, 0x02	; 2
    4482:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    4484:	80 81       	ld	r24, Z
    4486:	81 60       	ori	r24, 0x01	; 1
    4488:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    448a:	e0 e8       	ldi	r30, 0x80	; 128
    448c:	f0 e0       	ldi	r31, 0x00	; 0
    448e:	80 81       	ld	r24, Z
    4490:	81 60       	ori	r24, 0x01	; 1
    4492:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    4494:	e1 eb       	ldi	r30, 0xB1	; 177
    4496:	f0 e0       	ldi	r31, 0x00	; 0
    4498:	80 81       	ld	r24, Z
    449a:	84 60       	ori	r24, 0x04	; 4
    449c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    449e:	e0 eb       	ldi	r30, 0xB0	; 176
    44a0:	f0 e0       	ldi	r31, 0x00	; 0
    44a2:	80 81       	ld	r24, Z
    44a4:	81 60       	ori	r24, 0x01	; 1
    44a6:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    44a8:	ea e7       	ldi	r30, 0x7A	; 122
    44aa:	f0 e0       	ldi	r31, 0x00	; 0
    44ac:	80 81       	ld	r24, Z
    44ae:	84 60       	ori	r24, 0x04	; 4
    44b0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    44b2:	80 81       	ld	r24, Z
    44b4:	82 60       	ori	r24, 0x02	; 2
    44b6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    44b8:	80 81       	ld	r24, Z
    44ba:	81 60       	ori	r24, 0x01	; 1
    44bc:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    44be:	80 81       	ld	r24, Z
    44c0:	80 68       	ori	r24, 0x80	; 128
    44c2:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    44c4:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    44c8:	08 95       	ret

000044ca <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    44ca:	cf 93       	push	r28
    44cc:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    44ce:	48 2f       	mov	r20, r24
    44d0:	50 e0       	ldi	r21, 0x00	; 0
    44d2:	ca 01       	movw	r24, r20
    44d4:	86 5d       	subi	r24, 0xD6	; 214
    44d6:	9e 4f       	sbci	r25, 0xFE	; 254
    44d8:	fc 01       	movw	r30, r24
    44da:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
    44dc:	4a 5e       	subi	r20, 0xEA	; 234
    44de:	5e 4f       	sbci	r21, 0xFE	; 254
    44e0:	fa 01       	movw	r30, r20
    44e2:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    44e4:	88 23       	and	r24, r24
    44e6:	69 f1       	breq	.+90     	; 0x4542 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	88 0f       	add	r24, r24
    44ec:	99 1f       	adc	r25, r25
    44ee:	fc 01       	movw	r30, r24
    44f0:	e8 50       	subi	r30, 0x08	; 8
    44f2:	ff 4f       	sbci	r31, 0xFF	; 255
    44f4:	a5 91       	lpm	r26, Z+
    44f6:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    44f8:	fc 01       	movw	r30, r24
    44fa:	ee 5f       	subi	r30, 0xFE	; 254
    44fc:	fe 4f       	sbci	r31, 0xFE	; 254
    44fe:	c5 91       	lpm	r28, Z+
    4500:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    4502:	66 23       	and	r22, r22
    4504:	51 f4       	brne	.+20     	; 0x451a <pinMode+0x50>
		uint8_t oldSREG = SREG;
    4506:	2f b7       	in	r18, 0x3f	; 63
                cli();
    4508:	f8 94       	cli
		*reg &= ~bit;
    450a:	8c 91       	ld	r24, X
    450c:	93 2f       	mov	r25, r19
    450e:	90 95       	com	r25
    4510:	89 23       	and	r24, r25
    4512:	8c 93       	st	X, r24
		*out &= ~bit;
    4514:	88 81       	ld	r24, Y
    4516:	89 23       	and	r24, r25
    4518:	0b c0       	rjmp	.+22     	; 0x4530 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    451a:	62 30       	cpi	r22, 0x02	; 2
    451c:	61 f4       	brne	.+24     	; 0x4536 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    451e:	2f b7       	in	r18, 0x3f	; 63
                cli();
    4520:	f8 94       	cli
		*reg &= ~bit;
    4522:	8c 91       	ld	r24, X
    4524:	93 2f       	mov	r25, r19
    4526:	90 95       	com	r25
    4528:	89 23       	and	r24, r25
    452a:	8c 93       	st	X, r24
		*out |= bit;
    452c:	88 81       	ld	r24, Y
    452e:	83 2b       	or	r24, r19
    4530:	88 83       	st	Y, r24
		SREG = oldSREG;
    4532:	2f bf       	out	0x3f, r18	; 63
    4534:	06 c0       	rjmp	.+12     	; 0x4542 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    4536:	9f b7       	in	r25, 0x3f	; 63
                cli();
    4538:	f8 94       	cli
		*reg |= bit;
    453a:	8c 91       	ld	r24, X
    453c:	83 2b       	or	r24, r19
    453e:	8c 93       	st	X, r24
		SREG = oldSREG;
    4540:	9f bf       	out	0x3f, r25	; 63
	}
}
    4542:	df 91       	pop	r29
    4544:	cf 91       	pop	r28
    4546:	08 95       	ret

00004548 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
    4548:	48 2f       	mov	r20, r24
    454a:	50 e0       	ldi	r21, 0x00	; 0
    454c:	ca 01       	movw	r24, r20
    454e:	82 5c       	subi	r24, 0xC2	; 194
    4550:	9e 4f       	sbci	r25, 0xFE	; 254
    4552:	fc 01       	movw	r30, r24
    4554:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    4556:	ca 01       	movw	r24, r20
    4558:	86 5d       	subi	r24, 0xD6	; 214
    455a:	9e 4f       	sbci	r25, 0xFE	; 254
    455c:	fc 01       	movw	r30, r24
    455e:	94 91       	lpm	r25, Z
	uint8_t port = digitalPinToPort(pin);
    4560:	4a 5e       	subi	r20, 0xEA	; 234
    4562:	5e 4f       	sbci	r21, 0xFE	; 254
    4564:	fa 01       	movw	r30, r20
    4566:	34 91       	lpm	r19, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    4568:	33 23       	and	r19, r19
    456a:	09 f4       	brne	.+2      	; 0x456e <digitalWrite+0x26>
    456c:	40 c0       	rjmp	.+128    	; 0x45ee <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    456e:	22 23       	and	r18, r18
    4570:	51 f1       	breq	.+84     	; 0x45c6 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    4572:	23 30       	cpi	r18, 0x03	; 3
    4574:	71 f0       	breq	.+28     	; 0x4592 <digitalWrite+0x4a>
    4576:	24 30       	cpi	r18, 0x04	; 4
    4578:	28 f4       	brcc	.+10     	; 0x4584 <digitalWrite+0x3c>
    457a:	21 30       	cpi	r18, 0x01	; 1
    457c:	a1 f0       	breq	.+40     	; 0x45a6 <digitalWrite+0x5e>
    457e:	22 30       	cpi	r18, 0x02	; 2
    4580:	11 f5       	brne	.+68     	; 0x45c6 <digitalWrite+0x7e>
    4582:	14 c0       	rjmp	.+40     	; 0x45ac <digitalWrite+0x64>
    4584:	26 30       	cpi	r18, 0x06	; 6
    4586:	b1 f0       	breq	.+44     	; 0x45b4 <digitalWrite+0x6c>
    4588:	27 30       	cpi	r18, 0x07	; 7
    458a:	c1 f0       	breq	.+48     	; 0x45bc <digitalWrite+0x74>
    458c:	24 30       	cpi	r18, 0x04	; 4
    458e:	d9 f4       	brne	.+54     	; 0x45c6 <digitalWrite+0x7e>
    4590:	04 c0       	rjmp	.+8      	; 0x459a <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    4592:	80 91 80 00 	lds	r24, 0x0080
    4596:	8f 77       	andi	r24, 0x7F	; 127
    4598:	03 c0       	rjmp	.+6      	; 0x45a0 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    459a:	80 91 80 00 	lds	r24, 0x0080
    459e:	8f 7d       	andi	r24, 0xDF	; 223
    45a0:	80 93 80 00 	sts	0x0080, r24
    45a4:	10 c0       	rjmp	.+32     	; 0x45c6 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    45a6:	84 b5       	in	r24, 0x24	; 36
    45a8:	8f 77       	andi	r24, 0x7F	; 127
    45aa:	02 c0       	rjmp	.+4      	; 0x45b0 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    45ac:	84 b5       	in	r24, 0x24	; 36
    45ae:	8f 7d       	andi	r24, 0xDF	; 223
    45b0:	84 bd       	out	0x24, r24	; 36
    45b2:	09 c0       	rjmp	.+18     	; 0x45c6 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    45b4:	80 91 b0 00 	lds	r24, 0x00B0
    45b8:	8f 77       	andi	r24, 0x7F	; 127
    45ba:	03 c0       	rjmp	.+6      	; 0x45c2 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    45bc:	80 91 b0 00 	lds	r24, 0x00B0
    45c0:	8f 7d       	andi	r24, 0xDF	; 223
    45c2:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
    45c6:	e3 2f       	mov	r30, r19
    45c8:	f0 e0       	ldi	r31, 0x00	; 0
    45ca:	ee 0f       	add	r30, r30
    45cc:	ff 1f       	adc	r31, r31
    45ce:	ee 5f       	subi	r30, 0xFE	; 254
    45d0:	fe 4f       	sbci	r31, 0xFE	; 254
    45d2:	a5 91       	lpm	r26, Z+
    45d4:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    45d6:	2f b7       	in	r18, 0x3f	; 63
	cli();
    45d8:	f8 94       	cli

	if (val == LOW) {
    45da:	66 23       	and	r22, r22
    45dc:	21 f4       	brne	.+8      	; 0x45e6 <digitalWrite+0x9e>
		*out &= ~bit;
    45de:	8c 91       	ld	r24, X
    45e0:	90 95       	com	r25
    45e2:	89 23       	and	r24, r25
    45e4:	02 c0       	rjmp	.+4      	; 0x45ea <digitalWrite+0xa2>
	} else {
		*out |= bit;
    45e6:	8c 91       	ld	r24, X
    45e8:	89 2b       	or	r24, r25
    45ea:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    45ec:	2f bf       	out	0x3f, r18	; 63
    45ee:	08 95       	ret

000045f0 <digitalRead>:
}

int digitalRead(uint8_t pin)
{
	uint8_t timer = digitalPinToTimer(pin);
    45f0:	68 2f       	mov	r22, r24
    45f2:	70 e0       	ldi	r23, 0x00	; 0
    45f4:	cb 01       	movw	r24, r22
    45f6:	82 5c       	subi	r24, 0xC2	; 194
    45f8:	9e 4f       	sbci	r25, 0xFE	; 254
    45fa:	fc 01       	movw	r30, r24
    45fc:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
    45fe:	cb 01       	movw	r24, r22
    4600:	86 5d       	subi	r24, 0xD6	; 214
    4602:	9e 4f       	sbci	r25, 0xFE	; 254
    4604:	fc 01       	movw	r30, r24
    4606:	44 91       	lpm	r20, Z
	uint8_t port = digitalPinToPort(pin);
    4608:	6a 5e       	subi	r22, 0xEA	; 234
    460a:	7e 4f       	sbci	r23, 0xFE	; 254
    460c:	fb 01       	movw	r30, r22
    460e:	94 91       	lpm	r25, Z

	if (port == NOT_A_PIN) return LOW;
    4610:	99 23       	and	r25, r25
    4612:	19 f4       	brne	.+6      	; 0x461a <digitalRead+0x2a>
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	3c c0       	rjmp	.+120    	; 0x4692 <digitalRead+0xa2>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    461a:	22 23       	and	r18, r18
    461c:	51 f1       	breq	.+84     	; 0x4672 <digitalRead+0x82>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    461e:	23 30       	cpi	r18, 0x03	; 3
    4620:	71 f0       	breq	.+28     	; 0x463e <digitalRead+0x4e>
    4622:	24 30       	cpi	r18, 0x04	; 4
    4624:	28 f4       	brcc	.+10     	; 0x4630 <digitalRead+0x40>
    4626:	21 30       	cpi	r18, 0x01	; 1
    4628:	a1 f0       	breq	.+40     	; 0x4652 <digitalRead+0x62>
    462a:	22 30       	cpi	r18, 0x02	; 2
    462c:	11 f5       	brne	.+68     	; 0x4672 <digitalRead+0x82>
    462e:	14 c0       	rjmp	.+40     	; 0x4658 <digitalRead+0x68>
    4630:	26 30       	cpi	r18, 0x06	; 6
    4632:	b1 f0       	breq	.+44     	; 0x4660 <digitalRead+0x70>
    4634:	27 30       	cpi	r18, 0x07	; 7
    4636:	c1 f0       	breq	.+48     	; 0x4668 <digitalRead+0x78>
    4638:	24 30       	cpi	r18, 0x04	; 4
    463a:	d9 f4       	brne	.+54     	; 0x4672 <digitalRead+0x82>
    463c:	04 c0       	rjmp	.+8      	; 0x4646 <digitalRead+0x56>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    463e:	80 91 80 00 	lds	r24, 0x0080
    4642:	8f 77       	andi	r24, 0x7F	; 127
    4644:	03 c0       	rjmp	.+6      	; 0x464c <digitalRead+0x5c>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    4646:	80 91 80 00 	lds	r24, 0x0080
    464a:	8f 7d       	andi	r24, 0xDF	; 223
    464c:	80 93 80 00 	sts	0x0080, r24
    4650:	10 c0       	rjmp	.+32     	; 0x4672 <digitalRead+0x82>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    4652:	84 b5       	in	r24, 0x24	; 36
    4654:	8f 77       	andi	r24, 0x7F	; 127
    4656:	02 c0       	rjmp	.+4      	; 0x465c <digitalRead+0x6c>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    4658:	84 b5       	in	r24, 0x24	; 36
    465a:	8f 7d       	andi	r24, 0xDF	; 223
    465c:	84 bd       	out	0x24, r24	; 36
    465e:	09 c0       	rjmp	.+18     	; 0x4672 <digitalRead+0x82>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    4660:	80 91 b0 00 	lds	r24, 0x00B0
    4664:	8f 77       	andi	r24, 0x7F	; 127
    4666:	03 c0       	rjmp	.+6      	; 0x466e <digitalRead+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    4668:	80 91 b0 00 	lds	r24, 0x00B0
    466c:	8f 7d       	andi	r24, 0xDF	; 223
    466e:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
    4672:	89 2f       	mov	r24, r25
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	88 0f       	add	r24, r24
    4678:	99 1f       	adc	r25, r25
    467a:	84 5f       	subi	r24, 0xF4	; 244
    467c:	9e 4f       	sbci	r25, 0xFE	; 254
    467e:	fc 01       	movw	r30, r24
    4680:	a5 91       	lpm	r26, Z+
    4682:	b4 91       	lpm	r27, Z
    4684:	8c 91       	ld	r24, X
    4686:	20 e0       	ldi	r18, 0x00	; 0
    4688:	30 e0       	ldi	r19, 0x00	; 0
    468a:	84 23       	and	r24, r20
    468c:	11 f0       	breq	.+4      	; 0x4692 <digitalRead+0xa2>
    468e:	21 e0       	ldi	r18, 0x01	; 1
    4690:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
    4692:	c9 01       	movw	r24, r18
    4694:	08 95       	ret

00004696 <_Z11serialEventv>:
  return 1;
}

HardwareSerial::operator bool() {
	return true;
}
    4696:	08 95       	ret

00004698 <__vector_18>:
    4698:	1f 92       	push	r1
    469a:	0f 92       	push	r0
    469c:	0f b6       	in	r0, 0x3f	; 63
    469e:	0f 92       	push	r0
    46a0:	11 24       	eor	r1, r1
    46a2:	2f 93       	push	r18
    46a4:	3f 93       	push	r19
    46a6:	4f 93       	push	r20
    46a8:	8f 93       	push	r24
    46aa:	9f 93       	push	r25
    46ac:	ef 93       	push	r30
    46ae:	ff 93       	push	r31
    46b0:	40 91 c6 00 	lds	r20, 0x00C6
    46b4:	20 91 d3 05 	lds	r18, 0x05D3
    46b8:	30 91 d4 05 	lds	r19, 0x05D4
    46bc:	2f 5f       	subi	r18, 0xFF	; 255
    46be:	3f 4f       	sbci	r19, 0xFF	; 255
    46c0:	2f 73       	andi	r18, 0x3F	; 63
    46c2:	30 70       	andi	r19, 0x00	; 0
    46c4:	80 91 d5 05 	lds	r24, 0x05D5
    46c8:	90 91 d6 05 	lds	r25, 0x05D6
    46cc:	28 17       	cp	r18, r24
    46ce:	39 07       	cpc	r19, r25
    46d0:	59 f0       	breq	.+22     	; 0x46e8 <__vector_18+0x50>
    46d2:	e0 91 d3 05 	lds	r30, 0x05D3
    46d6:	f0 91 d4 05 	lds	r31, 0x05D4
    46da:	ed 56       	subi	r30, 0x6D	; 109
    46dc:	fa 4f       	sbci	r31, 0xFA	; 250
    46de:	40 83       	st	Z, r20
    46e0:	30 93 d4 05 	sts	0x05D4, r19
    46e4:	20 93 d3 05 	sts	0x05D3, r18
    46e8:	ff 91       	pop	r31
    46ea:	ef 91       	pop	r30
    46ec:	9f 91       	pop	r25
    46ee:	8f 91       	pop	r24
    46f0:	4f 91       	pop	r20
    46f2:	3f 91       	pop	r19
    46f4:	2f 91       	pop	r18
    46f6:	0f 90       	pop	r0
    46f8:	0f be       	out	0x3f, r0	; 63
    46fa:	0f 90       	pop	r0
    46fc:	1f 90       	pop	r1
    46fe:	18 95       	reti

00004700 <_Z14serialEventRunv>:
    4700:	e0 91 27 06 	lds	r30, 0x0627
    4704:	f0 91 28 06 	lds	r31, 0x0628
    4708:	e0 5c       	subi	r30, 0xC0	; 192
    470a:	ff 4f       	sbci	r31, 0xFF	; 255
    470c:	81 91       	ld	r24, Z+
    470e:	91 91       	ld	r25, Z+
    4710:	20 81       	ld	r18, Z
    4712:	31 81       	ldd	r19, Z+1	; 0x01
    4714:	82 1b       	sub	r24, r18
    4716:	93 0b       	sbc	r25, r19
    4718:	8f 73       	andi	r24, 0x3F	; 63
    471a:	90 70       	andi	r25, 0x00	; 0
    471c:	89 2b       	or	r24, r25
    471e:	11 f0       	breq	.+4      	; 0x4724 <_Z14serialEventRunv+0x24>
    4720:	0e 94 4b 23 	call	0x4696	; 0x4696 <_Z11serialEventv>
    4724:	08 95       	ret

00004726 <__vector_19>:
    4726:	1f 92       	push	r1
    4728:	0f 92       	push	r0
    472a:	0f b6       	in	r0, 0x3f	; 63
    472c:	0f 92       	push	r0
    472e:	11 24       	eor	r1, r1
    4730:	2f 93       	push	r18
    4732:	3f 93       	push	r19
    4734:	8f 93       	push	r24
    4736:	9f 93       	push	r25
    4738:	ef 93       	push	r30
    473a:	ff 93       	push	r31
    473c:	20 91 17 06 	lds	r18, 0x0617
    4740:	30 91 18 06 	lds	r19, 0x0618
    4744:	80 91 19 06 	lds	r24, 0x0619
    4748:	90 91 1a 06 	lds	r25, 0x061A
    474c:	28 17       	cp	r18, r24
    474e:	39 07       	cpc	r19, r25
    4750:	31 f4       	brne	.+12     	; 0x475e <__vector_19+0x38>
    4752:	80 91 c1 00 	lds	r24, 0x00C1
    4756:	8f 7d       	andi	r24, 0xDF	; 223
    4758:	80 93 c1 00 	sts	0x00C1, r24
    475c:	14 c0       	rjmp	.+40     	; 0x4786 <__vector_19+0x60>
    475e:	e0 91 19 06 	lds	r30, 0x0619
    4762:	f0 91 1a 06 	lds	r31, 0x061A
    4766:	e9 52       	subi	r30, 0x29	; 41
    4768:	fa 4f       	sbci	r31, 0xFA	; 250
    476a:	20 81       	ld	r18, Z
    476c:	80 91 19 06 	lds	r24, 0x0619
    4770:	90 91 1a 06 	lds	r25, 0x061A
    4774:	01 96       	adiw	r24, 0x01	; 1
    4776:	8f 73       	andi	r24, 0x3F	; 63
    4778:	90 70       	andi	r25, 0x00	; 0
    477a:	90 93 1a 06 	sts	0x061A, r25
    477e:	80 93 19 06 	sts	0x0619, r24
    4782:	20 93 c6 00 	sts	0x00C6, r18
    4786:	ff 91       	pop	r31
    4788:	ef 91       	pop	r30
    478a:	9f 91       	pop	r25
    478c:	8f 91       	pop	r24
    478e:	3f 91       	pop	r19
    4790:	2f 91       	pop	r18
    4792:	0f 90       	pop	r0
    4794:	0f be       	out	0x3f, r0	; 63
    4796:	0f 90       	pop	r0
    4798:	1f 90       	pop	r1
    479a:	18 95       	reti

0000479c <_ZN14HardwareSerial5beginEm>:
    479c:	af 92       	push	r10
    479e:	bf 92       	push	r11
    47a0:	df 92       	push	r13
    47a2:	ef 92       	push	r14
    47a4:	ff 92       	push	r15
    47a6:	0f 93       	push	r16
    47a8:	1f 93       	push	r17
    47aa:	cf 93       	push	r28
    47ac:	df 93       	push	r29
    47ae:	ec 01       	movw	r28, r24
    47b0:	7a 01       	movw	r14, r20
    47b2:	8b 01       	movw	r16, r22
    47b4:	dd 24       	eor	r13, r13
    47b6:	40 30       	cpi	r20, 0x00	; 0
    47b8:	81 ee       	ldi	r24, 0xE1	; 225
    47ba:	58 07       	cpc	r21, r24
    47bc:	80 e0       	ldi	r24, 0x00	; 0
    47be:	68 07       	cpc	r22, r24
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	78 07       	cpc	r23, r24
    47c4:	11 f0       	breq	.+4      	; 0x47ca <_ZN14HardwareSerial5beginEm+0x2e>
    47c6:	dd 24       	eor	r13, r13
    47c8:	d3 94       	inc	r13
    47ca:	91 e0       	ldi	r25, 0x01	; 1
    47cc:	a9 2e       	mov	r10, r25
    47ce:	b1 2c       	mov	r11, r1
    47d0:	ec 89       	ldd	r30, Y+20	; 0x14
    47d2:	fd 89       	ldd	r31, Y+21	; 0x15
    47d4:	dd 20       	and	r13, r13
    47d6:	69 f0       	breq	.+26     	; 0x47f2 <_ZN14HardwareSerial5beginEm+0x56>
    47d8:	c5 01       	movw	r24, r10
    47da:	0e 8c       	ldd	r0, Y+30	; 0x1e
    47dc:	02 c0       	rjmp	.+4      	; 0x47e2 <_ZN14HardwareSerial5beginEm+0x46>
    47de:	88 0f       	add	r24, r24
    47e0:	99 1f       	adc	r25, r25
    47e2:	0a 94       	dec	r0
    47e4:	e2 f7       	brpl	.-8      	; 0x47de <_ZN14HardwareSerial5beginEm+0x42>
    47e6:	80 83       	st	Z, r24
    47e8:	60 e0       	ldi	r22, 0x00	; 0
    47ea:	79 e0       	ldi	r23, 0x09	; 9
    47ec:	8d e3       	ldi	r24, 0x3D	; 61
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	05 c0       	rjmp	.+10     	; 0x47fc <_ZN14HardwareSerial5beginEm+0x60>
    47f2:	10 82       	st	Z, r1
    47f4:	60 e8       	ldi	r22, 0x80	; 128
    47f6:	74 e8       	ldi	r23, 0x84	; 132
    47f8:	8e e1       	ldi	r24, 0x1E	; 30
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	a8 01       	movw	r20, r16
    47fe:	97 01       	movw	r18, r14
    4800:	0e 94 23 2c 	call	0x5846	; 0x5846 <__udivmodsi4>
    4804:	21 50       	subi	r18, 0x01	; 1
    4806:	30 40       	sbci	r19, 0x00	; 0
    4808:	40 40       	sbci	r20, 0x00	; 0
    480a:	50 40       	sbci	r21, 0x00	; 0
    480c:	56 95       	lsr	r21
    480e:	47 95       	ror	r20
    4810:	37 95       	ror	r19
    4812:	27 95       	ror	r18
    4814:	80 e1       	ldi	r24, 0x10	; 16
    4816:	20 30       	cpi	r18, 0x00	; 0
    4818:	38 07       	cpc	r19, r24
    481a:	20 f0       	brcs	.+8      	; 0x4824 <_ZN14HardwareSerial5beginEm+0x88>
    481c:	dd 20       	and	r13, r13
    481e:	11 f0       	breq	.+4      	; 0x4824 <_ZN14HardwareSerial5beginEm+0x88>
    4820:	dd 24       	eor	r13, r13
    4822:	d6 cf       	rjmp	.-84     	; 0x47d0 <_ZN14HardwareSerial5beginEm+0x34>
    4824:	e8 89       	ldd	r30, Y+16	; 0x10
    4826:	f9 89       	ldd	r31, Y+17	; 0x11
    4828:	30 83       	st	Z, r19
    482a:	ea 89       	ldd	r30, Y+18	; 0x12
    482c:	fb 89       	ldd	r31, Y+19	; 0x13
    482e:	20 83       	st	Z, r18
    4830:	ee 89       	ldd	r30, Y+22	; 0x16
    4832:	ff 89       	ldd	r31, Y+23	; 0x17
    4834:	40 81       	ld	r20, Z
    4836:	21 e0       	ldi	r18, 0x01	; 1
    4838:	30 e0       	ldi	r19, 0x00	; 0
    483a:	c9 01       	movw	r24, r18
    483c:	0a 8c       	ldd	r0, Y+26	; 0x1a
    483e:	02 c0       	rjmp	.+4      	; 0x4844 <_ZN14HardwareSerial5beginEm+0xa8>
    4840:	88 0f       	add	r24, r24
    4842:	99 1f       	adc	r25, r25
    4844:	0a 94       	dec	r0
    4846:	e2 f7       	brpl	.-8      	; 0x4840 <_ZN14HardwareSerial5beginEm+0xa4>
    4848:	48 2b       	or	r20, r24
    484a:	40 83       	st	Z, r20
    484c:	ee 89       	ldd	r30, Y+22	; 0x16
    484e:	ff 89       	ldd	r31, Y+23	; 0x17
    4850:	40 81       	ld	r20, Z
    4852:	c9 01       	movw	r24, r18
    4854:	0b 8c       	ldd	r0, Y+27	; 0x1b
    4856:	02 c0       	rjmp	.+4      	; 0x485c <_ZN14HardwareSerial5beginEm+0xc0>
    4858:	88 0f       	add	r24, r24
    485a:	99 1f       	adc	r25, r25
    485c:	0a 94       	dec	r0
    485e:	e2 f7       	brpl	.-8      	; 0x4858 <_ZN14HardwareSerial5beginEm+0xbc>
    4860:	48 2b       	or	r20, r24
    4862:	40 83       	st	Z, r20
    4864:	ee 89       	ldd	r30, Y+22	; 0x16
    4866:	ff 89       	ldd	r31, Y+23	; 0x17
    4868:	40 81       	ld	r20, Z
    486a:	c9 01       	movw	r24, r18
    486c:	0c 8c       	ldd	r0, Y+28	; 0x1c
    486e:	02 c0       	rjmp	.+4      	; 0x4874 <_ZN14HardwareSerial5beginEm+0xd8>
    4870:	88 0f       	add	r24, r24
    4872:	99 1f       	adc	r25, r25
    4874:	0a 94       	dec	r0
    4876:	e2 f7       	brpl	.-8      	; 0x4870 <_ZN14HardwareSerial5beginEm+0xd4>
    4878:	48 2b       	or	r20, r24
    487a:	40 83       	st	Z, r20
    487c:	ee 89       	ldd	r30, Y+22	; 0x16
    487e:	ff 89       	ldd	r31, Y+23	; 0x17
    4880:	80 81       	ld	r24, Z
    4882:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4884:	02 c0       	rjmp	.+4      	; 0x488a <_ZN14HardwareSerial5beginEm+0xee>
    4886:	22 0f       	add	r18, r18
    4888:	33 1f       	adc	r19, r19
    488a:	0a 94       	dec	r0
    488c:	e2 f7       	brpl	.-8      	; 0x4886 <_ZN14HardwareSerial5beginEm+0xea>
    488e:	20 95       	com	r18
    4890:	28 23       	and	r18, r24
    4892:	20 83       	st	Z, r18
    4894:	df 91       	pop	r29
    4896:	cf 91       	pop	r28
    4898:	1f 91       	pop	r17
    489a:	0f 91       	pop	r16
    489c:	ff 90       	pop	r15
    489e:	ef 90       	pop	r14
    48a0:	df 90       	pop	r13
    48a2:	bf 90       	pop	r11
    48a4:	af 90       	pop	r10
    48a6:	08 95       	ret

000048a8 <_ZN14HardwareSerial9availableEv>:
    48a8:	dc 01       	movw	r26, r24
    48aa:	1c 96       	adiw	r26, 0x0c	; 12
    48ac:	ed 91       	ld	r30, X+
    48ae:	fc 91       	ld	r31, X
    48b0:	1d 97       	sbiw	r26, 0x0d	; 13
    48b2:	e0 5c       	subi	r30, 0xC0	; 192
    48b4:	ff 4f       	sbci	r31, 0xFF	; 255
    48b6:	21 91       	ld	r18, Z+
    48b8:	31 91       	ld	r19, Z+
    48ba:	80 81       	ld	r24, Z
    48bc:	91 81       	ldd	r25, Z+1	; 0x01
    48be:	28 1b       	sub	r18, r24
    48c0:	39 0b       	sbc	r19, r25
    48c2:	2f 73       	andi	r18, 0x3F	; 63
    48c4:	30 70       	andi	r19, 0x00	; 0
    48c6:	c9 01       	movw	r24, r18
    48c8:	08 95       	ret

000048ca <_ZN14HardwareSerial4peekEv>:
    48ca:	dc 01       	movw	r26, r24
    48cc:	1c 96       	adiw	r26, 0x0c	; 12
    48ce:	ed 91       	ld	r30, X+
    48d0:	fc 91       	ld	r31, X
    48d2:	1d 97       	sbiw	r26, 0x0d	; 13
    48d4:	e0 5c       	subi	r30, 0xC0	; 192
    48d6:	ff 4f       	sbci	r31, 0xFF	; 255
    48d8:	20 81       	ld	r18, Z
    48da:	31 81       	ldd	r19, Z+1	; 0x01
    48dc:	e0 54       	subi	r30, 0x40	; 64
    48de:	f0 40       	sbci	r31, 0x00	; 0
    48e0:	df 01       	movw	r26, r30
    48e2:	ae 5b       	subi	r26, 0xBE	; 190
    48e4:	bf 4f       	sbci	r27, 0xFF	; 255
    48e6:	8d 91       	ld	r24, X+
    48e8:	9c 91       	ld	r25, X
    48ea:	11 97       	sbiw	r26, 0x01	; 1
    48ec:	28 17       	cp	r18, r24
    48ee:	39 07       	cpc	r19, r25
    48f0:	19 f4       	brne	.+6      	; 0x48f8 <_ZN14HardwareSerial4peekEv+0x2e>
    48f2:	2f ef       	ldi	r18, 0xFF	; 255
    48f4:	3f ef       	ldi	r19, 0xFF	; 255
    48f6:	07 c0       	rjmp	.+14     	; 0x4906 <_ZN14HardwareSerial4peekEv+0x3c>
    48f8:	8d 91       	ld	r24, X+
    48fa:	9c 91       	ld	r25, X
    48fc:	e8 0f       	add	r30, r24
    48fe:	f9 1f       	adc	r31, r25
    4900:	80 81       	ld	r24, Z
    4902:	28 2f       	mov	r18, r24
    4904:	30 e0       	ldi	r19, 0x00	; 0
    4906:	c9 01       	movw	r24, r18
    4908:	08 95       	ret

0000490a <_ZN14HardwareSerial4readEv>:
    490a:	dc 01       	movw	r26, r24
    490c:	1c 96       	adiw	r26, 0x0c	; 12
    490e:	ed 91       	ld	r30, X+
    4910:	fc 91       	ld	r31, X
    4912:	1d 97       	sbiw	r26, 0x0d	; 13
    4914:	e0 5c       	subi	r30, 0xC0	; 192
    4916:	ff 4f       	sbci	r31, 0xFF	; 255
    4918:	20 81       	ld	r18, Z
    491a:	31 81       	ldd	r19, Z+1	; 0x01
    491c:	e0 54       	subi	r30, 0x40	; 64
    491e:	f0 40       	sbci	r31, 0x00	; 0
    4920:	df 01       	movw	r26, r30
    4922:	ae 5b       	subi	r26, 0xBE	; 190
    4924:	bf 4f       	sbci	r27, 0xFF	; 255
    4926:	8d 91       	ld	r24, X+
    4928:	9c 91       	ld	r25, X
    492a:	11 97       	sbiw	r26, 0x01	; 1
    492c:	28 17       	cp	r18, r24
    492e:	39 07       	cpc	r19, r25
    4930:	19 f4       	brne	.+6      	; 0x4938 <_ZN14HardwareSerial4readEv+0x2e>
    4932:	2f ef       	ldi	r18, 0xFF	; 255
    4934:	3f ef       	ldi	r19, 0xFF	; 255
    4936:	10 c0       	rjmp	.+32     	; 0x4958 <_ZN14HardwareSerial4readEv+0x4e>
    4938:	8d 91       	ld	r24, X+
    493a:	9c 91       	ld	r25, X
    493c:	11 97       	sbiw	r26, 0x01	; 1
    493e:	e8 0f       	add	r30, r24
    4940:	f9 1f       	adc	r31, r25
    4942:	20 81       	ld	r18, Z
    4944:	8d 91       	ld	r24, X+
    4946:	9c 91       	ld	r25, X
    4948:	11 97       	sbiw	r26, 0x01	; 1
    494a:	01 96       	adiw	r24, 0x01	; 1
    494c:	8f 73       	andi	r24, 0x3F	; 63
    494e:	90 70       	andi	r25, 0x00	; 0
    4950:	11 96       	adiw	r26, 0x01	; 1
    4952:	9c 93       	st	X, r25
    4954:	8e 93       	st	-X, r24
    4956:	30 e0       	ldi	r19, 0x00	; 0
    4958:	c9 01       	movw	r24, r18
    495a:	08 95       	ret

0000495c <_ZN14HardwareSerial5flushEv>:
    495c:	fc 01       	movw	r30, r24
    495e:	86 85       	ldd	r24, Z+14	; 0x0e
    4960:	97 85       	ldd	r25, Z+15	; 0x0f
    4962:	dc 01       	movw	r26, r24
    4964:	a0 5c       	subi	r26, 0xC0	; 192
    4966:	bf 4f       	sbci	r27, 0xFF	; 255
    4968:	fc 01       	movw	r30, r24
    496a:	ee 5b       	subi	r30, 0xBE	; 190
    496c:	ff 4f       	sbci	r31, 0xFF	; 255
    496e:	2d 91       	ld	r18, X+
    4970:	3c 91       	ld	r19, X
    4972:	11 97       	sbiw	r26, 0x01	; 1
    4974:	80 81       	ld	r24, Z
    4976:	91 81       	ldd	r25, Z+1	; 0x01
    4978:	28 17       	cp	r18, r24
    497a:	39 07       	cpc	r19, r25
    497c:	c1 f7       	brne	.-16     	; 0x496e <_ZN14HardwareSerial5flushEv+0x12>
    497e:	08 95       	ret

00004980 <_ZN14HardwareSerial5writeEh>:
    4980:	cf 93       	push	r28
    4982:	df 93       	push	r29
    4984:	ec 01       	movw	r28, r24
    4986:	ee 85       	ldd	r30, Y+14	; 0x0e
    4988:	ff 85       	ldd	r31, Y+15	; 0x0f
    498a:	e0 5c       	subi	r30, 0xC0	; 192
    498c:	ff 4f       	sbci	r31, 0xFF	; 255
    498e:	20 81       	ld	r18, Z
    4990:	31 81       	ldd	r19, Z+1	; 0x01
    4992:	e0 54       	subi	r30, 0x40	; 64
    4994:	f0 40       	sbci	r31, 0x00	; 0
    4996:	2f 5f       	subi	r18, 0xFF	; 255
    4998:	3f 4f       	sbci	r19, 0xFF	; 255
    499a:	2f 73       	andi	r18, 0x3F	; 63
    499c:	30 70       	andi	r19, 0x00	; 0
    499e:	df 01       	movw	r26, r30
    49a0:	ae 5b       	subi	r26, 0xBE	; 190
    49a2:	bf 4f       	sbci	r27, 0xFF	; 255
    49a4:	8d 91       	ld	r24, X+
    49a6:	9c 91       	ld	r25, X
    49a8:	11 97       	sbiw	r26, 0x01	; 1
    49aa:	28 17       	cp	r18, r24
    49ac:	39 07       	cpc	r19, r25
    49ae:	d1 f3       	breq	.-12     	; 0x49a4 <_ZN14HardwareSerial5writeEh+0x24>
    49b0:	e0 5c       	subi	r30, 0xC0	; 192
    49b2:	ff 4f       	sbci	r31, 0xFF	; 255
    49b4:	80 81       	ld	r24, Z
    49b6:	91 81       	ldd	r25, Z+1	; 0x01
    49b8:	e0 54       	subi	r30, 0x40	; 64
    49ba:	f0 40       	sbci	r31, 0x00	; 0
    49bc:	e8 0f       	add	r30, r24
    49be:	f9 1f       	adc	r31, r25
    49c0:	60 83       	st	Z, r22
    49c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    49c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    49c6:	e0 5c       	subi	r30, 0xC0	; 192
    49c8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ca:	31 83       	std	Z+1, r19	; 0x01
    49cc:	20 83       	st	Z, r18
    49ce:	ee 89       	ldd	r30, Y+22	; 0x16
    49d0:	ff 89       	ldd	r31, Y+23	; 0x17
    49d2:	20 81       	ld	r18, Z
    49d4:	81 e0       	ldi	r24, 0x01	; 1
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	0d 8c       	ldd	r0, Y+29	; 0x1d
    49da:	02 c0       	rjmp	.+4      	; 0x49e0 <_ZN14HardwareSerial5writeEh+0x60>
    49dc:	88 0f       	add	r24, r24
    49de:	99 1f       	adc	r25, r25
    49e0:	0a 94       	dec	r0
    49e2:	e2 f7       	brpl	.-8      	; 0x49dc <_ZN14HardwareSerial5writeEh+0x5c>
    49e4:	28 2b       	or	r18, r24
    49e6:	20 83       	st	Z, r18
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	df 91       	pop	r29
    49ee:	cf 91       	pop	r28
    49f0:	08 95       	ret

000049f2 <_GLOBAL__I_rx_buffer>:
    49f2:	10 92 1e 06 	sts	0x061E, r1
    49f6:	10 92 1d 06 	sts	0x061D, r1
    49fa:	88 ee       	ldi	r24, 0xE8	; 232
    49fc:	93 e0       	ldi	r25, 0x03	; 3
    49fe:	a0 e0       	ldi	r26, 0x00	; 0
    4a00:	b0 e0       	ldi	r27, 0x00	; 0
    4a02:	80 93 1f 06 	sts	0x061F, r24
    4a06:	90 93 20 06 	sts	0x0620, r25
    4a0a:	a0 93 21 06 	sts	0x0621, r26
    4a0e:	b0 93 22 06 	sts	0x0622, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4a12:	85 ed       	ldi	r24, 0xD5	; 213
    4a14:	93 e0       	ldi	r25, 0x03	; 3
    4a16:	90 93 1c 06 	sts	0x061C, r25
    4a1a:	80 93 1b 06 	sts	0x061B, r24
{
  _rx_buffer = rx_buffer;
    4a1e:	83 e9       	ldi	r24, 0x93	; 147
    4a20:	95 e0       	ldi	r25, 0x05	; 5
    4a22:	90 93 28 06 	sts	0x0628, r25
    4a26:	80 93 27 06 	sts	0x0627, r24
  _tx_buffer = tx_buffer;
    4a2a:	87 ed       	ldi	r24, 0xD7	; 215
    4a2c:	95 e0       	ldi	r25, 0x05	; 5
    4a2e:	90 93 2a 06 	sts	0x062A, r25
    4a32:	80 93 29 06 	sts	0x0629, r24
  _ubrrh = ubrrh;
    4a36:	85 ec       	ldi	r24, 0xC5	; 197
    4a38:	90 e0       	ldi	r25, 0x00	; 0
    4a3a:	90 93 2c 06 	sts	0x062C, r25
    4a3e:	80 93 2b 06 	sts	0x062B, r24
  _ubrrl = ubrrl;
    4a42:	84 ec       	ldi	r24, 0xC4	; 196
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	90 93 2e 06 	sts	0x062E, r25
    4a4a:	80 93 2d 06 	sts	0x062D, r24
  _ucsra = ucsra;
    4a4e:	80 ec       	ldi	r24, 0xC0	; 192
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	90 93 30 06 	sts	0x0630, r25
    4a56:	80 93 2f 06 	sts	0x062F, r24
  _ucsrb = ucsrb;
    4a5a:	81 ec       	ldi	r24, 0xC1	; 193
    4a5c:	90 e0       	ldi	r25, 0x00	; 0
    4a5e:	90 93 32 06 	sts	0x0632, r25
    4a62:	80 93 31 06 	sts	0x0631, r24
  _udr = udr;
    4a66:	86 ec       	ldi	r24, 0xC6	; 198
    4a68:	90 e0       	ldi	r25, 0x00	; 0
    4a6a:	90 93 34 06 	sts	0x0634, r25
    4a6e:	80 93 33 06 	sts	0x0633, r24
  _rxen = rxen;
    4a72:	84 e0       	ldi	r24, 0x04	; 4
    4a74:	80 93 35 06 	sts	0x0635, r24
  _txen = txen;
    4a78:	83 e0       	ldi	r24, 0x03	; 3
    4a7a:	80 93 36 06 	sts	0x0636, r24
  _rxcie = rxcie;
    4a7e:	87 e0       	ldi	r24, 0x07	; 7
    4a80:	80 93 37 06 	sts	0x0637, r24
  _udrie = udrie;
    4a84:	85 e0       	ldi	r24, 0x05	; 5
    4a86:	80 93 38 06 	sts	0x0638, r24
  _u2x = u2x;
    4a8a:	81 e0       	ldi	r24, 0x01	; 1
    4a8c:	80 93 39 06 	sts	0x0639, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    4a90:	08 95       	ret

00004a92 <main>:
#include <Arduino.h>

int main(void)
    4a92:	cf 93       	push	r28
    4a94:	df 93       	push	r29
{
	init();
    4a96:	0e 94 2a 22 	call	0x4454	; 0x4454 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    4a9a:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    4a9e:	c0 e8       	ldi	r28, 0x80	; 128
    4aa0:	d3 e2       	ldi	r29, 0x23	; 35
#endif
	
	setup();
    
	for (;;) {
		loop();
    4aa2:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <loop>
		if (serialEventRun) serialEventRun();
    4aa6:	20 97       	sbiw	r28, 0x00	; 0
    4aa8:	e1 f3       	breq	.-8      	; 0x4aa2 <main+0x10>
    4aaa:	0e 94 80 23 	call	0x4700	; 0x4700 <_Z14serialEventRunv>
    4aae:	f9 cf       	rjmp	.-14     	; 0x4aa2 <main+0x10>

00004ab0 <__cxa_pure_virtual>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
    4ab0:	08 95       	ret

00004ab2 <_ZN5Print5writeEPKhj>:
size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  return n;
}
    4ab2:	cf 92       	push	r12
    4ab4:	df 92       	push	r13
    4ab6:	ef 92       	push	r14
    4ab8:	ff 92       	push	r15
    4aba:	0f 93       	push	r16
    4abc:	1f 93       	push	r17
    4abe:	cf 93       	push	r28
    4ac0:	df 93       	push	r29
    4ac2:	7c 01       	movw	r14, r24
    4ac4:	6b 01       	movw	r12, r22
    4ac6:	8a 01       	movw	r16, r20
    4ac8:	c0 e0       	ldi	r28, 0x00	; 0
    4aca:	d0 e0       	ldi	r29, 0x00	; 0
    4acc:	0f c0       	rjmp	.+30     	; 0x4aec <_ZN5Print5writeEPKhj+0x3a>
    4ace:	d6 01       	movw	r26, r12
    4ad0:	6d 91       	ld	r22, X+
    4ad2:	6d 01       	movw	r12, r26
    4ad4:	d7 01       	movw	r26, r14
    4ad6:	ed 91       	ld	r30, X+
    4ad8:	fc 91       	ld	r31, X
    4ada:	01 90       	ld	r0, Z+
    4adc:	f0 81       	ld	r31, Z
    4ade:	e0 2d       	mov	r30, r0
    4ae0:	c7 01       	movw	r24, r14
    4ae2:	09 95       	icall
    4ae4:	c8 0f       	add	r28, r24
    4ae6:	d9 1f       	adc	r29, r25
    4ae8:	01 50       	subi	r16, 0x01	; 1
    4aea:	10 40       	sbci	r17, 0x00	; 0
    4aec:	01 15       	cp	r16, r1
    4aee:	11 05       	cpc	r17, r1
    4af0:	71 f7       	brne	.-36     	; 0x4ace <_ZN5Print5writeEPKhj+0x1c>
    4af2:	ce 01       	movw	r24, r28
    4af4:	df 91       	pop	r29
    4af6:	cf 91       	pop	r28
    4af8:	1f 91       	pop	r17
    4afa:	0f 91       	pop	r16
    4afc:	ff 90       	pop	r15
    4afe:	ef 90       	pop	r14
    4b00:	df 90       	pop	r13
    4b02:	cf 90       	pop	r12
    4b04:	08 95       	ret

00004b06 <_ZN5Print5printEc>:
    4b06:	dc 01       	movw	r26, r24
    4b08:	ed 91       	ld	r30, X+
    4b0a:	fc 91       	ld	r31, X
    4b0c:	01 90       	ld	r0, Z+
    4b0e:	f0 81       	ld	r31, Z
    4b10:	e0 2d       	mov	r30, r0
    4b12:	09 95       	icall
    4b14:	08 95       	ret

00004b16 <_ZN5Print7printlnEv>:
    4b16:	ef 92       	push	r14
    4b18:	ff 92       	push	r15
    4b1a:	0f 93       	push	r16
    4b1c:	1f 93       	push	r17
    4b1e:	8c 01       	movw	r16, r24
    4b20:	dc 01       	movw	r26, r24
    4b22:	ed 91       	ld	r30, X+
    4b24:	fc 91       	ld	r31, X
    4b26:	01 90       	ld	r0, Z+
    4b28:	f0 81       	ld	r31, Z
    4b2a:	e0 2d       	mov	r30, r0
    4b2c:	6d e0       	ldi	r22, 0x0D	; 13
    4b2e:	09 95       	icall
    4b30:	7c 01       	movw	r14, r24
    4b32:	d8 01       	movw	r26, r16
    4b34:	ed 91       	ld	r30, X+
    4b36:	fc 91       	ld	r31, X
    4b38:	01 90       	ld	r0, Z+
    4b3a:	f0 81       	ld	r31, Z
    4b3c:	e0 2d       	mov	r30, r0
    4b3e:	c8 01       	movw	r24, r16
    4b40:	6a e0       	ldi	r22, 0x0A	; 10
    4b42:	09 95       	icall
    4b44:	9c 01       	movw	r18, r24
    4b46:	2e 0d       	add	r18, r14
    4b48:	3f 1d       	adc	r19, r15
    4b4a:	c9 01       	movw	r24, r18
    4b4c:	1f 91       	pop	r17
    4b4e:	0f 91       	pop	r16
    4b50:	ff 90       	pop	r15
    4b52:	ef 90       	pop	r14
    4b54:	08 95       	ret

00004b56 <_ZN5Print5writeEPKc>:
    4b56:	cf 93       	push	r28
    4b58:	df 93       	push	r29
    4b5a:	db 01       	movw	r26, r22
    4b5c:	0d 90       	ld	r0, X+
    4b5e:	00 20       	and	r0, r0
    4b60:	e9 f7       	brne	.-6      	; 0x4b5c <_ZN5Print5writeEPKc+0x6>
    4b62:	11 97       	sbiw	r26, 0x01	; 1
    4b64:	a6 1b       	sub	r26, r22
    4b66:	b7 0b       	sbc	r27, r23
    4b68:	ec 01       	movw	r28, r24
    4b6a:	e8 81       	ld	r30, Y
    4b6c:	f9 81       	ldd	r31, Y+1	; 0x01
    4b6e:	02 80       	ldd	r0, Z+2	; 0x02
    4b70:	f3 81       	ldd	r31, Z+3	; 0x03
    4b72:	e0 2d       	mov	r30, r0
    4b74:	ad 01       	movw	r20, r26
    4b76:	09 95       	icall
    4b78:	df 91       	pop	r29
    4b7a:	cf 91       	pop	r28
    4b7c:	08 95       	ret

00004b7e <_ZN5Print11printNumberEmh>:
    4b7e:	4f 92       	push	r4
    4b80:	5f 92       	push	r5
    4b82:	7f 92       	push	r7
    4b84:	8f 92       	push	r8
    4b86:	9f 92       	push	r9
    4b88:	af 92       	push	r10
    4b8a:	bf 92       	push	r11
    4b8c:	cf 92       	push	r12
    4b8e:	df 92       	push	r13
    4b90:	ef 92       	push	r14
    4b92:	ff 92       	push	r15
    4b94:	0f 93       	push	r16
    4b96:	1f 93       	push	r17
    4b98:	df 93       	push	r29
    4b9a:	cf 93       	push	r28
    4b9c:	cd b7       	in	r28, 0x3d	; 61
    4b9e:	de b7       	in	r29, 0x3e	; 62
    4ba0:	a1 97       	sbiw	r28, 0x21	; 33
    4ba2:	0f b6       	in	r0, 0x3f	; 63
    4ba4:	f8 94       	cli
    4ba6:	de bf       	out	0x3e, r29	; 62
    4ba8:	0f be       	out	0x3f, r0	; 63
    4baa:	cd bf       	out	0x3d, r28	; 61
    4bac:	2c 01       	movw	r4, r24
    4bae:	74 2e       	mov	r7, r20
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	22 30       	cpi	r18, 0x02	; 2
    4bb4:	08 f4       	brcc	.+2      	; 0x4bb8 <_ZN5Print11printNumberEmh+0x3a>
    4bb6:	2a e0       	ldi	r18, 0x0A	; 10
    4bb8:	19 a2       	lds	r17, 0x99
    4bba:	31 e2       	ldi	r19, 0x21	; 33
    4bbc:	c3 2e       	mov	r12, r19
    4bbe:	d1 2c       	mov	r13, r1
    4bc0:	cc 0e       	add	r12, r28
    4bc2:	dd 1e       	adc	r13, r29
    4bc4:	82 2e       	mov	r8, r18
    4bc6:	99 24       	eor	r9, r9
    4bc8:	aa 24       	eor	r10, r10
    4bca:	bb 24       	eor	r11, r11
    4bcc:	67 2d       	mov	r22, r7
    4bce:	75 2f       	mov	r23, r21
    4bd0:	a5 01       	movw	r20, r10
    4bd2:	94 01       	movw	r18, r8
    4bd4:	0e 94 23 2c 	call	0x5846	; 0x5846 <__udivmodsi4>
    4bd8:	79 01       	movw	r14, r18
    4bda:	8a 01       	movw	r16, r20
    4bdc:	c8 01       	movw	r24, r16
    4bde:	b7 01       	movw	r22, r14
    4be0:	a5 01       	movw	r20, r10
    4be2:	94 01       	movw	r18, r8
    4be4:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <__mulsi3>
    4be8:	47 2d       	mov	r20, r7
    4bea:	46 1b       	sub	r20, r22
    4bec:	08 94       	sec
    4bee:	c1 08       	sbc	r12, r1
    4bf0:	d1 08       	sbc	r13, r1
    4bf2:	4a 30       	cpi	r20, 0x0A	; 10
    4bf4:	14 f4       	brge	.+4      	; 0x4bfa <_ZN5Print11printNumberEmh+0x7c>
    4bf6:	40 5d       	subi	r20, 0xD0	; 208
    4bf8:	01 c0       	rjmp	.+2      	; 0x4bfc <_ZN5Print11printNumberEmh+0x7e>
    4bfa:	49 5c       	subi	r20, 0xC9	; 201
    4bfc:	f6 01       	movw	r30, r12
    4bfe:	40 83       	st	Z, r20
    4c00:	e1 14       	cp	r14, r1
    4c02:	f1 04       	cpc	r15, r1
    4c04:	01 05       	cpc	r16, r1
    4c06:	11 05       	cpc	r17, r1
    4c08:	21 f0       	breq	.+8      	; 0x4c12 <_ZN5Print11printNumberEmh+0x94>
    4c0a:	7e 2c       	mov	r7, r14
    4c0c:	5f 2d       	mov	r21, r15
    4c0e:	c8 01       	movw	r24, r16
    4c10:	dd cf       	rjmp	.-70     	; 0x4bcc <_ZN5Print11printNumberEmh+0x4e>
    4c12:	c2 01       	movw	r24, r4
    4c14:	b6 01       	movw	r22, r12
    4c16:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <_ZN5Print5writeEPKc>
    4c1a:	a1 96       	adiw	r28, 0x21	; 33
    4c1c:	0f b6       	in	r0, 0x3f	; 63
    4c1e:	f8 94       	cli
    4c20:	de bf       	out	0x3e, r29	; 62
    4c22:	0f be       	out	0x3f, r0	; 63
    4c24:	cd bf       	out	0x3d, r28	; 61
    4c26:	cf 91       	pop	r28
    4c28:	df 91       	pop	r29
    4c2a:	1f 91       	pop	r17
    4c2c:	0f 91       	pop	r16
    4c2e:	ff 90       	pop	r15
    4c30:	ef 90       	pop	r14
    4c32:	df 90       	pop	r13
    4c34:	cf 90       	pop	r12
    4c36:	bf 90       	pop	r11
    4c38:	af 90       	pop	r10
    4c3a:	9f 90       	pop	r9
    4c3c:	8f 90       	pop	r8
    4c3e:	7f 90       	pop	r7
    4c40:	5f 90       	pop	r5
    4c42:	4f 90       	pop	r4
    4c44:	08 95       	ret

00004c46 <_ZN5Print5printEmi>:
    4c46:	dc 01       	movw	r26, r24
    4c48:	21 15       	cp	r18, r1
    4c4a:	31 05       	cpc	r19, r1
    4c4c:	41 f4       	brne	.+16     	; 0x4c5e <_ZN5Print5printEmi+0x18>
    4c4e:	ed 91       	ld	r30, X+
    4c50:	fc 91       	ld	r31, X
    4c52:	01 90       	ld	r0, Z+
    4c54:	f0 81       	ld	r31, Z
    4c56:	e0 2d       	mov	r30, r0
    4c58:	64 2f       	mov	r22, r20
    4c5a:	09 95       	icall
    4c5c:	08 95       	ret
    4c5e:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <_ZN5Print11printNumberEmh>
    4c62:	08 95       	ret

00004c64 <_ZN5Print7printlnEmi>:
    4c64:	ef 92       	push	r14
    4c66:	ff 92       	push	r15
    4c68:	0f 93       	push	r16
    4c6a:	1f 93       	push	r17
    4c6c:	7c 01       	movw	r14, r24
    4c6e:	0e 94 23 26 	call	0x4c46	; 0x4c46 <_ZN5Print5printEmi>
    4c72:	8c 01       	movw	r16, r24
    4c74:	c7 01       	movw	r24, r14
    4c76:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <_ZN5Print7printlnEv>
    4c7a:	9c 01       	movw	r18, r24
    4c7c:	20 0f       	add	r18, r16
    4c7e:	31 1f       	adc	r19, r17
    4c80:	c9 01       	movw	r24, r18
    4c82:	1f 91       	pop	r17
    4c84:	0f 91       	pop	r16
    4c86:	ff 90       	pop	r15
    4c88:	ef 90       	pop	r14
    4c8a:	08 95       	ret

00004c8c <_ZN5Print7printlnEji>:
    4c8c:	cf 92       	push	r12
    4c8e:	df 92       	push	r13
    4c90:	ef 92       	push	r14
    4c92:	ff 92       	push	r15
    4c94:	0f 93       	push	r16
    4c96:	1f 93       	push	r17
    4c98:	6c 01       	movw	r12, r24
    4c9a:	7b 01       	movw	r14, r22
    4c9c:	9a 01       	movw	r18, r20
    4c9e:	00 e0       	ldi	r16, 0x00	; 0
    4ca0:	10 e0       	ldi	r17, 0x00	; 0
    4ca2:	b8 01       	movw	r22, r16
    4ca4:	a7 01       	movw	r20, r14
    4ca6:	0e 94 23 26 	call	0x4c46	; 0x4c46 <_ZN5Print5printEmi>
    4caa:	8c 01       	movw	r16, r24
    4cac:	c6 01       	movw	r24, r12
    4cae:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <_ZN5Print7printlnEv>
    4cb2:	08 0f       	add	r16, r24
    4cb4:	19 1f       	adc	r17, r25
    4cb6:	c8 01       	movw	r24, r16
    4cb8:	1f 91       	pop	r17
    4cba:	0f 91       	pop	r16
    4cbc:	ff 90       	pop	r15
    4cbe:	ef 90       	pop	r14
    4cc0:	df 90       	pop	r13
    4cc2:	cf 90       	pop	r12
    4cc4:	08 95       	ret

00004cc6 <_ZN5Print5printEhi>:
    4cc6:	ef 92       	push	r14
    4cc8:	ff 92       	push	r15
    4cca:	0f 93       	push	r16
    4ccc:	1f 93       	push	r17
    4cce:	9a 01       	movw	r18, r20
    4cd0:	e6 2e       	mov	r14, r22
    4cd2:	ff 24       	eor	r15, r15
    4cd4:	00 e0       	ldi	r16, 0x00	; 0
    4cd6:	10 e0       	ldi	r17, 0x00	; 0
    4cd8:	b8 01       	movw	r22, r16
    4cda:	a7 01       	movw	r20, r14
    4cdc:	0e 94 23 26 	call	0x4c46	; 0x4c46 <_ZN5Print5printEmi>
    4ce0:	1f 91       	pop	r17
    4ce2:	0f 91       	pop	r16
    4ce4:	ff 90       	pop	r15
    4ce6:	ef 90       	pop	r14
    4ce8:	08 95       	ret

00004cea <_ZN5Print7printlnEhi>:
    4cea:	cf 92       	push	r12
    4cec:	df 92       	push	r13
    4cee:	ef 92       	push	r14
    4cf0:	ff 92       	push	r15
    4cf2:	0f 93       	push	r16
    4cf4:	1f 93       	push	r17
    4cf6:	6c 01       	movw	r12, r24
    4cf8:	e6 2e       	mov	r14, r22
    4cfa:	9a 01       	movw	r18, r20
    4cfc:	ff 24       	eor	r15, r15
    4cfe:	00 e0       	ldi	r16, 0x00	; 0
    4d00:	10 e0       	ldi	r17, 0x00	; 0
    4d02:	b8 01       	movw	r22, r16
    4d04:	a7 01       	movw	r20, r14
    4d06:	0e 94 23 26 	call	0x4c46	; 0x4c46 <_ZN5Print5printEmi>
    4d0a:	8c 01       	movw	r16, r24
    4d0c:	c6 01       	movw	r24, r12
    4d0e:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <_ZN5Print7printlnEv>
    4d12:	08 0f       	add	r16, r24
    4d14:	19 1f       	adc	r17, r25
    4d16:	c8 01       	movw	r24, r16
    4d18:	1f 91       	pop	r17
    4d1a:	0f 91       	pop	r16
    4d1c:	ff 90       	pop	r15
    4d1e:	ef 90       	pop	r14
    4d20:	df 90       	pop	r13
    4d22:	cf 90       	pop	r12
    4d24:	08 95       	ret

00004d26 <_ZN5Print5printEli>:
    4d26:	cf 92       	push	r12
    4d28:	df 92       	push	r13
    4d2a:	ef 92       	push	r14
    4d2c:	ff 92       	push	r15
    4d2e:	0f 93       	push	r16
    4d30:	1f 93       	push	r17
    4d32:	cf 93       	push	r28
    4d34:	df 93       	push	r29
    4d36:	ec 01       	movw	r28, r24
    4d38:	6a 01       	movw	r12, r20
    4d3a:	7b 01       	movw	r14, r22
    4d3c:	21 15       	cp	r18, r1
    4d3e:	31 05       	cpc	r19, r1
    4d40:	41 f4       	brne	.+16     	; 0x4d52 <_ZN5Print5printEli+0x2c>
    4d42:	e8 81       	ld	r30, Y
    4d44:	f9 81       	ldd	r31, Y+1	; 0x01
    4d46:	01 90       	ld	r0, Z+
    4d48:	f0 81       	ld	r31, Z
    4d4a:	e0 2d       	mov	r30, r0
    4d4c:	64 2f       	mov	r22, r20
    4d4e:	09 95       	icall
    4d50:	1f c0       	rjmp	.+62     	; 0x4d90 <_ZN5Print5printEli+0x6a>
    4d52:	2a 30       	cpi	r18, 0x0A	; 10
    4d54:	31 05       	cpc	r19, r1
    4d56:	d1 f4       	brne	.+52     	; 0x4d8c <_ZN5Print5printEli+0x66>
    4d58:	77 ff       	sbrs	r23, 7
    4d5a:	17 c0       	rjmp	.+46     	; 0x4d8a <_ZN5Print5printEli+0x64>
    4d5c:	e8 81       	ld	r30, Y
    4d5e:	f9 81       	ldd	r31, Y+1	; 0x01
    4d60:	01 90       	ld	r0, Z+
    4d62:	f0 81       	ld	r31, Z
    4d64:	e0 2d       	mov	r30, r0
    4d66:	6d e2       	ldi	r22, 0x2D	; 45
    4d68:	09 95       	icall
    4d6a:	8c 01       	movw	r16, r24
    4d6c:	44 27       	eor	r20, r20
    4d6e:	55 27       	eor	r21, r21
    4d70:	ba 01       	movw	r22, r20
    4d72:	4c 19       	sub	r20, r12
    4d74:	5d 09       	sbc	r21, r13
    4d76:	6e 09       	sbc	r22, r14
    4d78:	7f 09       	sbc	r23, r15
    4d7a:	ce 01       	movw	r24, r28
    4d7c:	2a e0       	ldi	r18, 0x0A	; 10
    4d7e:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <_ZN5Print11printNumberEmh>
    4d82:	98 01       	movw	r18, r16
    4d84:	28 0f       	add	r18, r24
    4d86:	39 1f       	adc	r19, r25
    4d88:	04 c0       	rjmp	.+8      	; 0x4d92 <_ZN5Print5printEli+0x6c>
    4d8a:	2a e0       	ldi	r18, 0x0A	; 10
    4d8c:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <_ZN5Print11printNumberEmh>
    4d90:	9c 01       	movw	r18, r24
    4d92:	c9 01       	movw	r24, r18
    4d94:	df 91       	pop	r29
    4d96:	cf 91       	pop	r28
    4d98:	1f 91       	pop	r17
    4d9a:	0f 91       	pop	r16
    4d9c:	ff 90       	pop	r15
    4d9e:	ef 90       	pop	r14
    4da0:	df 90       	pop	r13
    4da2:	cf 90       	pop	r12
    4da4:	08 95       	ret

00004da6 <_ZN5Print7printlnEii>:
    4da6:	cf 92       	push	r12
    4da8:	df 92       	push	r13
    4daa:	ef 92       	push	r14
    4dac:	ff 92       	push	r15
    4dae:	0f 93       	push	r16
    4db0:	1f 93       	push	r17
    4db2:	6c 01       	movw	r12, r24
    4db4:	7b 01       	movw	r14, r22
    4db6:	9a 01       	movw	r18, r20
    4db8:	00 27       	eor	r16, r16
    4dba:	f7 fc       	sbrc	r15, 7
    4dbc:	00 95       	com	r16
    4dbe:	10 2f       	mov	r17, r16
    4dc0:	b8 01       	movw	r22, r16
    4dc2:	a7 01       	movw	r20, r14
    4dc4:	0e 94 93 26 	call	0x4d26	; 0x4d26 <_ZN5Print5printEli>
    4dc8:	8c 01       	movw	r16, r24
    4dca:	c6 01       	movw	r24, r12
    4dcc:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <_ZN5Print7printlnEv>
    4dd0:	08 0f       	add	r16, r24
    4dd2:	19 1f       	adc	r17, r25
    4dd4:	c8 01       	movw	r24, r16
    4dd6:	1f 91       	pop	r17
    4dd8:	0f 91       	pop	r16
    4dda:	ff 90       	pop	r15
    4ddc:	ef 90       	pop	r14
    4dde:	df 90       	pop	r13
    4de0:	cf 90       	pop	r12
    4de2:	08 95       	ret

00004de4 <_ZN5Print5printEPKc>:
    4de4:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <_ZN5Print5writeEPKc>
    4de8:	08 95       	ret

00004dea <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
    4dea:	ef 92       	push	r14
    4dec:	ff 92       	push	r15
    4dee:	0f 93       	push	r16
    4df0:	1f 93       	push	r17
    4df2:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4df4:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <_ZN5Print5writeEPKc>
    4df8:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    4dfa:	c7 01       	movw	r24, r14
    4dfc:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <_ZN5Print7printlnEv>
    4e00:	08 0f       	add	r16, r24
    4e02:	19 1f       	adc	r17, r25
  return n;
}
    4e04:	c8 01       	movw	r24, r16
    4e06:	1f 91       	pop	r17
    4e08:	0f 91       	pop	r16
    4e0a:	ff 90       	pop	r15
    4e0c:	ef 90       	pop	r14
    4e0e:	08 95       	ret

00004e10 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
    4e10:	af 92       	push	r10
    4e12:	bf 92       	push	r11
    4e14:	cf 92       	push	r12
    4e16:	df 92       	push	r13
    4e18:	ef 92       	push	r14
    4e1a:	ff 92       	push	r15
    4e1c:	0f 93       	push	r16
    4e1e:	1f 93       	push	r17
    4e20:	cf 93       	push	r28
    4e22:	df 93       	push	r29
    4e24:	5c 01       	movw	r10, r24
    4e26:	6b 01       	movw	r12, r22
    4e28:	ee 24       	eor	r14, r14
    4e2a:	ff 24       	eor	r15, r15
    4e2c:	c0 e0       	ldi	r28, 0x00	; 0
    4e2e:	d0 e0       	ldi	r29, 0x00	; 0
    4e30:	10 c0       	rjmp	.+32     	; 0x4e52 <_ZN5Print5printERK6String+0x42>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
    4e32:	d5 01       	movw	r26, r10
    4e34:	ed 91       	ld	r30, X+
    4e36:	fc 91       	ld	r31, X
    4e38:	00 81       	ld	r16, Z
    4e3a:	11 81       	ldd	r17, Z+1	; 0x01
    4e3c:	c6 01       	movw	r24, r12
    4e3e:	be 01       	movw	r22, r28
    4e40:	0e 94 75 27 	call	0x4eea	; 0x4eea <_ZNK6StringixEj>
    4e44:	68 2f       	mov	r22, r24
    4e46:	c5 01       	movw	r24, r10
    4e48:	f8 01       	movw	r30, r16
    4e4a:	09 95       	icall
    4e4c:	e8 0e       	add	r14, r24
    4e4e:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    4e50:	21 96       	adiw	r28, 0x01	; 1
    4e52:	f6 01       	movw	r30, r12
    4e54:	84 81       	ldd	r24, Z+4	; 0x04
    4e56:	95 81       	ldd	r25, Z+5	; 0x05
    4e58:	c8 17       	cp	r28, r24
    4e5a:	d9 07       	cpc	r29, r25
    4e5c:	50 f3       	brcs	.-44     	; 0x4e32 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    4e5e:	c7 01       	movw	r24, r14
    4e60:	df 91       	pop	r29
    4e62:	cf 91       	pop	r28
    4e64:	1f 91       	pop	r17
    4e66:	0f 91       	pop	r16
    4e68:	ff 90       	pop	r15
    4e6a:	ef 90       	pop	r14
    4e6c:	df 90       	pop	r13
    4e6e:	cf 90       	pop	r12
    4e70:	bf 90       	pop	r11
    4e72:	af 90       	pop	r10
    4e74:	08 95       	ret

00004e76 <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
    4e76:	ef 92       	push	r14
    4e78:	ff 92       	push	r15
    4e7a:	0f 93       	push	r16
    4e7c:	1f 93       	push	r17
    4e7e:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
    4e80:	0e 94 08 27 	call	0x4e10	; 0x4e10 <_ZN5Print5printERK6String>
    4e84:	8c 01       	movw	r16, r24
  n += println();
    4e86:	c7 01       	movw	r24, r14
    4e88:	0e 94 8b 25 	call	0x4b16	; 0x4b16 <_ZN5Print7printlnEv>
    4e8c:	9c 01       	movw	r18, r24
    4e8e:	20 0f       	add	r18, r16
    4e90:	31 1f       	adc	r19, r17
  return n;
}
    4e92:	c9 01       	movw	r24, r18
    4e94:	1f 91       	pop	r17
    4e96:	0f 91       	pop	r16
    4e98:	ff 90       	pop	r15
    4e9a:	ef 90       	pop	r14
    4e9c:	08 95       	ret

00004e9e <_ZNK6String6charAtEj>:
}

String String::substring( unsigned int left ) const
{
	return substring(left, len);
}
    4e9e:	fc 01       	movw	r30, r24
    4ea0:	84 81       	ldd	r24, Z+4	; 0x04
    4ea2:	95 81       	ldd	r25, Z+5	; 0x05
    4ea4:	68 17       	cp	r22, r24
    4ea6:	79 07       	cpc	r23, r25
    4ea8:	48 f4       	brcc	.+18     	; 0x4ebc <_ZNK6String6charAtEj+0x1e>
    4eaa:	01 90       	ld	r0, Z+
    4eac:	f0 81       	ld	r31, Z
    4eae:	e0 2d       	mov	r30, r0
    4eb0:	30 97       	sbiw	r30, 0x00	; 0
    4eb2:	21 f0       	breq	.+8      	; 0x4ebc <_ZNK6String6charAtEj+0x1e>
    4eb4:	e6 0f       	add	r30, r22
    4eb6:	f7 1f       	adc	r31, r23
    4eb8:	80 81       	ld	r24, Z
    4eba:	08 95       	ret
    4ebc:	80 e0       	ldi	r24, 0x00	; 0
    4ebe:	08 95       	ret

00004ec0 <_ZN6StringixEj>:
    4ec0:	fc 01       	movw	r30, r24
    4ec2:	9b 01       	movw	r18, r22
    4ec4:	84 81       	ldd	r24, Z+4	; 0x04
    4ec6:	95 81       	ldd	r25, Z+5	; 0x05
    4ec8:	68 17       	cp	r22, r24
    4eca:	79 07       	cpc	r23, r25
    4ecc:	28 f4       	brcc	.+10     	; 0x4ed8 <_ZN6StringixEj+0x18>
    4ece:	60 81       	ld	r22, Z
    4ed0:	71 81       	ldd	r23, Z+1	; 0x01
    4ed2:	61 15       	cp	r22, r1
    4ed4:	71 05       	cpc	r23, r1
    4ed6:	29 f4       	brne	.+10     	; 0x4ee2 <_ZN6StringixEj+0x22>
    4ed8:	10 92 3a 06 	sts	0x063A, r1
    4edc:	6a e3       	ldi	r22, 0x3A	; 58
    4ede:	76 e0       	ldi	r23, 0x06	; 6
    4ee0:	02 c0       	rjmp	.+4      	; 0x4ee6 <_ZN6StringixEj+0x26>
    4ee2:	62 0f       	add	r22, r18
    4ee4:	73 1f       	adc	r23, r19
    4ee6:	cb 01       	movw	r24, r22
    4ee8:	08 95       	ret

00004eea <_ZNK6StringixEj>:
    4eea:	fc 01       	movw	r30, r24
    4eec:	84 81       	ldd	r24, Z+4	; 0x04
    4eee:	95 81       	ldd	r25, Z+5	; 0x05
    4ef0:	68 17       	cp	r22, r24
    4ef2:	79 07       	cpc	r23, r25
    4ef4:	48 f4       	brcc	.+18     	; 0x4f08 <_ZNK6StringixEj+0x1e>
    4ef6:	01 90       	ld	r0, Z+
    4ef8:	f0 81       	ld	r31, Z
    4efa:	e0 2d       	mov	r30, r0
    4efc:	30 97       	sbiw	r30, 0x00	; 0
    4efe:	21 f0       	breq	.+8      	; 0x4f08 <_ZNK6StringixEj+0x1e>
    4f00:	e6 0f       	add	r30, r22
    4f02:	f7 1f       	adc	r31, r23
    4f04:	80 81       	ld	r24, Z
    4f06:	08 95       	ret
    4f08:	80 e0       	ldi	r24, 0x00	; 0
    4f0a:	08 95       	ret

00004f0c <_ZNK6String5toIntEv>:
    4f0c:	fc 01       	movw	r30, r24
    4f0e:	80 81       	ld	r24, Z
    4f10:	91 81       	ldd	r25, Z+1	; 0x01
    4f12:	00 97       	sbiw	r24, 0x00	; 0
    4f14:	29 f4       	brne	.+10     	; 0x4f20 <_ZNK6String5toIntEv+0x14>
    4f16:	20 e0       	ldi	r18, 0x00	; 0
    4f18:	30 e0       	ldi	r19, 0x00	; 0
    4f1a:	40 e0       	ldi	r20, 0x00	; 0
    4f1c:	50 e0       	ldi	r21, 0x00	; 0
    4f1e:	04 c0       	rjmp	.+8      	; 0x4f28 <_ZNK6String5toIntEv+0x1c>
    4f20:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <atol>
    4f24:	9b 01       	movw	r18, r22
    4f26:	ac 01       	movw	r20, r24
    4f28:	b9 01       	movw	r22, r18
    4f2a:	ca 01       	movw	r24, r20
    4f2c:	08 95       	ret

00004f2e <_ZN6String4trimEv>:
    4f2e:	cf 92       	push	r12
    4f30:	df 92       	push	r13
    4f32:	ef 92       	push	r14
    4f34:	ff 92       	push	r15
    4f36:	0f 93       	push	r16
    4f38:	1f 93       	push	r17
    4f3a:	cf 93       	push	r28
    4f3c:	df 93       	push	r29
    4f3e:	6c 01       	movw	r12, r24
    4f40:	dc 01       	movw	r26, r24
    4f42:	ed 90       	ld	r14, X+
    4f44:	fc 90       	ld	r15, X
    4f46:	11 97       	sbiw	r26, 0x01	; 1
    4f48:	e1 14       	cp	r14, r1
    4f4a:	f1 04       	cpc	r15, r1
    4f4c:	09 f4       	brne	.+2      	; 0x4f50 <_ZN6String4trimEv+0x22>
    4f4e:	41 c0       	rjmp	.+130    	; 0x4fd2 <_ZN6String4trimEv+0xa4>
    4f50:	14 96       	adiw	r26, 0x04	; 4
    4f52:	cd 91       	ld	r28, X+
    4f54:	dc 91       	ld	r29, X
    4f56:	15 97       	sbiw	r26, 0x05	; 5
    4f58:	20 97       	sbiw	r28, 0x00	; 0
    4f5a:	d9 f1       	breq	.+118    	; 0x4fd2 <_ZN6String4trimEv+0xa4>
    4f5c:	87 01       	movw	r16, r14
    4f5e:	02 c0       	rjmp	.+4      	; 0x4f64 <_ZN6String4trimEv+0x36>
    4f60:	0f 5f       	subi	r16, 0xFF	; 255
    4f62:	1f 4f       	sbci	r17, 0xFF	; 255
    4f64:	f8 01       	movw	r30, r16
    4f66:	80 81       	ld	r24, Z
    4f68:	99 27       	eor	r25, r25
    4f6a:	87 fd       	sbrc	r24, 7
    4f6c:	90 95       	com	r25
    4f6e:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <isspace>
    4f72:	89 2b       	or	r24, r25
    4f74:	a9 f7       	brne	.-22     	; 0x4f60 <_ZN6String4trimEv+0x32>
    4f76:	21 97       	sbiw	r28, 0x01	; 1
    4f78:	ce 0d       	add	r28, r14
    4f7a:	df 1d       	adc	r29, r15
    4f7c:	01 c0       	rjmp	.+2      	; 0x4f80 <_ZN6String4trimEv+0x52>
    4f7e:	21 97       	sbiw	r28, 0x01	; 1
    4f80:	88 81       	ld	r24, Y
    4f82:	99 27       	eor	r25, r25
    4f84:	87 fd       	sbrc	r24, 7
    4f86:	90 95       	com	r25
    4f88:	0e 94 9b 2e 	call	0x5d36	; 0x5d36 <isspace>
    4f8c:	89 2b       	or	r24, r25
    4f8e:	19 f0       	breq	.+6      	; 0x4f96 <_ZN6String4trimEv+0x68>
    4f90:	c0 17       	cp	r28, r16
    4f92:	d1 07       	cpc	r29, r17
    4f94:	a0 f7       	brcc	.-24     	; 0x4f7e <_ZN6String4trimEv+0x50>
    4f96:	fe 01       	movw	r30, r28
    4f98:	31 96       	adiw	r30, 0x01	; 1
    4f9a:	e0 1b       	sub	r30, r16
    4f9c:	f1 0b       	sbc	r31, r17
    4f9e:	d6 01       	movw	r26, r12
    4fa0:	15 96       	adiw	r26, 0x05	; 5
    4fa2:	fc 93       	st	X, r31
    4fa4:	ee 93       	st	-X, r30
    4fa6:	14 97       	sbiw	r26, 0x04	; 4
    4fa8:	2d 91       	ld	r18, X+
    4faa:	3c 91       	ld	r19, X
    4fac:	20 17       	cp	r18, r16
    4fae:	31 07       	cpc	r19, r17
    4fb0:	28 f4       	brcc	.+10     	; 0x4fbc <_ZN6String4trimEv+0x8e>
    4fb2:	c9 01       	movw	r24, r18
    4fb4:	b8 01       	movw	r22, r16
    4fb6:	af 01       	movw	r20, r30
    4fb8:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <memcpy>
    4fbc:	d6 01       	movw	r26, r12
    4fbe:	ed 91       	ld	r30, X+
    4fc0:	fc 91       	ld	r31, X
    4fc2:	11 97       	sbiw	r26, 0x01	; 1
    4fc4:	14 96       	adiw	r26, 0x04	; 4
    4fc6:	8d 91       	ld	r24, X+
    4fc8:	9c 91       	ld	r25, X
    4fca:	15 97       	sbiw	r26, 0x05	; 5
    4fcc:	e8 0f       	add	r30, r24
    4fce:	f9 1f       	adc	r31, r25
    4fd0:	10 82       	st	Z, r1
    4fd2:	df 91       	pop	r29
    4fd4:	cf 91       	pop	r28
    4fd6:	1f 91       	pop	r17
    4fd8:	0f 91       	pop	r16
    4fda:	ff 90       	pop	r15
    4fdc:	ef 90       	pop	r14
    4fde:	df 90       	pop	r13
    4fe0:	cf 90       	pop	r12
    4fe2:	08 95       	ret

00004fe4 <_ZNK6String11lastIndexOfERKS_j>:
    4fe4:	af 92       	push	r10
    4fe6:	bf 92       	push	r11
    4fe8:	cf 92       	push	r12
    4fea:	df 92       	push	r13
    4fec:	ef 92       	push	r14
    4fee:	ff 92       	push	r15
    4ff0:	0f 93       	push	r16
    4ff2:	1f 93       	push	r17
    4ff4:	cf 93       	push	r28
    4ff6:	df 93       	push	r29
    4ff8:	fc 01       	movw	r30, r24
    4ffa:	5b 01       	movw	r10, r22
    4ffc:	7a 01       	movw	r14, r20
    4ffe:	db 01       	movw	r26, r22
    5000:	14 96       	adiw	r26, 0x04	; 4
    5002:	2d 91       	ld	r18, X+
    5004:	3c 91       	ld	r19, X
    5006:	15 97       	sbiw	r26, 0x05	; 5
    5008:	21 15       	cp	r18, r1
    500a:	31 05       	cpc	r19, r1
    500c:	59 f1       	breq	.+86     	; 0x5064 <_ZNK6String11lastIndexOfERKS_j+0x80>
    500e:	84 81       	ldd	r24, Z+4	; 0x04
    5010:	95 81       	ldd	r25, Z+5	; 0x05
    5012:	00 97       	sbiw	r24, 0x00	; 0
    5014:	39 f1       	breq	.+78     	; 0x5064 <_ZNK6String11lastIndexOfERKS_j+0x80>
    5016:	82 17       	cp	r24, r18
    5018:	93 07       	cpc	r25, r19
    501a:	20 f1       	brcs	.+72     	; 0x5064 <_ZNK6String11lastIndexOfERKS_j+0x80>
    501c:	48 17       	cp	r20, r24
    501e:	59 07       	cpc	r21, r25
    5020:	20 f0       	brcs	.+8      	; 0x502a <_ZNK6String11lastIndexOfERKS_j+0x46>
    5022:	7c 01       	movw	r14, r24
    5024:	08 94       	sec
    5026:	e1 08       	sbc	r14, r1
    5028:	f1 08       	sbc	r15, r1
    502a:	00 81       	ld	r16, Z
    502c:	11 81       	ldd	r17, Z+1	; 0x01
    502e:	c8 01       	movw	r24, r16
    5030:	cf ef       	ldi	r28, 0xFF	; 255
    5032:	df ef       	ldi	r29, 0xFF	; 255
    5034:	68 01       	movw	r12, r16
    5036:	ce 0c       	add	r12, r14
    5038:	df 1c       	adc	r13, r15
    503a:	10 c0       	rjmp	.+32     	; 0x505c <_ZNK6String11lastIndexOfERKS_j+0x78>
    503c:	f5 01       	movw	r30, r10
    503e:	60 81       	ld	r22, Z
    5040:	71 81       	ldd	r23, Z+1	; 0x01
    5042:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <strstr>
    5046:	9c 01       	movw	r18, r24
    5048:	00 97       	sbiw	r24, 0x00	; 0
    504a:	71 f0       	breq	.+28     	; 0x5068 <_ZNK6String11lastIndexOfERKS_j+0x84>
    504c:	80 1b       	sub	r24, r16
    504e:	91 0b       	sbc	r25, r17
    5050:	e8 16       	cp	r14, r24
    5052:	f9 06       	cpc	r15, r25
    5054:	08 f0       	brcs	.+2      	; 0x5058 <_ZNK6String11lastIndexOfERKS_j+0x74>
    5056:	ec 01       	movw	r28, r24
    5058:	c9 01       	movw	r24, r18
    505a:	01 96       	adiw	r24, 0x01	; 1
    505c:	c8 16       	cp	r12, r24
    505e:	d9 06       	cpc	r13, r25
    5060:	68 f7       	brcc	.-38     	; 0x503c <_ZNK6String11lastIndexOfERKS_j+0x58>
    5062:	02 c0       	rjmp	.+4      	; 0x5068 <_ZNK6String11lastIndexOfERKS_j+0x84>
    5064:	cf ef       	ldi	r28, 0xFF	; 255
    5066:	df ef       	ldi	r29, 0xFF	; 255
    5068:	ce 01       	movw	r24, r28
    506a:	df 91       	pop	r29
    506c:	cf 91       	pop	r28
    506e:	1f 91       	pop	r17
    5070:	0f 91       	pop	r16
    5072:	ff 90       	pop	r15
    5074:	ef 90       	pop	r14
    5076:	df 90       	pop	r13
    5078:	cf 90       	pop	r12
    507a:	bf 90       	pop	r11
    507c:	af 90       	pop	r10
    507e:	08 95       	ret

00005080 <_ZNK6String7indexOfERKS_j>:
    5080:	cf 93       	push	r28
    5082:	df 93       	push	r29
    5084:	fc 01       	movw	r30, r24
    5086:	db 01       	movw	r26, r22
    5088:	84 81       	ldd	r24, Z+4	; 0x04
    508a:	95 81       	ldd	r25, Z+5	; 0x05
    508c:	48 17       	cp	r20, r24
    508e:	59 07       	cpc	r21, r25
    5090:	60 f4       	brcc	.+24     	; 0x50aa <_ZNK6String7indexOfERKS_j+0x2a>
    5092:	c0 81       	ld	r28, Z
    5094:	d1 81       	ldd	r29, Z+1	; 0x01
    5096:	6d 91       	ld	r22, X+
    5098:	7c 91       	ld	r23, X
    509a:	ce 01       	movw	r24, r28
    509c:	84 0f       	add	r24, r20
    509e:	95 1f       	adc	r25, r21
    50a0:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <strstr>
    50a4:	9c 01       	movw	r18, r24
    50a6:	00 97       	sbiw	r24, 0x00	; 0
    50a8:	19 f4       	brne	.+6      	; 0x50b0 <_ZNK6String7indexOfERKS_j+0x30>
    50aa:	2f ef       	ldi	r18, 0xFF	; 255
    50ac:	3f ef       	ldi	r19, 0xFF	; 255
    50ae:	02 c0       	rjmp	.+4      	; 0x50b4 <_ZNK6String7indexOfERKS_j+0x34>
    50b0:	2c 1b       	sub	r18, r28
    50b2:	3d 0b       	sbc	r19, r29
    50b4:	c9 01       	movw	r24, r18
    50b6:	df 91       	pop	r29
    50b8:	cf 91       	pop	r28
    50ba:	08 95       	ret

000050bc <_ZNK6String7indexOfERKS_>:
    50bc:	40 e0       	ldi	r20, 0x00	; 0
    50be:	50 e0       	ldi	r21, 0x00	; 0
    50c0:	0e 94 40 28 	call	0x5080	; 0x5080 <_ZNK6String7indexOfERKS_j>
    50c4:	08 95       	ret

000050c6 <_ZNK6String6equalsEPKc>:
    50c6:	dc 01       	movw	r26, r24
    50c8:	fb 01       	movw	r30, r22
    50ca:	14 96       	adiw	r26, 0x04	; 4
    50cc:	8d 91       	ld	r24, X+
    50ce:	9c 91       	ld	r25, X
    50d0:	15 97       	sbiw	r26, 0x05	; 5
    50d2:	89 2b       	or	r24, r25
    50d4:	31 f4       	brne	.+12     	; 0x50e2 <_ZNK6String6equalsEPKc+0x1c>
    50d6:	61 15       	cp	r22, r1
    50d8:	71 05       	cpc	r23, r1
    50da:	a9 f0       	breq	.+42     	; 0x5106 <_ZNK6String6equalsEPKc+0x40>
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	80 81       	ld	r24, Z
    50e0:	08 c0       	rjmp	.+16     	; 0x50f2 <_ZNK6String6equalsEPKc+0x2c>
    50e2:	0d 90       	ld	r0, X+
    50e4:	bc 91       	ld	r27, X
    50e6:	a0 2d       	mov	r26, r0
    50e8:	61 15       	cp	r22, r1
    50ea:	71 05       	cpc	r23, r1
    50ec:	29 f4       	brne	.+10     	; 0x50f8 <_ZNK6String6equalsEPKc+0x32>
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	8c 91       	ld	r24, X
    50f2:	88 23       	and	r24, r24
    50f4:	49 f4       	brne	.+18     	; 0x5108 <_ZNK6String6equalsEPKc+0x42>
    50f6:	07 c0       	rjmp	.+14     	; 0x5106 <_ZNK6String6equalsEPKc+0x40>
    50f8:	cd 01       	movw	r24, r26
    50fa:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <strcmp>
    50fe:	9c 01       	movw	r18, r24
    5100:	90 e0       	ldi	r25, 0x00	; 0
    5102:	23 2b       	or	r18, r19
    5104:	09 f4       	brne	.+2      	; 0x5108 <_ZNK6String6equalsEPKc+0x42>
    5106:	91 e0       	ldi	r25, 0x01	; 1
    5108:	89 2f       	mov	r24, r25
    510a:	08 95       	ret

0000510c <_ZN6String12changeBufferEj>:
    510c:	0f 93       	push	r16
    510e:	1f 93       	push	r17
    5110:	cf 93       	push	r28
    5112:	df 93       	push	r29
    5114:	ec 01       	movw	r28, r24
    5116:	8b 01       	movw	r16, r22
    5118:	6f 5f       	subi	r22, 0xFF	; 255
    511a:	7f 4f       	sbci	r23, 0xFF	; 255
    511c:	88 81       	ld	r24, Y
    511e:	99 81       	ldd	r25, Y+1	; 0x01
    5120:	0e 94 a9 2d 	call	0x5b52	; 0x5b52 <realloc>
    5124:	00 97       	sbiw	r24, 0x00	; 0
    5126:	11 f4       	brne	.+4      	; 0x512c <_ZN6String12changeBufferEj+0x20>
    5128:	80 e0       	ldi	r24, 0x00	; 0
    512a:	05 c0       	rjmp	.+10     	; 0x5136 <_ZN6String12changeBufferEj+0x2a>
    512c:	99 83       	std	Y+1, r25	; 0x01
    512e:	88 83       	st	Y, r24
    5130:	1b 83       	std	Y+3, r17	; 0x03
    5132:	0a 83       	std	Y+2, r16	; 0x02
    5134:	81 e0       	ldi	r24, 0x01	; 1
    5136:	df 91       	pop	r29
    5138:	cf 91       	pop	r28
    513a:	1f 91       	pop	r17
    513c:	0f 91       	pop	r16
    513e:	08 95       	ret

00005140 <_ZN6String7replaceERKS_S1_>:
    5140:	2f 92       	push	r2
    5142:	3f 92       	push	r3
    5144:	4f 92       	push	r4
    5146:	5f 92       	push	r5
    5148:	6f 92       	push	r6
    514a:	7f 92       	push	r7
    514c:	8f 92       	push	r8
    514e:	9f 92       	push	r9
    5150:	af 92       	push	r10
    5152:	bf 92       	push	r11
    5154:	cf 92       	push	r12
    5156:	df 92       	push	r13
    5158:	ef 92       	push	r14
    515a:	ff 92       	push	r15
    515c:	0f 93       	push	r16
    515e:	1f 93       	push	r17
    5160:	cf 93       	push	r28
    5162:	df 93       	push	r29
    5164:	5c 01       	movw	r10, r24
    5166:	2b 01       	movw	r4, r22
    5168:	4a 01       	movw	r8, r20
    516a:	dc 01       	movw	r26, r24
    516c:	14 96       	adiw	r26, 0x04	; 4
    516e:	0d 91       	ld	r16, X+
    5170:	1c 91       	ld	r17, X
    5172:	15 97       	sbiw	r26, 0x05	; 5
    5174:	01 15       	cp	r16, r1
    5176:	11 05       	cpc	r17, r1
    5178:	09 f4       	brne	.+2      	; 0x517c <_ZN6String7replaceERKS_S1_+0x3c>
    517a:	d4 c0       	rjmp	.+424    	; 0x5324 <_ZN6String7replaceERKS_S1_+0x1e4>
    517c:	fb 01       	movw	r30, r22
    517e:	c4 80       	ldd	r12, Z+4	; 0x04
    5180:	d5 80       	ldd	r13, Z+5	; 0x05
    5182:	c1 14       	cp	r12, r1
    5184:	d1 04       	cpc	r13, r1
    5186:	09 f4       	brne	.+2      	; 0x518a <_ZN6String7replaceERKS_S1_+0x4a>
    5188:	cd c0       	rjmp	.+410    	; 0x5324 <_ZN6String7replaceERKS_S1_+0x1e4>
    518a:	da 01       	movw	r26, r20
    518c:	14 96       	adiw	r26, 0x04	; 4
    518e:	6d 90       	ld	r6, X+
    5190:	7c 90       	ld	r7, X
    5192:	15 97       	sbiw	r26, 0x05	; 5
    5194:	6c 18       	sub	r6, r12
    5196:	7d 08       	sbc	r7, r13
    5198:	fc 01       	movw	r30, r24
    519a:	e0 80       	ld	r14, Z
    519c:	f1 80       	ldd	r15, Z+1	; 0x01
    519e:	61 14       	cp	r6, r1
    51a0:	71 04       	cpc	r7, r1
    51a2:	91 f0       	breq	.+36     	; 0x51c8 <_ZN6String7replaceERKS_S1_+0x88>
    51a4:	1b c0       	rjmp	.+54     	; 0x51dc <_ZN6String7replaceERKS_S1_+0x9c>
    51a6:	d4 01       	movw	r26, r8
    51a8:	6c 91       	ld	r22, X
    51aa:	11 96       	adiw	r26, 0x01	; 1
    51ac:	7c 91       	ld	r23, X
    51ae:	11 97       	sbiw	r26, 0x01	; 1
    51b0:	14 96       	adiw	r26, 0x04	; 4
    51b2:	4d 91       	ld	r20, X+
    51b4:	5c 91       	ld	r21, X
    51b6:	15 97       	sbiw	r26, 0x05	; 5
    51b8:	8c 2f       	mov	r24, r28
    51ba:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <memcpy>
    51be:	f4 01       	movw	r30, r8
    51c0:	e4 80       	ldd	r14, Z+4	; 0x04
    51c2:	f5 80       	ldd	r15, Z+5	; 0x05
    51c4:	ec 0e       	add	r14, r28
    51c6:	fd 1e       	adc	r15, r29
    51c8:	d2 01       	movw	r26, r4
    51ca:	6d 91       	ld	r22, X+
    51cc:	7c 91       	ld	r23, X
    51ce:	c7 01       	movw	r24, r14
    51d0:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <strstr>
    51d4:	ec 01       	movw	r28, r24
    51d6:	00 97       	sbiw	r24, 0x00	; 0
    51d8:	31 f7       	brne	.-52     	; 0x51a6 <_ZN6String7replaceERKS_S1_+0x66>
    51da:	a4 c0       	rjmp	.+328    	; 0x5324 <_ZN6String7replaceERKS_S1_+0x1e4>
    51dc:	77 fe       	sbrs	r7, 7
    51de:	02 c0       	rjmp	.+4      	; 0x51e4 <_ZN6String7replaceERKS_S1_+0xa4>
    51e0:	67 01       	movw	r12, r14
    51e2:	2e c0       	rjmp	.+92     	; 0x5240 <_ZN6String7replaceERKS_S1_+0x100>
    51e4:	fb 01       	movw	r30, r22
    51e6:	20 80       	ld	r2, Z
    51e8:	31 80       	ldd	r3, Z+1	; 0x01
    51ea:	e8 01       	movw	r28, r16
    51ec:	3c c0       	rjmp	.+120    	; 0x5266 <_ZN6String7replaceERKS_S1_+0x126>
    51ee:	8e 01       	movw	r16, r28
    51f0:	0e 19       	sub	r16, r14
    51f2:	1f 09       	sbc	r17, r15
    51f4:	c6 01       	movw	r24, r12
    51f6:	b7 01       	movw	r22, r14
    51f8:	a8 01       	movw	r20, r16
    51fa:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <memcpy>
    51fe:	0c 0d       	add	r16, r12
    5200:	1d 1d       	adc	r17, r13
    5202:	d4 01       	movw	r26, r8
    5204:	6c 91       	ld	r22, X
    5206:	11 96       	adiw	r26, 0x01	; 1
    5208:	7c 91       	ld	r23, X
    520a:	11 97       	sbiw	r26, 0x01	; 1
    520c:	14 96       	adiw	r26, 0x04	; 4
    520e:	4d 91       	ld	r20, X+
    5210:	5c 91       	ld	r21, X
    5212:	15 97       	sbiw	r26, 0x05	; 5
    5214:	c8 01       	movw	r24, r16
    5216:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <memcpy>
    521a:	f4 01       	movw	r30, r8
    521c:	c4 80       	ldd	r12, Z+4	; 0x04
    521e:	d5 80       	ldd	r13, Z+5	; 0x05
    5220:	c0 0e       	add	r12, r16
    5222:	d1 1e       	adc	r13, r17
    5224:	d2 01       	movw	r26, r4
    5226:	14 96       	adiw	r26, 0x04	; 4
    5228:	ed 90       	ld	r14, X+
    522a:	fc 90       	ld	r15, X
    522c:	15 97       	sbiw	r26, 0x05	; 5
    522e:	ec 0e       	add	r14, r28
    5230:	fd 1e       	adc	r15, r29
    5232:	f5 01       	movw	r30, r10
    5234:	84 81       	ldd	r24, Z+4	; 0x04
    5236:	95 81       	ldd	r25, Z+5	; 0x05
    5238:	86 0d       	add	r24, r6
    523a:	97 1d       	adc	r25, r7
    523c:	95 83       	std	Z+5, r25	; 0x05
    523e:	84 83       	std	Z+4, r24	; 0x04
    5240:	d2 01       	movw	r26, r4
    5242:	6d 91       	ld	r22, X+
    5244:	7c 91       	ld	r23, X
    5246:	c7 01       	movw	r24, r14
    5248:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <strstr>
    524c:	ec 01       	movw	r28, r24
    524e:	00 97       	sbiw	r24, 0x00	; 0
    5250:	71 f6       	brne	.-100    	; 0x51ee <_ZN6String7replaceERKS_S1_+0xae>
    5252:	c6 01       	movw	r24, r12
    5254:	b7 01       	movw	r22, r14
    5256:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <strcpy>
    525a:	64 c0       	rjmp	.+200    	; 0x5324 <_ZN6String7replaceERKS_S1_+0x1e4>
    525c:	7b 01       	movw	r14, r22
    525e:	ec 0c       	add	r14, r12
    5260:	fd 1c       	adc	r15, r13
    5262:	c6 0d       	add	r28, r6
    5264:	d7 1d       	adc	r29, r7
    5266:	c7 01       	movw	r24, r14
    5268:	b1 01       	movw	r22, r2
    526a:	0e 94 ce 2e 	call	0x5d9c	; 0x5d9c <strstr>
    526e:	bc 01       	movw	r22, r24
    5270:	00 97       	sbiw	r24, 0x00	; 0
    5272:	a1 f7       	brne	.-24     	; 0x525c <_ZN6String7replaceERKS_S1_+0x11c>
    5274:	c0 17       	cp	r28, r16
    5276:	d1 07       	cpc	r29, r17
    5278:	09 f4       	brne	.+2      	; 0x527c <_ZN6String7replaceERKS_S1_+0x13c>
    527a:	54 c0       	rjmp	.+168    	; 0x5324 <_ZN6String7replaceERKS_S1_+0x1e4>
    527c:	f5 01       	movw	r30, r10
    527e:	82 81       	ldd	r24, Z+2	; 0x02
    5280:	93 81       	ldd	r25, Z+3	; 0x03
    5282:	8c 17       	cp	r24, r28
    5284:	9d 07       	cpc	r25, r29
    5286:	08 f0       	brcs	.+2      	; 0x528a <_ZN6String7replaceERKS_S1_+0x14a>
    5288:	44 c0       	rjmp	.+136    	; 0x5312 <_ZN6String7replaceERKS_S1_+0x1d2>
    528a:	c5 01       	movw	r24, r10
    528c:	be 01       	movw	r22, r28
    528e:	0e 94 86 28 	call	0x510c	; 0x510c <_ZN6String12changeBufferEj>
    5292:	88 23       	and	r24, r24
    5294:	f1 f5       	brne	.+124    	; 0x5312 <_ZN6String7replaceERKS_S1_+0x1d2>
    5296:	46 c0       	rjmp	.+140    	; 0x5324 <_ZN6String7replaceERKS_S1_+0x1e4>
    5298:	c5 01       	movw	r24, r10
    529a:	b2 01       	movw	r22, r4
    529c:	a9 01       	movw	r20, r18
    529e:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <_ZNK6String11lastIndexOfERKS_j>
    52a2:	ec 01       	movw	r28, r24
    52a4:	97 fd       	sbrc	r25, 7
    52a6:	3e c0       	rjmp	.+124    	; 0x5324 <_ZN6String7replaceERKS_S1_+0x1e4>
    52a8:	d5 01       	movw	r26, r10
    52aa:	6d 91       	ld	r22, X+
    52ac:	7c 91       	ld	r23, X
    52ae:	11 97       	sbiw	r26, 0x01	; 1
    52b0:	f2 01       	movw	r30, r4
    52b2:	84 81       	ldd	r24, Z+4	; 0x04
    52b4:	95 81       	ldd	r25, Z+5	; 0x05
    52b6:	8c 0f       	add	r24, r28
    52b8:	9d 1f       	adc	r25, r29
    52ba:	68 0f       	add	r22, r24
    52bc:	79 1f       	adc	r23, r25
    52be:	14 96       	adiw	r26, 0x04	; 4
    52c0:	4d 91       	ld	r20, X+
    52c2:	5c 91       	ld	r21, X
    52c4:	15 97       	sbiw	r26, 0x05	; 5
    52c6:	48 1b       	sub	r20, r24
    52c8:	59 0b       	sbc	r21, r25
    52ca:	cb 01       	movw	r24, r22
    52cc:	86 0d       	add	r24, r6
    52ce:	97 1d       	adc	r25, r7
    52d0:	0e 94 ac 2e 	call	0x5d58	; 0x5d58 <memmove>
    52d4:	d5 01       	movw	r26, r10
    52d6:	14 96       	adiw	r26, 0x04	; 4
    52d8:	8d 91       	ld	r24, X+
    52da:	9c 91       	ld	r25, X
    52dc:	15 97       	sbiw	r26, 0x05	; 5
    52de:	86 0d       	add	r24, r6
    52e0:	97 1d       	adc	r25, r7
    52e2:	15 96       	adiw	r26, 0x05	; 5
    52e4:	9c 93       	st	X, r25
    52e6:	8e 93       	st	-X, r24
    52e8:	14 97       	sbiw	r26, 0x04	; 4
    52ea:	ed 91       	ld	r30, X+
    52ec:	fc 91       	ld	r31, X
    52ee:	11 97       	sbiw	r26, 0x01	; 1
    52f0:	e8 0f       	add	r30, r24
    52f2:	f9 1f       	adc	r31, r25
    52f4:	10 82       	st	Z, r1
    52f6:	2d 91       	ld	r18, X+
    52f8:	3c 91       	ld	r19, X
    52fa:	2c 0f       	add	r18, r28
    52fc:	3d 1f       	adc	r19, r29
    52fe:	f4 01       	movw	r30, r8
    5300:	60 81       	ld	r22, Z
    5302:	71 81       	ldd	r23, Z+1	; 0x01
    5304:	44 81       	ldd	r20, Z+4	; 0x04
    5306:	55 81       	ldd	r21, Z+5	; 0x05
    5308:	c9 01       	movw	r24, r18
    530a:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <memcpy>
    530e:	9e 01       	movw	r18, r28
    5310:	05 c0       	rjmp	.+10     	; 0x531c <_ZN6String7replaceERKS_S1_+0x1dc>
    5312:	d5 01       	movw	r26, r10
    5314:	14 96       	adiw	r26, 0x04	; 4
    5316:	2d 91       	ld	r18, X+
    5318:	3c 91       	ld	r19, X
    531a:	15 97       	sbiw	r26, 0x05	; 5
    531c:	21 50       	subi	r18, 0x01	; 1
    531e:	30 40       	sbci	r19, 0x00	; 0
    5320:	37 ff       	sbrs	r19, 7
    5322:	ba cf       	rjmp	.-140    	; 0x5298 <_ZN6String7replaceERKS_S1_+0x158>
    5324:	df 91       	pop	r29
    5326:	cf 91       	pop	r28
    5328:	1f 91       	pop	r17
    532a:	0f 91       	pop	r16
    532c:	ff 90       	pop	r15
    532e:	ef 90       	pop	r14
    5330:	df 90       	pop	r13
    5332:	cf 90       	pop	r12
    5334:	bf 90       	pop	r11
    5336:	af 90       	pop	r10
    5338:	9f 90       	pop	r9
    533a:	8f 90       	pop	r8
    533c:	7f 90       	pop	r7
    533e:	6f 90       	pop	r6
    5340:	5f 90       	pop	r5
    5342:	4f 90       	pop	r4
    5344:	3f 90       	pop	r3
    5346:	2f 90       	pop	r2
    5348:	08 95       	ret

0000534a <_ZN6String7reserveEj>:
    534a:	cf 93       	push	r28
    534c:	df 93       	push	r29
    534e:	ec 01       	movw	r28, r24
    5350:	88 81       	ld	r24, Y
    5352:	99 81       	ldd	r25, Y+1	; 0x01
    5354:	89 2b       	or	r24, r25
    5356:	29 f0       	breq	.+10     	; 0x5362 <_ZN6String7reserveEj+0x18>
    5358:	8a 81       	ldd	r24, Y+2	; 0x02
    535a:	9b 81       	ldd	r25, Y+3	; 0x03
    535c:	86 17       	cp	r24, r22
    535e:	97 07       	cpc	r25, r23
    5360:	60 f4       	brcc	.+24     	; 0x537a <_ZN6String7reserveEj+0x30>
    5362:	ce 01       	movw	r24, r28
    5364:	0e 94 86 28 	call	0x510c	; 0x510c <_ZN6String12changeBufferEj>
    5368:	88 23       	and	r24, r24
    536a:	41 f0       	breq	.+16     	; 0x537c <_ZN6String7reserveEj+0x32>
    536c:	8c 81       	ldd	r24, Y+4	; 0x04
    536e:	9d 81       	ldd	r25, Y+5	; 0x05
    5370:	89 2b       	or	r24, r25
    5372:	19 f4       	brne	.+6      	; 0x537a <_ZN6String7reserveEj+0x30>
    5374:	e8 81       	ld	r30, Y
    5376:	f9 81       	ldd	r31, Y+1	; 0x01
    5378:	10 82       	st	Z, r1
    537a:	81 e0       	ldi	r24, 0x01	; 1
    537c:	df 91       	pop	r29
    537e:	cf 91       	pop	r28
    5380:	08 95       	ret

00005382 <_ZN6String6concatEPKcj>:
    5382:	ef 92       	push	r14
    5384:	ff 92       	push	r15
    5386:	0f 93       	push	r16
    5388:	1f 93       	push	r17
    538a:	cf 93       	push	r28
    538c:	df 93       	push	r29
    538e:	ec 01       	movw	r28, r24
    5390:	7b 01       	movw	r14, r22
    5392:	6c 81       	ldd	r22, Y+4	; 0x04
    5394:	7d 81       	ldd	r23, Y+5	; 0x05
    5396:	e1 14       	cp	r14, r1
    5398:	f1 04       	cpc	r15, r1
    539a:	c1 f0       	breq	.+48     	; 0x53cc <_ZN6String6concatEPKcj+0x4a>
    539c:	41 15       	cp	r20, r1
    539e:	51 05       	cpc	r21, r1
    53a0:	99 f0       	breq	.+38     	; 0x53c8 <_ZN6String6concatEPKcj+0x46>
    53a2:	8a 01       	movw	r16, r20
    53a4:	06 0f       	add	r16, r22
    53a6:	17 1f       	adc	r17, r23
    53a8:	b8 01       	movw	r22, r16
    53aa:	0e 94 a5 29 	call	0x534a	; 0x534a <_ZN6String7reserveEj>
    53ae:	88 23       	and	r24, r24
    53b0:	69 f0       	breq	.+26     	; 0x53cc <_ZN6String6concatEPKcj+0x4a>
    53b2:	88 81       	ld	r24, Y
    53b4:	99 81       	ldd	r25, Y+1	; 0x01
    53b6:	2c 81       	ldd	r18, Y+4	; 0x04
    53b8:	3d 81       	ldd	r19, Y+5	; 0x05
    53ba:	82 0f       	add	r24, r18
    53bc:	93 1f       	adc	r25, r19
    53be:	b7 01       	movw	r22, r14
    53c0:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <strcpy>
    53c4:	1d 83       	std	Y+5, r17	; 0x05
    53c6:	0c 83       	std	Y+4, r16	; 0x04
    53c8:	81 e0       	ldi	r24, 0x01	; 1
    53ca:	01 c0       	rjmp	.+2      	; 0x53ce <_ZN6String6concatEPKcj+0x4c>
    53cc:	80 e0       	ldi	r24, 0x00	; 0
    53ce:	df 91       	pop	r29
    53d0:	cf 91       	pop	r28
    53d2:	1f 91       	pop	r17
    53d4:	0f 91       	pop	r16
    53d6:	ff 90       	pop	r15
    53d8:	ef 90       	pop	r14
    53da:	08 95       	ret

000053dc <_ZN6String6concatEPKc>:
    53dc:	61 15       	cp	r22, r1
    53de:	71 05       	cpc	r23, r1
    53e0:	11 f4       	brne	.+4      	; 0x53e6 <_ZN6String6concatEPKc+0xa>
    53e2:	80 e0       	ldi	r24, 0x00	; 0
    53e4:	08 95       	ret
    53e6:	db 01       	movw	r26, r22
    53e8:	0d 90       	ld	r0, X+
    53ea:	00 20       	and	r0, r0
    53ec:	e9 f7       	brne	.-6      	; 0x53e8 <_ZN6String6concatEPKc+0xc>
    53ee:	11 97       	sbiw	r26, 0x01	; 1
    53f0:	a6 1b       	sub	r26, r22
    53f2:	b7 0b       	sbc	r27, r23
    53f4:	ad 01       	movw	r20, r26
    53f6:	0e 94 c1 29 	call	0x5382	; 0x5382 <_ZN6String6concatEPKcj>
    53fa:	08 95       	ret

000053fc <_ZN6String6concatERKS_>:
    53fc:	fb 01       	movw	r30, r22
    53fe:	60 81       	ld	r22, Z
    5400:	71 81       	ldd	r23, Z+1	; 0x01
    5402:	44 81       	ldd	r20, Z+4	; 0x04
    5404:	55 81       	ldd	r21, Z+5	; 0x05
    5406:	0e 94 c1 29 	call	0x5382	; 0x5382 <_ZN6String6concatEPKcj>
    540a:	08 95       	ret

0000540c <_ZN6String10invalidateEv>:
    540c:	cf 93       	push	r28
    540e:	df 93       	push	r29
    5410:	ec 01       	movw	r28, r24
    5412:	88 81       	ld	r24, Y
    5414:	99 81       	ldd	r25, Y+1	; 0x01
    5416:	00 97       	sbiw	r24, 0x00	; 0
    5418:	11 f0       	breq	.+4      	; 0x541e <_ZN6String10invalidateEv+0x12>
    541a:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <free>
    541e:	19 82       	std	Y+1, r1	; 0x01
    5420:	18 82       	st	Y, r1
    5422:	1d 82       	std	Y+5, r1	; 0x05
    5424:	1c 82       	std	Y+4, r1	; 0x04
    5426:	1b 82       	std	Y+3, r1	; 0x03
    5428:	1a 82       	std	Y+2, r1	; 0x02
    542a:	df 91       	pop	r29
    542c:	cf 91       	pop	r28
    542e:	08 95       	ret

00005430 <_ZplRK15StringSumHelperPKc>:
    5430:	0f 93       	push	r16
    5432:	1f 93       	push	r17
    5434:	18 2f       	mov	r17, r24
    5436:	09 2f       	mov	r16, r25
    5438:	61 15       	cp	r22, r1
    543a:	71 05       	cpc	r23, r1
    543c:	61 f0       	breq	.+24     	; 0x5456 <_ZplRK15StringSumHelperPKc+0x26>
    543e:	db 01       	movw	r26, r22
    5440:	0d 90       	ld	r0, X+
    5442:	00 20       	and	r0, r0
    5444:	e9 f7       	brne	.-6      	; 0x5440 <_ZplRK15StringSumHelperPKc+0x10>
    5446:	11 97       	sbiw	r26, 0x01	; 1
    5448:	a6 1b       	sub	r26, r22
    544a:	b7 0b       	sbc	r27, r23
    544c:	ad 01       	movw	r20, r26
    544e:	0e 94 c1 29 	call	0x5382	; 0x5382 <_ZN6String6concatEPKcj>
    5452:	88 23       	and	r24, r24
    5454:	21 f4       	brne	.+8      	; 0x545e <_ZplRK15StringSumHelperPKc+0x2e>
    5456:	81 2f       	mov	r24, r17
    5458:	90 2f       	mov	r25, r16
    545a:	0e 94 06 2a 	call	0x540c	; 0x540c <_ZN6String10invalidateEv>
    545e:	81 2f       	mov	r24, r17
    5460:	90 2f       	mov	r25, r16
    5462:	1f 91       	pop	r17
    5464:	0f 91       	pop	r16
    5466:	08 95       	ret

00005468 <_ZplRK15StringSumHelperRK6String>:
    5468:	0f 93       	push	r16
    546a:	1f 93       	push	r17
    546c:	18 2f       	mov	r17, r24
    546e:	09 2f       	mov	r16, r25
    5470:	fb 01       	movw	r30, r22
    5472:	60 81       	ld	r22, Z
    5474:	71 81       	ldd	r23, Z+1	; 0x01
    5476:	44 81       	ldd	r20, Z+4	; 0x04
    5478:	55 81       	ldd	r21, Z+5	; 0x05
    547a:	0e 94 c1 29 	call	0x5382	; 0x5382 <_ZN6String6concatEPKcj>
    547e:	88 23       	and	r24, r24
    5480:	21 f4       	brne	.+8      	; 0x548a <_ZplRK15StringSumHelperRK6String+0x22>
    5482:	81 2f       	mov	r24, r17
    5484:	90 2f       	mov	r25, r16
    5486:	0e 94 06 2a 	call	0x540c	; 0x540c <_ZN6String10invalidateEv>
    548a:	81 2f       	mov	r24, r17
    548c:	90 2f       	mov	r25, r16
    548e:	1f 91       	pop	r17
    5490:	0f 91       	pop	r16
    5492:	08 95       	ret

00005494 <_ZN6String4copyEPKcj>:
    5494:	ef 92       	push	r14
    5496:	ff 92       	push	r15
    5498:	0f 93       	push	r16
    549a:	1f 93       	push	r17
    549c:	cf 93       	push	r28
    549e:	df 93       	push	r29
    54a0:	ec 01       	movw	r28, r24
    54a2:	7b 01       	movw	r14, r22
    54a4:	8a 01       	movw	r16, r20
    54a6:	ba 01       	movw	r22, r20
    54a8:	0e 94 a5 29 	call	0x534a	; 0x534a <_ZN6String7reserveEj>
    54ac:	88 23       	and	r24, r24
    54ae:	21 f4       	brne	.+8      	; 0x54b8 <_ZN6String4copyEPKcj+0x24>
    54b0:	ce 01       	movw	r24, r28
    54b2:	0e 94 06 2a 	call	0x540c	; 0x540c <_ZN6String10invalidateEv>
    54b6:	07 c0       	rjmp	.+14     	; 0x54c6 <_ZN6String4copyEPKcj+0x32>
    54b8:	1d 83       	std	Y+5, r17	; 0x05
    54ba:	0c 83       	std	Y+4, r16	; 0x04
    54bc:	88 81       	ld	r24, Y
    54be:	99 81       	ldd	r25, Y+1	; 0x01
    54c0:	b7 01       	movw	r22, r14
    54c2:	0e 94 c7 2e 	call	0x5d8e	; 0x5d8e <strcpy>
    54c6:	ce 01       	movw	r24, r28
    54c8:	df 91       	pop	r29
    54ca:	cf 91       	pop	r28
    54cc:	1f 91       	pop	r17
    54ce:	0f 91       	pop	r16
    54d0:	ff 90       	pop	r15
    54d2:	ef 90       	pop	r14
    54d4:	08 95       	ret

000054d6 <_ZN6StringC1EPKc>:
    54d6:	cf 93       	push	r28
    54d8:	df 93       	push	r29
    54da:	ec 01       	movw	r28, r24
    54dc:	19 82       	std	Y+1, r1	; 0x01
    54de:	18 82       	st	Y, r1
    54e0:	1b 82       	std	Y+3, r1	; 0x03
    54e2:	1a 82       	std	Y+2, r1	; 0x02
    54e4:	1d 82       	std	Y+5, r1	; 0x05
    54e6:	1c 82       	std	Y+4, r1	; 0x04
    54e8:	1e 82       	std	Y+6, r1	; 0x06
    54ea:	61 15       	cp	r22, r1
    54ec:	71 05       	cpc	r23, r1
    54ee:	51 f0       	breq	.+20     	; 0x5504 <_ZN6StringC1EPKc+0x2e>
    54f0:	db 01       	movw	r26, r22
    54f2:	0d 90       	ld	r0, X+
    54f4:	00 20       	and	r0, r0
    54f6:	e9 f7       	brne	.-6      	; 0x54f2 <_ZN6StringC1EPKc+0x1c>
    54f8:	11 97       	sbiw	r26, 0x01	; 1
    54fa:	a6 1b       	sub	r26, r22
    54fc:	b7 0b       	sbc	r27, r23
    54fe:	ad 01       	movw	r20, r26
    5500:	0e 94 4a 2a 	call	0x5494	; 0x5494 <_ZN6String4copyEPKcj>
    5504:	df 91       	pop	r29
    5506:	cf 91       	pop	r28
    5508:	08 95       	ret

0000550a <_ZN6StringC2EPKc>:
    550a:	cf 93       	push	r28
    550c:	df 93       	push	r29
    550e:	ec 01       	movw	r28, r24
    5510:	19 82       	std	Y+1, r1	; 0x01
    5512:	18 82       	st	Y, r1
    5514:	1b 82       	std	Y+3, r1	; 0x03
    5516:	1a 82       	std	Y+2, r1	; 0x02
    5518:	1d 82       	std	Y+5, r1	; 0x05
    551a:	1c 82       	std	Y+4, r1	; 0x04
    551c:	1e 82       	std	Y+6, r1	; 0x06
    551e:	61 15       	cp	r22, r1
    5520:	71 05       	cpc	r23, r1
    5522:	51 f0       	breq	.+20     	; 0x5538 <_ZN6StringC2EPKc+0x2e>
    5524:	db 01       	movw	r26, r22
    5526:	0d 90       	ld	r0, X+
    5528:	00 20       	and	r0, r0
    552a:	e9 f7       	brne	.-6      	; 0x5526 <_ZN6StringC2EPKc+0x1c>
    552c:	11 97       	sbiw	r26, 0x01	; 1
    552e:	a6 1b       	sub	r26, r22
    5530:	b7 0b       	sbc	r27, r23
    5532:	ad 01       	movw	r20, r26
    5534:	0e 94 4a 2a 	call	0x5494	; 0x5494 <_ZN6String4copyEPKcj>
    5538:	df 91       	pop	r29
    553a:	cf 91       	pop	r28
    553c:	08 95       	ret

0000553e <_ZN6StringaSEPKc>:
    553e:	0f 93       	push	r16
    5540:	1f 93       	push	r17
    5542:	18 2f       	mov	r17, r24
    5544:	09 2f       	mov	r16, r25
    5546:	61 15       	cp	r22, r1
    5548:	71 05       	cpc	r23, r1
    554a:	59 f0       	breq	.+22     	; 0x5562 <_ZN6StringaSEPKc+0x24>
    554c:	db 01       	movw	r26, r22
    554e:	0d 90       	ld	r0, X+
    5550:	00 20       	and	r0, r0
    5552:	e9 f7       	brne	.-6      	; 0x554e <_ZN6StringaSEPKc+0x10>
    5554:	11 97       	sbiw	r26, 0x01	; 1
    5556:	a6 1b       	sub	r26, r22
    5558:	b7 0b       	sbc	r27, r23
    555a:	ad 01       	movw	r20, r26
    555c:	0e 94 4a 2a 	call	0x5494	; 0x5494 <_ZN6String4copyEPKcj>
    5560:	02 c0       	rjmp	.+4      	; 0x5566 <_ZN6StringaSEPKc+0x28>
    5562:	0e 94 06 2a 	call	0x540c	; 0x540c <_ZN6String10invalidateEv>
    5566:	81 2f       	mov	r24, r17
    5568:	90 2f       	mov	r25, r16
    556a:	1f 91       	pop	r17
    556c:	0f 91       	pop	r16
    556e:	08 95       	ret

00005570 <_ZN6StringC1Emh>:
    5570:	ef 92       	push	r14
    5572:	ff 92       	push	r15
    5574:	0f 93       	push	r16
    5576:	1f 93       	push	r17
    5578:	df 93       	push	r29
    557a:	cf 93       	push	r28
    557c:	cd b7       	in	r28, 0x3d	; 61
    557e:	de b7       	in	r29, 0x3e	; 62
    5580:	a1 97       	sbiw	r28, 0x21	; 33
    5582:	0f b6       	in	r0, 0x3f	; 63
    5584:	f8 94       	cli
    5586:	de bf       	out	0x3e, r29	; 62
    5588:	0f be       	out	0x3f, r0	; 63
    558a:	cd bf       	out	0x3d, r28	; 61
    558c:	8c 01       	movw	r16, r24
    558e:	fc 01       	movw	r30, r24
    5590:	11 82       	std	Z+1, r1	; 0x01
    5592:	10 82       	st	Z, r1
    5594:	13 82       	std	Z+3, r1	; 0x03
    5596:	12 82       	std	Z+2, r1	; 0x02
    5598:	15 82       	std	Z+5, r1	; 0x05
    559a:	14 82       	std	Z+4, r1	; 0x04
    559c:	16 82       	std	Z+6, r1	; 0x06
    559e:	cb 01       	movw	r24, r22
    55a0:	ba 01       	movw	r22, r20
    55a2:	7e 01       	movw	r14, r28
    55a4:	08 94       	sec
    55a6:	e1 1c       	adc	r14, r1
    55a8:	f1 1c       	adc	r15, r1
    55aa:	a7 01       	movw	r20, r14
    55ac:	30 e0       	ldi	r19, 0x00	; 0
    55ae:	0e 94 1e 2f 	call	0x5e3c	; 0x5e3c <ultoa>
    55b2:	c8 01       	movw	r24, r16
    55b4:	b7 01       	movw	r22, r14
    55b6:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN6StringaSEPKc>
    55ba:	a1 96       	adiw	r28, 0x21	; 33
    55bc:	0f b6       	in	r0, 0x3f	; 63
    55be:	f8 94       	cli
    55c0:	de bf       	out	0x3e, r29	; 62
    55c2:	0f be       	out	0x3f, r0	; 63
    55c4:	cd bf       	out	0x3d, r28	; 61
    55c6:	cf 91       	pop	r28
    55c8:	df 91       	pop	r29
    55ca:	1f 91       	pop	r17
    55cc:	0f 91       	pop	r16
    55ce:	ff 90       	pop	r15
    55d0:	ef 90       	pop	r14
    55d2:	08 95       	ret

000055d4 <_ZN6StringC1Ejh>:
    55d4:	ef 92       	push	r14
    55d6:	ff 92       	push	r15
    55d8:	0f 93       	push	r16
    55da:	1f 93       	push	r17
    55dc:	df 93       	push	r29
    55de:	cf 93       	push	r28
    55e0:	cd b7       	in	r28, 0x3d	; 61
    55e2:	de b7       	in	r29, 0x3e	; 62
    55e4:	61 97       	sbiw	r28, 0x11	; 17
    55e6:	0f b6       	in	r0, 0x3f	; 63
    55e8:	f8 94       	cli
    55ea:	de bf       	out	0x3e, r29	; 62
    55ec:	0f be       	out	0x3f, r0	; 63
    55ee:	cd bf       	out	0x3d, r28	; 61
    55f0:	8c 01       	movw	r16, r24
    55f2:	cb 01       	movw	r24, r22
    55f4:	f8 01       	movw	r30, r16
    55f6:	11 82       	std	Z+1, r1	; 0x01
    55f8:	10 82       	st	Z, r1
    55fa:	13 82       	std	Z+3, r1	; 0x03
    55fc:	12 82       	std	Z+2, r1	; 0x02
    55fe:	15 82       	std	Z+5, r1	; 0x05
    5600:	14 82       	std	Z+4, r1	; 0x04
    5602:	16 82       	std	Z+6, r1	; 0x06
    5604:	7e 01       	movw	r14, r28
    5606:	08 94       	sec
    5608:	e1 1c       	adc	r14, r1
    560a:	f1 1c       	adc	r15, r1
    560c:	b7 01       	movw	r22, r14
    560e:	50 e0       	ldi	r21, 0x00	; 0
    5610:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <utoa>
    5614:	c8 01       	movw	r24, r16
    5616:	b7 01       	movw	r22, r14
    5618:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN6StringaSEPKc>
    561c:	61 96       	adiw	r28, 0x11	; 17
    561e:	0f b6       	in	r0, 0x3f	; 63
    5620:	f8 94       	cli
    5622:	de bf       	out	0x3e, r29	; 62
    5624:	0f be       	out	0x3f, r0	; 63
    5626:	cd bf       	out	0x3d, r28	; 61
    5628:	cf 91       	pop	r28
    562a:	df 91       	pop	r29
    562c:	1f 91       	pop	r17
    562e:	0f 91       	pop	r16
    5630:	ff 90       	pop	r15
    5632:	ef 90       	pop	r14
    5634:	08 95       	ret

00005636 <_ZN6StringC1Eih>:
    5636:	ef 92       	push	r14
    5638:	ff 92       	push	r15
    563a:	0f 93       	push	r16
    563c:	1f 93       	push	r17
    563e:	df 93       	push	r29
    5640:	cf 93       	push	r28
    5642:	cd b7       	in	r28, 0x3d	; 61
    5644:	de b7       	in	r29, 0x3e	; 62
    5646:	62 97       	sbiw	r28, 0x12	; 18
    5648:	0f b6       	in	r0, 0x3f	; 63
    564a:	f8 94       	cli
    564c:	de bf       	out	0x3e, r29	; 62
    564e:	0f be       	out	0x3f, r0	; 63
    5650:	cd bf       	out	0x3d, r28	; 61
    5652:	8c 01       	movw	r16, r24
    5654:	cb 01       	movw	r24, r22
    5656:	f8 01       	movw	r30, r16
    5658:	11 82       	std	Z+1, r1	; 0x01
    565a:	10 82       	st	Z, r1
    565c:	13 82       	std	Z+3, r1	; 0x03
    565e:	12 82       	std	Z+2, r1	; 0x02
    5660:	15 82       	std	Z+5, r1	; 0x05
    5662:	14 82       	std	Z+4, r1	; 0x04
    5664:	16 82       	std	Z+6, r1	; 0x06
    5666:	7e 01       	movw	r14, r28
    5668:	08 94       	sec
    566a:	e1 1c       	adc	r14, r1
    566c:	f1 1c       	adc	r15, r1
    566e:	b7 01       	movw	r22, r14
    5670:	50 e0       	ldi	r21, 0x00	; 0
    5672:	0e 94 e8 2e 	call	0x5dd0	; 0x5dd0 <itoa>
    5676:	c8 01       	movw	r24, r16
    5678:	b7 01       	movw	r22, r14
    567a:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN6StringaSEPKc>
    567e:	62 96       	adiw	r28, 0x12	; 18
    5680:	0f b6       	in	r0, 0x3f	; 63
    5682:	f8 94       	cli
    5684:	de bf       	out	0x3e, r29	; 62
    5686:	0f be       	out	0x3f, r0	; 63
    5688:	cd bf       	out	0x3d, r28	; 61
    568a:	cf 91       	pop	r28
    568c:	df 91       	pop	r29
    568e:	1f 91       	pop	r17
    5690:	0f 91       	pop	r16
    5692:	ff 90       	pop	r15
    5694:	ef 90       	pop	r14
    5696:	08 95       	ret

00005698 <_ZN6StringC1Ec>:
    5698:	df 93       	push	r29
    569a:	cf 93       	push	r28
    569c:	00 d0       	rcall	.+0      	; 0x569e <_ZN6StringC1Ec+0x6>
    569e:	cd b7       	in	r28, 0x3d	; 61
    56a0:	de b7       	in	r29, 0x3e	; 62
    56a2:	fc 01       	movw	r30, r24
    56a4:	11 82       	std	Z+1, r1	; 0x01
    56a6:	10 82       	st	Z, r1
    56a8:	13 82       	std	Z+3, r1	; 0x03
    56aa:	12 82       	std	Z+2, r1	; 0x02
    56ac:	15 82       	std	Z+5, r1	; 0x05
    56ae:	14 82       	std	Z+4, r1	; 0x04
    56b0:	16 82       	std	Z+6, r1	; 0x06
    56b2:	69 83       	std	Y+1, r22	; 0x01
    56b4:	1a 82       	std	Y+2, r1	; 0x02
    56b6:	be 01       	movw	r22, r28
    56b8:	6f 5f       	subi	r22, 0xFF	; 255
    56ba:	7f 4f       	sbci	r23, 0xFF	; 255
    56bc:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN6StringaSEPKc>
    56c0:	0f 90       	pop	r0
    56c2:	0f 90       	pop	r0
    56c4:	cf 91       	pop	r28
    56c6:	df 91       	pop	r29
    56c8:	08 95       	ret

000056ca <_ZNK6String9substringEjj>:
    56ca:	bf 92       	push	r11
    56cc:	cf 92       	push	r12
    56ce:	df 92       	push	r13
    56d0:	ef 92       	push	r14
    56d2:	ff 92       	push	r15
    56d4:	0f 93       	push	r16
    56d6:	1f 93       	push	r17
    56d8:	cf 93       	push	r28
    56da:	df 93       	push	r29
    56dc:	08 2f       	mov	r16, r24
    56de:	b9 2e       	mov	r11, r25
    56e0:	6b 01       	movw	r12, r22
    56e2:	7a 01       	movw	r14, r20
    56e4:	e9 01       	movw	r28, r18
    56e6:	24 17       	cp	r18, r20
    56e8:	35 07       	cpc	r19, r21
    56ea:	10 f4       	brcc	.+4      	; 0x56f0 <_ZNK6String9substringEjj+0x26>
    56ec:	ea 01       	movw	r28, r20
    56ee:	79 01       	movw	r14, r18
    56f0:	80 2f       	mov	r24, r16
    56f2:	9b 2d       	mov	r25, r11
    56f4:	6a ec       	ldi	r22, 0xCA	; 202
    56f6:	73 e0       	ldi	r23, 0x03	; 3
    56f8:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <_ZN6StringC1EPKc>
    56fc:	d6 01       	movw	r26, r12
    56fe:	14 96       	adiw	r26, 0x04	; 4
    5700:	8d 91       	ld	r24, X+
    5702:	9c 91       	ld	r25, X
    5704:	15 97       	sbiw	r26, 0x05	; 5
    5706:	8e 15       	cp	r24, r14
    5708:	9f 05       	cpc	r25, r15
    570a:	d0 f0       	brcs	.+52     	; 0x5740 <_ZNK6String9substringEjj+0x76>
    570c:	8c 17       	cp	r24, r28
    570e:	9d 07       	cpc	r25, r29
    5710:	08 f4       	brcc	.+2      	; 0x5714 <_ZNK6String9substringEjj+0x4a>
    5712:	ec 01       	movw	r28, r24
    5714:	d6 01       	movw	r26, r12
    5716:	ed 91       	ld	r30, X+
    5718:	fc 91       	ld	r31, X
    571a:	11 97       	sbiw	r26, 0x01	; 1
    571c:	ec 0f       	add	r30, r28
    571e:	fd 1f       	adc	r31, r29
    5720:	10 81       	ld	r17, Z
    5722:	10 82       	st	Z, r1
    5724:	6d 91       	ld	r22, X+
    5726:	7c 91       	ld	r23, X
    5728:	6e 0d       	add	r22, r14
    572a:	7f 1d       	adc	r23, r15
    572c:	80 2f       	mov	r24, r16
    572e:	9b 2d       	mov	r25, r11
    5730:	0e 94 9f 2a 	call	0x553e	; 0x553e <_ZN6StringaSEPKc>
    5734:	d6 01       	movw	r26, r12
    5736:	ed 91       	ld	r30, X+
    5738:	fc 91       	ld	r31, X
    573a:	ec 0f       	add	r30, r28
    573c:	fd 1f       	adc	r31, r29
    573e:	10 83       	st	Z, r17
    5740:	80 2f       	mov	r24, r16
    5742:	9b 2d       	mov	r25, r11
    5744:	df 91       	pop	r29
    5746:	cf 91       	pop	r28
    5748:	1f 91       	pop	r17
    574a:	0f 91       	pop	r16
    574c:	ff 90       	pop	r15
    574e:	ef 90       	pop	r14
    5750:	df 90       	pop	r13
    5752:	cf 90       	pop	r12
    5754:	bf 90       	pop	r11
    5756:	08 95       	ret

00005758 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
    5758:	cf 93       	push	r28
    575a:	df 93       	push	r29
    575c:	ec 01       	movw	r28, r24
    575e:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
    5760:	86 17       	cp	r24, r22
    5762:	97 07       	cpc	r25, r23
    5764:	61 f0       	breq	.+24     	; 0x577e <_ZN6StringaSERKS_+0x26>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    5766:	60 81       	ld	r22, Z
    5768:	71 81       	ldd	r23, Z+1	; 0x01
    576a:	61 15       	cp	r22, r1
    576c:	71 05       	cpc	r23, r1
    576e:	29 f0       	breq	.+10     	; 0x577a <_ZN6StringaSERKS_+0x22>
    5770:	44 81       	ldd	r20, Z+4	; 0x04
    5772:	55 81       	ldd	r21, Z+5	; 0x05
    5774:	0e 94 4a 2a 	call	0x5494	; 0x5494 <_ZN6String4copyEPKcj>
    5778:	02 c0       	rjmp	.+4      	; 0x577e <_ZN6StringaSERKS_+0x26>
	else invalidate();
    577a:	0e 94 06 2a 	call	0x540c	; 0x540c <_ZN6String10invalidateEv>
	
	return *this;
}
    577e:	ce 01       	movw	r24, r28
    5780:	df 91       	pop	r29
    5782:	cf 91       	pop	r28
    5784:	08 95       	ret

00005786 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    5786:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5788:	11 82       	std	Z+1, r1	; 0x01
    578a:	10 82       	st	Z, r1
	capacity = 0;
    578c:	13 82       	std	Z+3, r1	; 0x03
    578e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    5790:	15 82       	std	Z+5, r1	; 0x05
    5792:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    5794:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    5796:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN6StringaSERKS_>
}
    579a:	08 95       	ret

0000579c <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    579c:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    579e:	11 82       	std	Z+1, r1	; 0x01
    57a0:	10 82       	st	Z, r1
	capacity = 0;
    57a2:	13 82       	std	Z+3, r1	; 0x03
    57a4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    57a6:	15 82       	std	Z+5, r1	; 0x05
    57a8:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    57aa:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    57ac:	0e 94 ac 2b 	call	0x5758	; 0x5758 <_ZN6StringaSERKS_>
}
    57b0:	08 95       	ret

000057b2 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    57b2:	fc 01       	movw	r30, r24
{
	free(buffer);
    57b4:	80 81       	ld	r24, Z
    57b6:	91 81       	ldd	r25, Z+1	; 0x01
    57b8:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <free>
}
    57bc:	08 95       	ret

000057be <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
    57be:	fc 01       	movw	r30, r24
{
	free(buffer);
    57c0:	80 81       	ld	r24, Z
    57c2:	91 81       	ldd	r25, Z+1	; 0x01
    57c4:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <free>
}
    57c8:	08 95       	ret

000057ca <__mulsi3>:
    57ca:	62 9f       	mul	r22, r18
    57cc:	d0 01       	movw	r26, r0
    57ce:	73 9f       	mul	r23, r19
    57d0:	f0 01       	movw	r30, r0
    57d2:	82 9f       	mul	r24, r18
    57d4:	e0 0d       	add	r30, r0
    57d6:	f1 1d       	adc	r31, r1
    57d8:	64 9f       	mul	r22, r20
    57da:	e0 0d       	add	r30, r0
    57dc:	f1 1d       	adc	r31, r1
    57de:	92 9f       	mul	r25, r18
    57e0:	f0 0d       	add	r31, r0
    57e2:	83 9f       	mul	r24, r19
    57e4:	f0 0d       	add	r31, r0
    57e6:	74 9f       	mul	r23, r20
    57e8:	f0 0d       	add	r31, r0
    57ea:	65 9f       	mul	r22, r21
    57ec:	f0 0d       	add	r31, r0
    57ee:	99 27       	eor	r25, r25
    57f0:	72 9f       	mul	r23, r18
    57f2:	b0 0d       	add	r27, r0
    57f4:	e1 1d       	adc	r30, r1
    57f6:	f9 1f       	adc	r31, r25
    57f8:	63 9f       	mul	r22, r19
    57fa:	b0 0d       	add	r27, r0
    57fc:	e1 1d       	adc	r30, r1
    57fe:	f9 1f       	adc	r31, r25
    5800:	bd 01       	movw	r22, r26
    5802:	cf 01       	movw	r24, r30
    5804:	11 24       	eor	r1, r1
    5806:	08 95       	ret

00005808 <__udivmodqi4>:
    5808:	99 1b       	sub	r25, r25
    580a:	79 e0       	ldi	r23, 0x09	; 9
    580c:	04 c0       	rjmp	.+8      	; 0x5816 <__udivmodqi4_ep>

0000580e <__udivmodqi4_loop>:
    580e:	99 1f       	adc	r25, r25
    5810:	96 17       	cp	r25, r22
    5812:	08 f0       	brcs	.+2      	; 0x5816 <__udivmodqi4_ep>
    5814:	96 1b       	sub	r25, r22

00005816 <__udivmodqi4_ep>:
    5816:	88 1f       	adc	r24, r24
    5818:	7a 95       	dec	r23
    581a:	c9 f7       	brne	.-14     	; 0x580e <__udivmodqi4_loop>
    581c:	80 95       	com	r24
    581e:	08 95       	ret

00005820 <__divmodhi4>:
    5820:	97 fb       	bst	r25, 7
    5822:	09 2e       	mov	r0, r25
    5824:	07 26       	eor	r0, r23
    5826:	0a d0       	rcall	.+20     	; 0x583c <__divmodhi4_neg1>
    5828:	77 fd       	sbrc	r23, 7
    582a:	04 d0       	rcall	.+8      	; 0x5834 <__divmodhi4_neg2>
    582c:	49 d0       	rcall	.+146    	; 0x58c0 <__udivmodhi4>
    582e:	06 d0       	rcall	.+12     	; 0x583c <__divmodhi4_neg1>
    5830:	00 20       	and	r0, r0
    5832:	1a f4       	brpl	.+6      	; 0x583a <__divmodhi4_exit>

00005834 <__divmodhi4_neg2>:
    5834:	70 95       	com	r23
    5836:	61 95       	neg	r22
    5838:	7f 4f       	sbci	r23, 0xFF	; 255

0000583a <__divmodhi4_exit>:
    583a:	08 95       	ret

0000583c <__divmodhi4_neg1>:
    583c:	f6 f7       	brtc	.-4      	; 0x583a <__divmodhi4_exit>
    583e:	90 95       	com	r25
    5840:	81 95       	neg	r24
    5842:	9f 4f       	sbci	r25, 0xFF	; 255
    5844:	08 95       	ret

00005846 <__udivmodsi4>:
    5846:	a1 e2       	ldi	r26, 0x21	; 33
    5848:	1a 2e       	mov	r1, r26
    584a:	aa 1b       	sub	r26, r26
    584c:	bb 1b       	sub	r27, r27
    584e:	fd 01       	movw	r30, r26
    5850:	0d c0       	rjmp	.+26     	; 0x586c <__udivmodsi4_ep>

00005852 <__udivmodsi4_loop>:
    5852:	aa 1f       	adc	r26, r26
    5854:	bb 1f       	adc	r27, r27
    5856:	ee 1f       	adc	r30, r30
    5858:	ff 1f       	adc	r31, r31
    585a:	a2 17       	cp	r26, r18
    585c:	b3 07       	cpc	r27, r19
    585e:	e4 07       	cpc	r30, r20
    5860:	f5 07       	cpc	r31, r21
    5862:	20 f0       	brcs	.+8      	; 0x586c <__udivmodsi4_ep>
    5864:	a2 1b       	sub	r26, r18
    5866:	b3 0b       	sbc	r27, r19
    5868:	e4 0b       	sbc	r30, r20
    586a:	f5 0b       	sbc	r31, r21

0000586c <__udivmodsi4_ep>:
    586c:	66 1f       	adc	r22, r22
    586e:	77 1f       	adc	r23, r23
    5870:	88 1f       	adc	r24, r24
    5872:	99 1f       	adc	r25, r25
    5874:	1a 94       	dec	r1
    5876:	69 f7       	brne	.-38     	; 0x5852 <__udivmodsi4_loop>
    5878:	60 95       	com	r22
    587a:	70 95       	com	r23
    587c:	80 95       	com	r24
    587e:	90 95       	com	r25
    5880:	9b 01       	movw	r18, r22
    5882:	ac 01       	movw	r20, r24
    5884:	bd 01       	movw	r22, r26
    5886:	cf 01       	movw	r24, r30
    5888:	08 95       	ret

0000588a <__divmodsi4>:
    588a:	97 fb       	bst	r25, 7
    588c:	09 2e       	mov	r0, r25
    588e:	05 26       	eor	r0, r21
    5890:	0e d0       	rcall	.+28     	; 0x58ae <__divmodsi4_neg1>
    5892:	57 fd       	sbrc	r21, 7
    5894:	04 d0       	rcall	.+8      	; 0x589e <__divmodsi4_neg2>
    5896:	d7 df       	rcall	.-82     	; 0x5846 <__udivmodsi4>
    5898:	0a d0       	rcall	.+20     	; 0x58ae <__divmodsi4_neg1>
    589a:	00 1c       	adc	r0, r0
    589c:	38 f4       	brcc	.+14     	; 0x58ac <__divmodsi4_exit>

0000589e <__divmodsi4_neg2>:
    589e:	50 95       	com	r21
    58a0:	40 95       	com	r20
    58a2:	30 95       	com	r19
    58a4:	21 95       	neg	r18
    58a6:	3f 4f       	sbci	r19, 0xFF	; 255
    58a8:	4f 4f       	sbci	r20, 0xFF	; 255
    58aa:	5f 4f       	sbci	r21, 0xFF	; 255

000058ac <__divmodsi4_exit>:
    58ac:	08 95       	ret

000058ae <__divmodsi4_neg1>:
    58ae:	f6 f7       	brtc	.-4      	; 0x58ac <__divmodsi4_exit>
    58b0:	90 95       	com	r25
    58b2:	80 95       	com	r24
    58b4:	70 95       	com	r23
    58b6:	61 95       	neg	r22
    58b8:	7f 4f       	sbci	r23, 0xFF	; 255
    58ba:	8f 4f       	sbci	r24, 0xFF	; 255
    58bc:	9f 4f       	sbci	r25, 0xFF	; 255
    58be:	08 95       	ret

000058c0 <__udivmodhi4>:
    58c0:	aa 1b       	sub	r26, r26
    58c2:	bb 1b       	sub	r27, r27
    58c4:	51 e1       	ldi	r21, 0x11	; 17
    58c6:	07 c0       	rjmp	.+14     	; 0x58d6 <__udivmodhi4_ep>

000058c8 <__udivmodhi4_loop>:
    58c8:	aa 1f       	adc	r26, r26
    58ca:	bb 1f       	adc	r27, r27
    58cc:	a6 17       	cp	r26, r22
    58ce:	b7 07       	cpc	r27, r23
    58d0:	10 f0       	brcs	.+4      	; 0x58d6 <__udivmodhi4_ep>
    58d2:	a6 1b       	sub	r26, r22
    58d4:	b7 0b       	sbc	r27, r23

000058d6 <__udivmodhi4_ep>:
    58d6:	88 1f       	adc	r24, r24
    58d8:	99 1f       	adc	r25, r25
    58da:	5a 95       	dec	r21
    58dc:	a9 f7       	brne	.-22     	; 0x58c8 <__udivmodhi4_loop>
    58de:	80 95       	com	r24
    58e0:	90 95       	com	r25
    58e2:	bc 01       	movw	r22, r24
    58e4:	cd 01       	movw	r24, r26
    58e6:	08 95       	ret

000058e8 <__tablejump2__>:
    58e8:	ee 0f       	add	r30, r30
    58ea:	ff 1f       	adc	r31, r31

000058ec <__tablejump__>:
    58ec:	05 90       	lpm	r0, Z+
    58ee:	f4 91       	lpm	r31, Z
    58f0:	e0 2d       	mov	r30, r0
    58f2:	09 94       	ijmp

000058f4 <malloc>:
    58f4:	cf 93       	push	r28
    58f6:	df 93       	push	r29
    58f8:	ac 01       	movw	r20, r24
    58fa:	82 30       	cpi	r24, 0x02	; 2
    58fc:	91 05       	cpc	r25, r1
    58fe:	10 f4       	brcc	.+4      	; 0x5904 <malloc+0x10>
    5900:	42 e0       	ldi	r20, 0x02	; 2
    5902:	50 e0       	ldi	r21, 0x00	; 0
    5904:	e0 91 3d 06 	lds	r30, 0x063D
    5908:	f0 91 3e 06 	lds	r31, 0x063E
    590c:	20 e0       	ldi	r18, 0x00	; 0
    590e:	30 e0       	ldi	r19, 0x00	; 0
    5910:	a0 e0       	ldi	r26, 0x00	; 0
    5912:	b0 e0       	ldi	r27, 0x00	; 0
    5914:	24 c0       	rjmp	.+72     	; 0x595e <malloc+0x6a>
    5916:	80 81       	ld	r24, Z
    5918:	91 81       	ldd	r25, Z+1	; 0x01
    591a:	84 17       	cp	r24, r20
    591c:	95 07       	cpc	r25, r21
    591e:	d0 f0       	brcs	.+52     	; 0x5954 <malloc+0x60>
    5920:	84 17       	cp	r24, r20
    5922:	95 07       	cpc	r25, r21
    5924:	71 f4       	brne	.+28     	; 0x5942 <malloc+0x4e>
    5926:	82 81       	ldd	r24, Z+2	; 0x02
    5928:	93 81       	ldd	r25, Z+3	; 0x03
    592a:	10 97       	sbiw	r26, 0x00	; 0
    592c:	29 f0       	breq	.+10     	; 0x5938 <malloc+0x44>
    592e:	13 96       	adiw	r26, 0x03	; 3
    5930:	9c 93       	st	X, r25
    5932:	8e 93       	st	-X, r24
    5934:	12 97       	sbiw	r26, 0x02	; 2
    5936:	2c c0       	rjmp	.+88     	; 0x5990 <malloc+0x9c>
    5938:	90 93 3e 06 	sts	0x063E, r25
    593c:	80 93 3d 06 	sts	0x063D, r24
    5940:	27 c0       	rjmp	.+78     	; 0x5990 <malloc+0x9c>
    5942:	21 15       	cp	r18, r1
    5944:	31 05       	cpc	r19, r1
    5946:	19 f0       	breq	.+6      	; 0x594e <malloc+0x5a>
    5948:	82 17       	cp	r24, r18
    594a:	93 07       	cpc	r25, r19
    594c:	18 f4       	brcc	.+6      	; 0x5954 <malloc+0x60>
    594e:	9c 01       	movw	r18, r24
    5950:	bd 01       	movw	r22, r26
    5952:	ef 01       	movw	r28, r30
    5954:	92 81       	ldd	r25, Z+2	; 0x02
    5956:	83 81       	ldd	r24, Z+3	; 0x03
    5958:	df 01       	movw	r26, r30
    595a:	e9 2f       	mov	r30, r25
    595c:	f8 2f       	mov	r31, r24
    595e:	30 97       	sbiw	r30, 0x00	; 0
    5960:	d1 f6       	brne	.-76     	; 0x5916 <malloc+0x22>
    5962:	21 15       	cp	r18, r1
    5964:	31 05       	cpc	r19, r1
    5966:	f9 f0       	breq	.+62     	; 0x59a6 <malloc+0xb2>
    5968:	c9 01       	movw	r24, r18
    596a:	84 1b       	sub	r24, r20
    596c:	95 0b       	sbc	r25, r21
    596e:	84 30       	cpi	r24, 0x04	; 4
    5970:	91 05       	cpc	r25, r1
    5972:	80 f4       	brcc	.+32     	; 0x5994 <malloc+0xa0>
    5974:	8a 81       	ldd	r24, Y+2	; 0x02
    5976:	9b 81       	ldd	r25, Y+3	; 0x03
    5978:	61 15       	cp	r22, r1
    597a:	71 05       	cpc	r23, r1
    597c:	21 f0       	breq	.+8      	; 0x5986 <malloc+0x92>
    597e:	fb 01       	movw	r30, r22
    5980:	93 83       	std	Z+3, r25	; 0x03
    5982:	82 83       	std	Z+2, r24	; 0x02
    5984:	04 c0       	rjmp	.+8      	; 0x598e <malloc+0x9a>
    5986:	90 93 3e 06 	sts	0x063E, r25
    598a:	80 93 3d 06 	sts	0x063D, r24
    598e:	fe 01       	movw	r30, r28
    5990:	32 96       	adiw	r30, 0x02	; 2
    5992:	42 c0       	rjmp	.+132    	; 0x5a18 <malloc+0x124>
    5994:	fe 01       	movw	r30, r28
    5996:	e8 0f       	add	r30, r24
    5998:	f9 1f       	adc	r31, r25
    599a:	41 93       	st	Z+, r20
    599c:	51 93       	st	Z+, r21
    599e:	02 97       	sbiw	r24, 0x02	; 2
    59a0:	99 83       	std	Y+1, r25	; 0x01
    59a2:	88 83       	st	Y, r24
    59a4:	39 c0       	rjmp	.+114    	; 0x5a18 <malloc+0x124>
    59a6:	80 91 3b 06 	lds	r24, 0x063B
    59aa:	90 91 3c 06 	lds	r25, 0x063C
    59ae:	00 97       	sbiw	r24, 0x00	; 0
    59b0:	41 f4       	brne	.+16     	; 0x59c2 <malloc+0xce>
    59b2:	80 91 cd 03 	lds	r24, 0x03CD
    59b6:	90 91 ce 03 	lds	r25, 0x03CE
    59ba:	90 93 3c 06 	sts	0x063C, r25
    59be:	80 93 3b 06 	sts	0x063B, r24
    59c2:	20 91 cb 03 	lds	r18, 0x03CB
    59c6:	30 91 cc 03 	lds	r19, 0x03CC
    59ca:	21 15       	cp	r18, r1
    59cc:	31 05       	cpc	r19, r1
    59ce:	41 f4       	brne	.+16     	; 0x59e0 <malloc+0xec>
    59d0:	2d b7       	in	r18, 0x3d	; 61
    59d2:	3e b7       	in	r19, 0x3e	; 62
    59d4:	80 91 cf 03 	lds	r24, 0x03CF
    59d8:	90 91 d0 03 	lds	r25, 0x03D0
    59dc:	28 1b       	sub	r18, r24
    59de:	39 0b       	sbc	r19, r25
    59e0:	e0 91 3b 06 	lds	r30, 0x063B
    59e4:	f0 91 3c 06 	lds	r31, 0x063C
    59e8:	e2 17       	cp	r30, r18
    59ea:	f3 07       	cpc	r31, r19
    59ec:	98 f4       	brcc	.+38     	; 0x5a14 <malloc+0x120>
    59ee:	2e 1b       	sub	r18, r30
    59f0:	3f 0b       	sbc	r19, r31
    59f2:	24 17       	cp	r18, r20
    59f4:	35 07       	cpc	r19, r21
    59f6:	70 f0       	brcs	.+28     	; 0x5a14 <malloc+0x120>
    59f8:	ca 01       	movw	r24, r20
    59fa:	02 96       	adiw	r24, 0x02	; 2
    59fc:	28 17       	cp	r18, r24
    59fe:	39 07       	cpc	r19, r25
    5a00:	48 f0       	brcs	.+18     	; 0x5a14 <malloc+0x120>
    5a02:	8e 0f       	add	r24, r30
    5a04:	9f 1f       	adc	r25, r31
    5a06:	90 93 3c 06 	sts	0x063C, r25
    5a0a:	80 93 3b 06 	sts	0x063B, r24
    5a0e:	41 93       	st	Z+, r20
    5a10:	51 93       	st	Z+, r21
    5a12:	02 c0       	rjmp	.+4      	; 0x5a18 <malloc+0x124>
    5a14:	e0 e0       	ldi	r30, 0x00	; 0
    5a16:	f0 e0       	ldi	r31, 0x00	; 0
    5a18:	cf 01       	movw	r24, r30
    5a1a:	df 91       	pop	r29
    5a1c:	cf 91       	pop	r28
    5a1e:	08 95       	ret

00005a20 <free>:
    5a20:	0f 93       	push	r16
    5a22:	1f 93       	push	r17
    5a24:	cf 93       	push	r28
    5a26:	df 93       	push	r29
    5a28:	9c 01       	movw	r18, r24
    5a2a:	00 97       	sbiw	r24, 0x00	; 0
    5a2c:	09 f4       	brne	.+2      	; 0x5a30 <free+0x10>
    5a2e:	8c c0       	rjmp	.+280    	; 0x5b48 <free+0x128>
    5a30:	dc 01       	movw	r26, r24
    5a32:	12 97       	sbiw	r26, 0x02	; 2
    5a34:	13 96       	adiw	r26, 0x03	; 3
    5a36:	1c 92       	st	X, r1
    5a38:	1e 92       	st	-X, r1
    5a3a:	12 97       	sbiw	r26, 0x02	; 2
    5a3c:	60 91 3d 06 	lds	r22, 0x063D
    5a40:	70 91 3e 06 	lds	r23, 0x063E
    5a44:	61 15       	cp	r22, r1
    5a46:	71 05       	cpc	r23, r1
    5a48:	89 f4       	brne	.+34     	; 0x5a6c <free+0x4c>
    5a4a:	8d 91       	ld	r24, X+
    5a4c:	9c 91       	ld	r25, X
    5a4e:	11 97       	sbiw	r26, 0x01	; 1
    5a50:	82 0f       	add	r24, r18
    5a52:	93 1f       	adc	r25, r19
    5a54:	20 91 3b 06 	lds	r18, 0x063B
    5a58:	30 91 3c 06 	lds	r19, 0x063C
    5a5c:	28 17       	cp	r18, r24
    5a5e:	39 07       	cpc	r19, r25
    5a60:	69 f5       	brne	.+90     	; 0x5abc <free+0x9c>
    5a62:	b0 93 3c 06 	sts	0x063C, r27
    5a66:	a0 93 3b 06 	sts	0x063B, r26
    5a6a:	6e c0       	rjmp	.+220    	; 0x5b48 <free+0x128>
    5a6c:	fb 01       	movw	r30, r22
    5a6e:	40 e0       	ldi	r20, 0x00	; 0
    5a70:	50 e0       	ldi	r21, 0x00	; 0
    5a72:	01 c0       	rjmp	.+2      	; 0x5a76 <free+0x56>
    5a74:	fc 01       	movw	r30, r24
    5a76:	ea 17       	cp	r30, r26
    5a78:	fb 07       	cpc	r31, r27
    5a7a:	30 f4       	brcc	.+12     	; 0x5a88 <free+0x68>
    5a7c:	82 81       	ldd	r24, Z+2	; 0x02
    5a7e:	93 81       	ldd	r25, Z+3	; 0x03
    5a80:	af 01       	movw	r20, r30
    5a82:	00 97       	sbiw	r24, 0x00	; 0
    5a84:	b9 f7       	brne	.-18     	; 0x5a74 <free+0x54>
    5a86:	1f c0       	rjmp	.+62     	; 0x5ac6 <free+0xa6>
    5a88:	e9 01       	movw	r28, r18
    5a8a:	22 97       	sbiw	r28, 0x02	; 2
    5a8c:	fb 83       	std	Y+3, r31	; 0x03
    5a8e:	ea 83       	std	Y+2, r30	; 0x02
    5a90:	08 81       	ld	r16, Y
    5a92:	19 81       	ldd	r17, Y+1	; 0x01
    5a94:	c9 01       	movw	r24, r18
    5a96:	80 0f       	add	r24, r16
    5a98:	91 1f       	adc	r25, r17
    5a9a:	8e 17       	cp	r24, r30
    5a9c:	9f 07       	cpc	r25, r31
    5a9e:	59 f4       	brne	.+22     	; 0x5ab6 <free+0x96>
    5aa0:	80 81       	ld	r24, Z
    5aa2:	91 81       	ldd	r25, Z+1	; 0x01
    5aa4:	80 0f       	add	r24, r16
    5aa6:	91 1f       	adc	r25, r17
    5aa8:	02 96       	adiw	r24, 0x02	; 2
    5aaa:	99 83       	std	Y+1, r25	; 0x01
    5aac:	88 83       	st	Y, r24
    5aae:	82 81       	ldd	r24, Z+2	; 0x02
    5ab0:	93 81       	ldd	r25, Z+3	; 0x03
    5ab2:	9b 83       	std	Y+3, r25	; 0x03
    5ab4:	8a 83       	std	Y+2, r24	; 0x02
    5ab6:	41 15       	cp	r20, r1
    5ab8:	51 05       	cpc	r21, r1
    5aba:	29 f4       	brne	.+10     	; 0x5ac6 <free+0xa6>
    5abc:	b0 93 3e 06 	sts	0x063E, r27
    5ac0:	a0 93 3d 06 	sts	0x063D, r26
    5ac4:	41 c0       	rjmp	.+130    	; 0x5b48 <free+0x128>
    5ac6:	fa 01       	movw	r30, r20
    5ac8:	b3 83       	std	Z+3, r27	; 0x03
    5aca:	a2 83       	std	Z+2, r26	; 0x02
    5acc:	c1 91       	ld	r28, Z+
    5ace:	d1 91       	ld	r29, Z+
    5ad0:	ec 0f       	add	r30, r28
    5ad2:	fd 1f       	adc	r31, r29
    5ad4:	ae 17       	cp	r26, r30
    5ad6:	bf 07       	cpc	r27, r31
    5ad8:	81 f4       	brne	.+32     	; 0x5afa <free+0xda>
    5ada:	f9 01       	movw	r30, r18
    5adc:	92 91       	ld	r25, -Z
    5ade:	82 91       	ld	r24, -Z
    5ae0:	8c 0f       	add	r24, r28
    5ae2:	9d 1f       	adc	r25, r29
    5ae4:	02 96       	adiw	r24, 0x02	; 2
    5ae6:	da 01       	movw	r26, r20
    5ae8:	11 96       	adiw	r26, 0x01	; 1
    5aea:	9c 93       	st	X, r25
    5aec:	8e 93       	st	-X, r24
    5aee:	82 81       	ldd	r24, Z+2	; 0x02
    5af0:	93 81       	ldd	r25, Z+3	; 0x03
    5af2:	13 96       	adiw	r26, 0x03	; 3
    5af4:	9c 93       	st	X, r25
    5af6:	8e 93       	st	-X, r24
    5af8:	12 97       	sbiw	r26, 0x02	; 2
    5afa:	e0 e0       	ldi	r30, 0x00	; 0
    5afc:	f0 e0       	ldi	r31, 0x00	; 0
    5afe:	02 c0       	rjmp	.+4      	; 0x5b04 <free+0xe4>
    5b00:	fb 01       	movw	r30, r22
    5b02:	bc 01       	movw	r22, r24
    5b04:	db 01       	movw	r26, r22
    5b06:	12 96       	adiw	r26, 0x02	; 2
    5b08:	8d 91       	ld	r24, X+
    5b0a:	9c 91       	ld	r25, X
    5b0c:	13 97       	sbiw	r26, 0x03	; 3
    5b0e:	00 97       	sbiw	r24, 0x00	; 0
    5b10:	b9 f7       	brne	.-18     	; 0x5b00 <free+0xe0>
    5b12:	cb 01       	movw	r24, r22
    5b14:	02 96       	adiw	r24, 0x02	; 2
    5b16:	2d 91       	ld	r18, X+
    5b18:	3c 91       	ld	r19, X
    5b1a:	11 97       	sbiw	r26, 0x01	; 1
    5b1c:	82 0f       	add	r24, r18
    5b1e:	93 1f       	adc	r25, r19
    5b20:	20 91 3b 06 	lds	r18, 0x063B
    5b24:	30 91 3c 06 	lds	r19, 0x063C
    5b28:	28 17       	cp	r18, r24
    5b2a:	39 07       	cpc	r19, r25
    5b2c:	69 f4       	brne	.+26     	; 0x5b48 <free+0x128>
    5b2e:	30 97       	sbiw	r30, 0x00	; 0
    5b30:	29 f4       	brne	.+10     	; 0x5b3c <free+0x11c>
    5b32:	10 92 3e 06 	sts	0x063E, r1
    5b36:	10 92 3d 06 	sts	0x063D, r1
    5b3a:	02 c0       	rjmp	.+4      	; 0x5b40 <free+0x120>
    5b3c:	13 82       	std	Z+3, r1	; 0x03
    5b3e:	12 82       	std	Z+2, r1	; 0x02
    5b40:	70 93 3c 06 	sts	0x063C, r23
    5b44:	60 93 3b 06 	sts	0x063B, r22
    5b48:	df 91       	pop	r29
    5b4a:	cf 91       	pop	r28
    5b4c:	1f 91       	pop	r17
    5b4e:	0f 91       	pop	r16
    5b50:	08 95       	ret

00005b52 <realloc>:
    5b52:	a2 e0       	ldi	r26, 0x02	; 2
    5b54:	b0 e0       	ldi	r27, 0x00	; 0
    5b56:	ef ea       	ldi	r30, 0xAF	; 175
    5b58:	fd e2       	ldi	r31, 0x2D	; 45
    5b5a:	0c 94 72 2f 	jmp	0x5ee4	; 0x5ee4 <__prologue_saves__+0xc>
    5b5e:	8c 01       	movw	r16, r24
    5b60:	00 97       	sbiw	r24, 0x00	; 0
    5b62:	29 f4       	brne	.+10     	; 0x5b6e <realloc+0x1c>
    5b64:	cb 01       	movw	r24, r22
    5b66:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <malloc>
    5b6a:	8c 01       	movw	r16, r24
    5b6c:	b8 c0       	rjmp	.+368    	; 0x5cde <realloc+0x18c>
    5b6e:	dc 01       	movw	r26, r24
    5b70:	a6 0f       	add	r26, r22
    5b72:	b7 1f       	adc	r27, r23
    5b74:	fc 01       	movw	r30, r24
    5b76:	32 97       	sbiw	r30, 0x02	; 2
    5b78:	ae 17       	cp	r26, r30
    5b7a:	bf 07       	cpc	r27, r31
    5b7c:	08 f4       	brcc	.+2      	; 0x5b80 <realloc+0x2e>
    5b7e:	ad c0       	rjmp	.+346    	; 0x5cda <realloc+0x188>
    5b80:	20 81       	ld	r18, Z
    5b82:	31 81       	ldd	r19, Z+1	; 0x01
    5b84:	26 17       	cp	r18, r22
    5b86:	37 07       	cpc	r19, r23
    5b88:	b0 f0       	brcs	.+44     	; 0x5bb6 <realloc+0x64>
    5b8a:	25 30       	cpi	r18, 0x05	; 5
    5b8c:	31 05       	cpc	r19, r1
    5b8e:	08 f4       	brcc	.+2      	; 0x5b92 <realloc+0x40>
    5b90:	a6 c0       	rjmp	.+332    	; 0x5cde <realloc+0x18c>
    5b92:	c9 01       	movw	r24, r18
    5b94:	04 97       	sbiw	r24, 0x04	; 4
    5b96:	86 17       	cp	r24, r22
    5b98:	97 07       	cpc	r25, r23
    5b9a:	08 f4       	brcc	.+2      	; 0x5b9e <realloc+0x4c>
    5b9c:	a0 c0       	rjmp	.+320    	; 0x5cde <realloc+0x18c>
    5b9e:	22 50       	subi	r18, 0x02	; 2
    5ba0:	30 40       	sbci	r19, 0x00	; 0
    5ba2:	26 1b       	sub	r18, r22
    5ba4:	37 0b       	sbc	r19, r23
    5ba6:	2d 93       	st	X+, r18
    5ba8:	3d 93       	st	X+, r19
    5baa:	cd 01       	movw	r24, r26
    5bac:	71 83       	std	Z+1, r23	; 0x01
    5bae:	60 83       	st	Z, r22
    5bb0:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <free>
    5bb4:	94 c0       	rjmp	.+296    	; 0x5cde <realloc+0x18c>
    5bb6:	6b 01       	movw	r12, r22
    5bb8:	c2 1a       	sub	r12, r18
    5bba:	d3 0a       	sbc	r13, r19
    5bbc:	5c 01       	movw	r10, r24
    5bbe:	a2 0e       	add	r10, r18
    5bc0:	b3 1e       	adc	r11, r19
    5bc2:	e0 91 3d 06 	lds	r30, 0x063D
    5bc6:	f0 91 3e 06 	lds	r31, 0x063E
    5bca:	40 e0       	ldi	r20, 0x00	; 0
    5bcc:	50 e0       	ldi	r21, 0x00	; 0
    5bce:	88 24       	eor	r8, r8
    5bd0:	99 24       	eor	r9, r9
    5bd2:	49 c0       	rjmp	.+146    	; 0x5c66 <realloc+0x114>
    5bd4:	ea 15       	cp	r30, r10
    5bd6:	fb 05       	cpc	r31, r11
    5bd8:	e1 f5       	brne	.+120    	; 0x5c52 <realloc+0x100>
    5bda:	e0 80       	ld	r14, Z
    5bdc:	f1 80       	ldd	r15, Z+1	; 0x01
    5bde:	c7 01       	movw	r24, r14
    5be0:	02 96       	adiw	r24, 0x02	; 2
    5be2:	8c 15       	cp	r24, r12
    5be4:	9d 05       	cpc	r25, r13
    5be6:	a8 f1       	brcs	.+106    	; 0x5c52 <realloc+0x100>
    5be8:	a7 01       	movw	r20, r14
    5bea:	4c 19       	sub	r20, r12
    5bec:	5d 09       	sbc	r21, r13
    5bee:	ca 01       	movw	r24, r20
    5bf0:	02 96       	adiw	r24, 0x02	; 2
    5bf2:	0f 2e       	mov	r0, r31
    5bf4:	fe ef       	ldi	r31, 0xFE	; 254
    5bf6:	cf 2e       	mov	r12, r31
    5bf8:	ff ef       	ldi	r31, 0xFF	; 255
    5bfa:	df 2e       	mov	r13, r31
    5bfc:	f0 2d       	mov	r31, r0
    5bfe:	c0 0e       	add	r12, r16
    5c00:	d1 1e       	adc	r13, r17
    5c02:	85 30       	cpi	r24, 0x05	; 5
    5c04:	91 05       	cpc	r25, r1
    5c06:	78 f0       	brcs	.+30     	; 0x5c26 <realloc+0xd4>
    5c08:	82 81       	ldd	r24, Z+2	; 0x02
    5c0a:	93 81       	ldd	r25, Z+3	; 0x03
    5c0c:	13 96       	adiw	r26, 0x03	; 3
    5c0e:	9c 93       	st	X, r25
    5c10:	8e 93       	st	-X, r24
    5c12:	12 97       	sbiw	r26, 0x02	; 2
    5c14:	11 96       	adiw	r26, 0x01	; 1
    5c16:	5c 93       	st	X, r21
    5c18:	4e 93       	st	-X, r20
    5c1a:	f6 01       	movw	r30, r12
    5c1c:	71 83       	std	Z+1, r23	; 0x01
    5c1e:	60 83       	st	Z, r22
    5c20:	9a 2f       	mov	r25, r26
    5c22:	8b 2f       	mov	r24, r27
    5c24:	0a c0       	rjmp	.+20     	; 0x5c3a <realloc+0xe8>
    5c26:	c9 01       	movw	r24, r18
    5c28:	02 96       	adiw	r24, 0x02	; 2
    5c2a:	8e 0d       	add	r24, r14
    5c2c:	9f 1d       	adc	r25, r15
    5c2e:	d6 01       	movw	r26, r12
    5c30:	11 96       	adiw	r26, 0x01	; 1
    5c32:	9c 93       	st	X, r25
    5c34:	8e 93       	st	-X, r24
    5c36:	92 81       	ldd	r25, Z+2	; 0x02
    5c38:	83 81       	ldd	r24, Z+3	; 0x03
    5c3a:	81 14       	cp	r8, r1
    5c3c:	91 04       	cpc	r9, r1
    5c3e:	21 f0       	breq	.+8      	; 0x5c48 <realloc+0xf6>
    5c40:	f4 01       	movw	r30, r8
    5c42:	92 83       	std	Z+2, r25	; 0x02
    5c44:	83 83       	std	Z+3, r24	; 0x03
    5c46:	4b c0       	rjmp	.+150    	; 0x5cde <realloc+0x18c>
    5c48:	90 93 3d 06 	sts	0x063D, r25
    5c4c:	80 93 3e 06 	sts	0x063E, r24
    5c50:	46 c0       	rjmp	.+140    	; 0x5cde <realloc+0x18c>
    5c52:	80 81       	ld	r24, Z
    5c54:	91 81       	ldd	r25, Z+1	; 0x01
    5c56:	48 17       	cp	r20, r24
    5c58:	59 07       	cpc	r21, r25
    5c5a:	08 f4       	brcc	.+2      	; 0x5c5e <realloc+0x10c>
    5c5c:	ac 01       	movw	r20, r24
    5c5e:	82 81       	ldd	r24, Z+2	; 0x02
    5c60:	93 81       	ldd	r25, Z+3	; 0x03
    5c62:	4f 01       	movw	r8, r30
    5c64:	fc 01       	movw	r30, r24
    5c66:	30 97       	sbiw	r30, 0x00	; 0
    5c68:	09 f0       	breq	.+2      	; 0x5c6c <realloc+0x11a>
    5c6a:	b4 cf       	rjmp	.-152    	; 0x5bd4 <realloc+0x82>
    5c6c:	80 91 3b 06 	lds	r24, 0x063B
    5c70:	90 91 3c 06 	lds	r25, 0x063C
    5c74:	8a 15       	cp	r24, r10
    5c76:	9b 05       	cpc	r25, r11
    5c78:	e9 f4       	brne	.+58     	; 0x5cb4 <realloc+0x162>
    5c7a:	46 17       	cp	r20, r22
    5c7c:	57 07       	cpc	r21, r23
    5c7e:	d0 f4       	brcc	.+52     	; 0x5cb4 <realloc+0x162>
    5c80:	80 91 cb 03 	lds	r24, 0x03CB
    5c84:	90 91 cc 03 	lds	r25, 0x03CC
    5c88:	00 97       	sbiw	r24, 0x00	; 0
    5c8a:	41 f4       	brne	.+16     	; 0x5c9c <realloc+0x14a>
    5c8c:	8d b7       	in	r24, 0x3d	; 61
    5c8e:	9e b7       	in	r25, 0x3e	; 62
    5c90:	20 91 cf 03 	lds	r18, 0x03CF
    5c94:	30 91 d0 03 	lds	r19, 0x03D0
    5c98:	82 1b       	sub	r24, r18
    5c9a:	93 0b       	sbc	r25, r19
    5c9c:	a8 17       	cp	r26, r24
    5c9e:	b9 07       	cpc	r27, r25
    5ca0:	e0 f4       	brcc	.+56     	; 0x5cda <realloc+0x188>
    5ca2:	b0 93 3c 06 	sts	0x063C, r27
    5ca6:	a0 93 3b 06 	sts	0x063B, r26
    5caa:	f8 01       	movw	r30, r16
    5cac:	32 97       	sbiw	r30, 0x02	; 2
    5cae:	71 83       	std	Z+1, r23	; 0x01
    5cb0:	60 83       	st	Z, r22
    5cb2:	15 c0       	rjmp	.+42     	; 0x5cde <realloc+0x18c>
    5cb4:	cb 01       	movw	r24, r22
    5cb6:	29 83       	std	Y+1, r18	; 0x01
    5cb8:	3a 83       	std	Y+2, r19	; 0x02
    5cba:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <malloc>
    5cbe:	7c 01       	movw	r14, r24
    5cc0:	29 81       	ldd	r18, Y+1	; 0x01
    5cc2:	3a 81       	ldd	r19, Y+2	; 0x02
    5cc4:	00 97       	sbiw	r24, 0x00	; 0
    5cc6:	49 f0       	breq	.+18     	; 0x5cda <realloc+0x188>
    5cc8:	b8 01       	movw	r22, r16
    5cca:	a9 01       	movw	r20, r18
    5ccc:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <memcpy>
    5cd0:	c8 01       	movw	r24, r16
    5cd2:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <free>
    5cd6:	87 01       	movw	r16, r14
    5cd8:	02 c0       	rjmp	.+4      	; 0x5cde <realloc+0x18c>
    5cda:	00 e0       	ldi	r16, 0x00	; 0
    5cdc:	10 e0       	ldi	r17, 0x00	; 0
    5cde:	c8 01       	movw	r24, r16
    5ce0:	22 96       	adiw	r28, 0x02	; 2
    5ce2:	ec e0       	ldi	r30, 0x0C	; 12
    5ce4:	0c 94 8e 2f 	jmp	0x5f1c	; 0x5f1c <__epilogue_restores__+0xc>

00005ce8 <atol>:
    5ce8:	1f 93       	push	r17
    5cea:	fc 01       	movw	r30, r24
    5cec:	99 27       	eor	r25, r25
    5cee:	88 27       	eor	r24, r24
    5cf0:	bc 01       	movw	r22, r24
    5cf2:	e8 94       	clt
    5cf4:	11 91       	ld	r17, Z+
    5cf6:	10 32       	cpi	r17, 0x20	; 32
    5cf8:	e9 f3       	breq	.-6      	; 0x5cf4 <atol+0xc>
    5cfa:	19 30       	cpi	r17, 0x09	; 9
    5cfc:	10 f0       	brcs	.+4      	; 0x5d02 <atol+0x1a>
    5cfe:	1e 30       	cpi	r17, 0x0E	; 14
    5d00:	c8 f3       	brcs	.-14     	; 0x5cf4 <atol+0xc>
    5d02:	1b 32       	cpi	r17, 0x2B	; 43
    5d04:	51 f0       	breq	.+20     	; 0x5d1a <atol+0x32>
    5d06:	1d 32       	cpi	r17, 0x2D	; 45
    5d08:	49 f4       	brne	.+18     	; 0x5d1c <atol+0x34>
    5d0a:	68 94       	set
    5d0c:	06 c0       	rjmp	.+12     	; 0x5d1a <atol+0x32>
    5d0e:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__mulsi_const_10>
    5d12:	61 0f       	add	r22, r17
    5d14:	71 1d       	adc	r23, r1
    5d16:	81 1d       	adc	r24, r1
    5d18:	91 1d       	adc	r25, r1
    5d1a:	11 91       	ld	r17, Z+
    5d1c:	10 53       	subi	r17, 0x30	; 48
    5d1e:	1a 30       	cpi	r17, 0x0A	; 10
    5d20:	b0 f3       	brcs	.-20     	; 0x5d0e <atol+0x26>
    5d22:	3e f4       	brtc	.+14     	; 0x5d32 <atol+0x4a>
    5d24:	90 95       	com	r25
    5d26:	80 95       	com	r24
    5d28:	70 95       	com	r23
    5d2a:	61 95       	neg	r22
    5d2c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d2e:	8f 4f       	sbci	r24, 0xFF	; 255
    5d30:	9f 4f       	sbci	r25, 0xFF	; 255
    5d32:	1f 91       	pop	r17
    5d34:	08 95       	ret

00005d36 <isspace>:
    5d36:	91 11       	cpse	r25, r1
    5d38:	bc c0       	rjmp	.+376    	; 0x5eb2 <__ctype_isfalse>
    5d3a:	80 32       	cpi	r24, 0x20	; 32
    5d3c:	19 f0       	breq	.+6      	; 0x5d44 <isspace+0xe>
    5d3e:	89 50       	subi	r24, 0x09	; 9
    5d40:	85 50       	subi	r24, 0x05	; 5
    5d42:	d0 f7       	brcc	.-12     	; 0x5d38 <isspace+0x2>
    5d44:	08 95       	ret

00005d46 <memcpy>:
    5d46:	fb 01       	movw	r30, r22
    5d48:	dc 01       	movw	r26, r24
    5d4a:	02 c0       	rjmp	.+4      	; 0x5d50 <memcpy+0xa>
    5d4c:	01 90       	ld	r0, Z+
    5d4e:	0d 92       	st	X+, r0
    5d50:	41 50       	subi	r20, 0x01	; 1
    5d52:	50 40       	sbci	r21, 0x00	; 0
    5d54:	d8 f7       	brcc	.-10     	; 0x5d4c <memcpy+0x6>
    5d56:	08 95       	ret

00005d58 <memmove>:
    5d58:	68 17       	cp	r22, r24
    5d5a:	79 07       	cpc	r23, r25
    5d5c:	68 f4       	brcc	.+26     	; 0x5d78 <memmove+0x20>
    5d5e:	fb 01       	movw	r30, r22
    5d60:	dc 01       	movw	r26, r24
    5d62:	e4 0f       	add	r30, r20
    5d64:	f5 1f       	adc	r31, r21
    5d66:	a4 0f       	add	r26, r20
    5d68:	b5 1f       	adc	r27, r21
    5d6a:	02 c0       	rjmp	.+4      	; 0x5d70 <memmove+0x18>
    5d6c:	02 90       	ld	r0, -Z
    5d6e:	0e 92       	st	-X, r0
    5d70:	41 50       	subi	r20, 0x01	; 1
    5d72:	50 40       	sbci	r21, 0x00	; 0
    5d74:	d8 f7       	brcc	.-10     	; 0x5d6c <memmove+0x14>
    5d76:	08 95       	ret
    5d78:	0c 94 a3 2e 	jmp	0x5d46	; 0x5d46 <memcpy>

00005d7c <strcmp>:
    5d7c:	fb 01       	movw	r30, r22
    5d7e:	dc 01       	movw	r26, r24
    5d80:	8d 91       	ld	r24, X+
    5d82:	01 90       	ld	r0, Z+
    5d84:	80 19       	sub	r24, r0
    5d86:	01 10       	cpse	r0, r1
    5d88:	d9 f3       	breq	.-10     	; 0x5d80 <strcmp+0x4>
    5d8a:	99 0b       	sbc	r25, r25
    5d8c:	08 95       	ret

00005d8e <strcpy>:
    5d8e:	fb 01       	movw	r30, r22
    5d90:	dc 01       	movw	r26, r24
    5d92:	01 90       	ld	r0, Z+
    5d94:	0d 92       	st	X+, r0
    5d96:	00 20       	and	r0, r0
    5d98:	e1 f7       	brne	.-8      	; 0x5d92 <strcpy+0x4>
    5d9a:	08 95       	ret

00005d9c <strstr>:
    5d9c:	fb 01       	movw	r30, r22
    5d9e:	51 91       	ld	r21, Z+
    5da0:	55 23       	and	r21, r21
    5da2:	a9 f0       	breq	.+42     	; 0x5dce <strstr+0x32>
    5da4:	bf 01       	movw	r22, r30
    5da6:	dc 01       	movw	r26, r24
    5da8:	4d 91       	ld	r20, X+
    5daa:	45 17       	cp	r20, r21
    5dac:	41 11       	cpse	r20, r1
    5dae:	e1 f7       	brne	.-8      	; 0x5da8 <strstr+0xc>
    5db0:	59 f4       	brne	.+22     	; 0x5dc8 <strstr+0x2c>
    5db2:	cd 01       	movw	r24, r26
    5db4:	01 90       	ld	r0, Z+
    5db6:	00 20       	and	r0, r0
    5db8:	49 f0       	breq	.+18     	; 0x5dcc <strstr+0x30>
    5dba:	4d 91       	ld	r20, X+
    5dbc:	40 15       	cp	r20, r0
    5dbe:	41 11       	cpse	r20, r1
    5dc0:	c9 f3       	breq	.-14     	; 0x5db4 <strstr+0x18>
    5dc2:	fb 01       	movw	r30, r22
    5dc4:	41 11       	cpse	r20, r1
    5dc6:	ef cf       	rjmp	.-34     	; 0x5da6 <strstr+0xa>
    5dc8:	81 e0       	ldi	r24, 0x01	; 1
    5dca:	90 e0       	ldi	r25, 0x00	; 0
    5dcc:	01 97       	sbiw	r24, 0x01	; 1
    5dce:	08 95       	ret

00005dd0 <itoa>:
    5dd0:	fb 01       	movw	r30, r22
    5dd2:	9f 01       	movw	r18, r30
    5dd4:	e8 94       	clt
    5dd6:	42 30       	cpi	r20, 0x02	; 2
    5dd8:	c4 f0       	brlt	.+48     	; 0x5e0a <itoa+0x3a>
    5dda:	45 32       	cpi	r20, 0x25	; 37
    5ddc:	b4 f4       	brge	.+44     	; 0x5e0a <itoa+0x3a>
    5dde:	4a 30       	cpi	r20, 0x0A	; 10
    5de0:	29 f4       	brne	.+10     	; 0x5dec <itoa+0x1c>
    5de2:	97 fb       	bst	r25, 7
    5de4:	1e f4       	brtc	.+6      	; 0x5dec <itoa+0x1c>
    5de6:	90 95       	com	r25
    5de8:	81 95       	neg	r24
    5dea:	9f 4f       	sbci	r25, 0xFF	; 255
    5dec:	64 2f       	mov	r22, r20
    5dee:	77 27       	eor	r23, r23
    5df0:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <__udivmodhi4>
    5df4:	80 5d       	subi	r24, 0xD0	; 208
    5df6:	8a 33       	cpi	r24, 0x3A	; 58
    5df8:	0c f0       	brlt	.+2      	; 0x5dfc <itoa+0x2c>
    5dfa:	89 5d       	subi	r24, 0xD9	; 217
    5dfc:	81 93       	st	Z+, r24
    5dfe:	cb 01       	movw	r24, r22
    5e00:	00 97       	sbiw	r24, 0x00	; 0
    5e02:	a1 f7       	brne	.-24     	; 0x5dec <itoa+0x1c>
    5e04:	16 f4       	brtc	.+4      	; 0x5e0a <itoa+0x3a>
    5e06:	5d e2       	ldi	r21, 0x2D	; 45
    5e08:	51 93       	st	Z+, r21
    5e0a:	10 82       	st	Z, r1
    5e0c:	c9 01       	movw	r24, r18
    5e0e:	0c 94 5c 2f 	jmp	0x5eb8	; 0x5eb8 <strrev>

00005e12 <__mulsi_const_10>:
    5e12:	59 2f       	mov	r21, r25
    5e14:	48 2f       	mov	r20, r24
    5e16:	37 2f       	mov	r19, r23
    5e18:	26 2f       	mov	r18, r22
    5e1a:	66 0f       	add	r22, r22
    5e1c:	77 1f       	adc	r23, r23
    5e1e:	88 1f       	adc	r24, r24
    5e20:	99 1f       	adc	r25, r25
    5e22:	66 0f       	add	r22, r22
    5e24:	77 1f       	adc	r23, r23
    5e26:	88 1f       	adc	r24, r24
    5e28:	99 1f       	adc	r25, r25
    5e2a:	62 0f       	add	r22, r18
    5e2c:	73 1f       	adc	r23, r19
    5e2e:	84 1f       	adc	r24, r20
    5e30:	95 1f       	adc	r25, r21
    5e32:	66 0f       	add	r22, r22
    5e34:	77 1f       	adc	r23, r23
    5e36:	88 1f       	adc	r24, r24
    5e38:	99 1f       	adc	r25, r25
    5e3a:	08 95       	ret

00005e3c <ultoa>:
    5e3c:	fa 01       	movw	r30, r20
    5e3e:	cf 93       	push	r28
    5e40:	ff 93       	push	r31
    5e42:	ef 93       	push	r30
    5e44:	22 30       	cpi	r18, 0x02	; 2
    5e46:	cc f0       	brlt	.+50     	; 0x5e7a <ultoa+0x3e>
    5e48:	25 32       	cpi	r18, 0x25	; 37
    5e4a:	bc f4       	brge	.+46     	; 0x5e7a <ultoa+0x3e>
    5e4c:	c2 2f       	mov	r28, r18
    5e4e:	2c 2f       	mov	r18, r28
    5e50:	33 27       	eor	r19, r19
    5e52:	44 27       	eor	r20, r20
    5e54:	55 27       	eor	r21, r21
    5e56:	ff 93       	push	r31
    5e58:	ef 93       	push	r30
    5e5a:	0e 94 23 2c 	call	0x5846	; 0x5846 <__udivmodsi4>
    5e5e:	ef 91       	pop	r30
    5e60:	ff 91       	pop	r31
    5e62:	60 5d       	subi	r22, 0xD0	; 208
    5e64:	6a 33       	cpi	r22, 0x3A	; 58
    5e66:	0c f0       	brlt	.+2      	; 0x5e6a <ultoa+0x2e>
    5e68:	69 5d       	subi	r22, 0xD9	; 217
    5e6a:	61 93       	st	Z+, r22
    5e6c:	b9 01       	movw	r22, r18
    5e6e:	ca 01       	movw	r24, r20
    5e70:	60 50       	subi	r22, 0x00	; 0
    5e72:	70 40       	sbci	r23, 0x00	; 0
    5e74:	80 40       	sbci	r24, 0x00	; 0
    5e76:	90 40       	sbci	r25, 0x00	; 0
    5e78:	51 f7       	brne	.-44     	; 0x5e4e <ultoa+0x12>
    5e7a:	10 82       	st	Z, r1
    5e7c:	8f 91       	pop	r24
    5e7e:	9f 91       	pop	r25
    5e80:	cf 91       	pop	r28
    5e82:	0c 94 5c 2f 	jmp	0x5eb8	; 0x5eb8 <strrev>

00005e86 <utoa>:
    5e86:	fb 01       	movw	r30, r22
    5e88:	9f 01       	movw	r18, r30
    5e8a:	42 30       	cpi	r20, 0x02	; 2
    5e8c:	74 f0       	brlt	.+28     	; 0x5eaa <utoa+0x24>
    5e8e:	45 32       	cpi	r20, 0x25	; 37
    5e90:	64 f4       	brge	.+24     	; 0x5eaa <utoa+0x24>
    5e92:	64 2f       	mov	r22, r20
    5e94:	77 27       	eor	r23, r23
    5e96:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <__udivmodhi4>
    5e9a:	80 5d       	subi	r24, 0xD0	; 208
    5e9c:	8a 33       	cpi	r24, 0x3A	; 58
    5e9e:	0c f0       	brlt	.+2      	; 0x5ea2 <utoa+0x1c>
    5ea0:	89 5d       	subi	r24, 0xD9	; 217
    5ea2:	81 93       	st	Z+, r24
    5ea4:	cb 01       	movw	r24, r22
    5ea6:	00 97       	sbiw	r24, 0x00	; 0
    5ea8:	a1 f7       	brne	.-24     	; 0x5e92 <utoa+0xc>
    5eaa:	10 82       	st	Z, r1
    5eac:	c9 01       	movw	r24, r18
    5eae:	0c 94 5c 2f 	jmp	0x5eb8	; 0x5eb8 <strrev>

00005eb2 <__ctype_isfalse>:
    5eb2:	99 27       	eor	r25, r25
    5eb4:	88 27       	eor	r24, r24

00005eb6 <__ctype_istrue>:
    5eb6:	08 95       	ret

00005eb8 <strrev>:
    5eb8:	dc 01       	movw	r26, r24
    5eba:	fc 01       	movw	r30, r24
    5ebc:	67 2f       	mov	r22, r23
    5ebe:	71 91       	ld	r23, Z+
    5ec0:	77 23       	and	r23, r23
    5ec2:	e1 f7       	brne	.-8      	; 0x5ebc <strrev+0x4>
    5ec4:	32 97       	sbiw	r30, 0x02	; 2
    5ec6:	04 c0       	rjmp	.+8      	; 0x5ed0 <strrev+0x18>
    5ec8:	7c 91       	ld	r23, X
    5eca:	6d 93       	st	X+, r22
    5ecc:	70 83       	st	Z, r23
    5ece:	62 91       	ld	r22, -Z
    5ed0:	ae 17       	cp	r26, r30
    5ed2:	bf 07       	cpc	r27, r31
    5ed4:	c8 f3       	brcs	.-14     	; 0x5ec8 <strrev+0x10>
    5ed6:	08 95       	ret

00005ed8 <__prologue_saves__>:
    5ed8:	2f 92       	push	r2
    5eda:	3f 92       	push	r3
    5edc:	4f 92       	push	r4
    5ede:	5f 92       	push	r5
    5ee0:	6f 92       	push	r6
    5ee2:	7f 92       	push	r7
    5ee4:	8f 92       	push	r8
    5ee6:	9f 92       	push	r9
    5ee8:	af 92       	push	r10
    5eea:	bf 92       	push	r11
    5eec:	cf 92       	push	r12
    5eee:	df 92       	push	r13
    5ef0:	ef 92       	push	r14
    5ef2:	ff 92       	push	r15
    5ef4:	0f 93       	push	r16
    5ef6:	1f 93       	push	r17
    5ef8:	cf 93       	push	r28
    5efa:	df 93       	push	r29
    5efc:	cd b7       	in	r28, 0x3d	; 61
    5efe:	de b7       	in	r29, 0x3e	; 62
    5f00:	ca 1b       	sub	r28, r26
    5f02:	db 0b       	sbc	r29, r27
    5f04:	0f b6       	in	r0, 0x3f	; 63
    5f06:	f8 94       	cli
    5f08:	de bf       	out	0x3e, r29	; 62
    5f0a:	0f be       	out	0x3f, r0	; 63
    5f0c:	cd bf       	out	0x3d, r28	; 61
    5f0e:	09 94       	ijmp

00005f10 <__epilogue_restores__>:
    5f10:	2a 88       	ldd	r2, Y+18	; 0x12
    5f12:	39 88       	ldd	r3, Y+17	; 0x11
    5f14:	48 88       	ldd	r4, Y+16	; 0x10
    5f16:	5f 84       	ldd	r5, Y+15	; 0x0f
    5f18:	6e 84       	ldd	r6, Y+14	; 0x0e
    5f1a:	7d 84       	ldd	r7, Y+13	; 0x0d
    5f1c:	8c 84       	ldd	r8, Y+12	; 0x0c
    5f1e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5f20:	aa 84       	ldd	r10, Y+10	; 0x0a
    5f22:	b9 84       	ldd	r11, Y+9	; 0x09
    5f24:	c8 84       	ldd	r12, Y+8	; 0x08
    5f26:	df 80       	ldd	r13, Y+7	; 0x07
    5f28:	ee 80       	ldd	r14, Y+6	; 0x06
    5f2a:	fd 80       	ldd	r15, Y+5	; 0x05
    5f2c:	0c 81       	ldd	r16, Y+4	; 0x04
    5f2e:	1b 81       	ldd	r17, Y+3	; 0x03
    5f30:	aa 81       	ldd	r26, Y+2	; 0x02
    5f32:	b9 81       	ldd	r27, Y+1	; 0x01
    5f34:	ce 0f       	add	r28, r30
    5f36:	d1 1d       	adc	r29, r1
    5f38:	0f b6       	in	r0, 0x3f	; 63
    5f3a:	f8 94       	cli
    5f3c:	de bf       	out	0x3e, r29	; 62
    5f3e:	0f be       	out	0x3f, r0	; 63
    5f40:	cd bf       	out	0x3d, r28	; 61
    5f42:	ed 01       	movw	r28, r26
    5f44:	08 95       	ret

00005f46 <__do_global_dtors>:
    5f46:	11 e0       	ldi	r17, 0x01	; 1
    5f48:	c6 e5       	ldi	r28, 0x56	; 86
    5f4a:	d1 e0       	ldi	r29, 0x01	; 1
    5f4c:	04 c0       	rjmp	.+8      	; 0x5f56 <__do_global_dtors+0x10>
    5f4e:	fe 01       	movw	r30, r28
    5f50:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__tablejump__>
    5f54:	22 96       	adiw	r28, 0x02	; 2
    5f56:	c8 35       	cpi	r28, 0x58	; 88
    5f58:	d1 07       	cpc	r29, r17
    5f5a:	c9 f7       	brne	.-14     	; 0x5f4e <__do_global_dtors+0x8>
    5f5c:	f8 94       	cli

00005f5e <__stop_program>:
    5f5e:	ff cf       	rjmp	.-2      	; 0x5f5e <__stop_program>
